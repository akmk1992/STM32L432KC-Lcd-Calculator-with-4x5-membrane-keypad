
L432KCU3_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  08009b80  08009b80  00019b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a188  0800a188  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800a188  0800a188  0001a188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a190  0800a190  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a190  0800a190  0001a190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a194  0800a194  0001a194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800a198  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000228  0800a3c0  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  0800a3c0  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c17a  00000000  00000000  0002029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002260  00000000  00000000  0002c415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002e678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000842  00000000  00000000  0002f168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002189f  00000000  00000000  0002f9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e454  00000000  00000000  00051249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c226f  00000000  00000000  0005f69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000423c  00000000  00000000  0012190c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00125b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b68 	.word	0x08009b68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08009b68 	.word	0x08009b68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <GPIO_SetBits>:
void HD44780_PutChar(unsigned char c);
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	2201      	movs	r2, #1
 8001000:	4619      	mov	r1, r3
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f001 febe 	bl	8002d84 <HAL_GPIO_WritePin>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <GPIO_ResetBits>:

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	2200      	movs	r2, #0
 8001020:	4619      	mov	r1, r3
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f001 feae 	bl	8002d84 <HAL_GPIO_WritePin>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <hd44780_wr_hi_nibble>:

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	if (data & 0x10) {
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <hd44780_wr_hi_nibble+0x22>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8001044:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f7ff ffd0 	bl	8000ff0 <GPIO_SetBits>
 8001050:	e005      	b.n	800105e <hd44780_wr_hi_nibble+0x2e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8001052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f7ff ffd9 	bl	8001010 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 0320 	and.w	r3, r3, #32
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <hd44780_wr_hi_nibble+0x46>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8001068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f7ff ffbe 	bl	8000ff0 <GPIO_SetBits>
 8001074:	e005      	b.n	8001082 <hd44780_wr_hi_nibble+0x52>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8001076:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f7ff ffc7 	bl	8001010 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001088:	2b00      	cmp	r3, #0
 800108a:	d006      	beq.n	800109a <hd44780_wr_hi_nibble+0x6a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800108c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f7ff ffac 	bl	8000ff0 <GPIO_SetBits>
 8001098:	e005      	b.n	80010a6 <hd44780_wr_hi_nibble+0x76>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800109a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800109e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a2:	f7ff ffb5 	bl	8001010 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da06      	bge.n	80010bc <hd44780_wr_hi_nibble+0x8c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80010ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f7ff ff9b 	bl	8000ff0 <GPIO_SetBits>
 80010ba:	e005      	b.n	80010c8 <hd44780_wr_hi_nibble+0x98>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80010bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c4:	f7ff ffa4 	bl	8001010 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f001 fe57 	bl	8002d84 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80010d6:	2002      	movs	r0, #2
 80010d8:	f001 fbc8 	bl	800286c <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f001 fe4d 	bl	8002d84 <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <hd44780_wr_lo_nibble>:

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
	if (data & 0x01) {
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d006      	beq.n	8001114 <hd44780_wr_lo_nibble+0x22>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8001106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110e:	f7ff ff6f 	bl	8000ff0 <GPIO_SetBits>
 8001112:	e005      	b.n	8001120 <hd44780_wr_lo_nibble+0x2e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8001114:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f7ff ff78 	bl	8001010 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d006      	beq.n	8001138 <hd44780_wr_lo_nibble+0x46>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 800112a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f7ff ff5d 	bl	8000ff0 <GPIO_SetBits>
 8001136:	e005      	b.n	8001144 <hd44780_wr_lo_nibble+0x52>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8001138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001140:	f7ff ff66 	bl	8001010 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <hd44780_wr_lo_nibble+0x6a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800114e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f7ff ff4b 	bl	8000ff0 <GPIO_SetBits>
 800115a:	e005      	b.n	8001168 <hd44780_wr_lo_nibble+0x76>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800115c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f7ff ff54 	bl	8001010 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <hd44780_wr_lo_nibble+0x8e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8001172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f7ff ff39 	bl	8000ff0 <GPIO_SetBits>
 800117e:	e005      	b.n	800118c <hd44780_wr_lo_nibble+0x9a>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8001180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f7ff ff42 	bl	8001010 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001196:	f001 fdf5 	bl	8002d84 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 800119a:	2002      	movs	r0, #2
 800119c:	f001 fb66 	bl	800286c <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f001 fdeb 	bl	8002d84 <HAL_GPIO_WritePin>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <hd44780_write>:

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff34 	bl	8001030 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff91 	bl	80010f2 <hd44780_wr_lo_nibble>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_Off();
 80011e2:	2200      	movs	r2, #0
 80011e4:	2102      	movs	r1, #2
 80011e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ea:	f001 fdcb 	bl	8002d84 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ffe0 	bl	80011b6 <hd44780_write>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <hd44780_wr_data>:

void hd44780_wr_data(unsigned char data) {
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_On();
 8001208:	2201      	movs	r2, #1
 800120a:	2102      	movs	r1, #2
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001210:	f001 fdb8 	bl	8002d84 <HAL_GPIO_WritePin>
	hd44780_write(data);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ffcd 	bl	80011b6 <hd44780_write>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <HD44780_Init>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE();
 800122a:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <HD44780_Init+0xcc>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a30      	ldr	r2, [pc, #192]	; (80012f0 <HD44780_Init+0xcc>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <HD44780_Init+0xcc>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8001242:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001246:	607b      	str	r3, [r7, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800124c:	2301      	movs	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4619      	mov	r1, r3
 8001258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125c:	f001 fc10 	bl	8002a80 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 8001260:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8001264:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800126a:	2301      	movs	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4619      	mov	r1, r3
 8001276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127a:	f001 fc01 	bl	8002a80 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f001 fd7c 	bl	8002d84 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 800128c:	2200      	movs	r2, #0
 800128e:	2102      	movs	r1, #2
 8001290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001294:	f001 fd76 	bl	8002d84 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 8001298:	2200      	movs	r2, #0
 800129a:	2108      	movs	r1, #8
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f001 fd70 	bl	8002d84 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 80012a4:	2010      	movs	r0, #16
 80012a6:	f001 fae1 	bl	800286c <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80012aa:	2030      	movs	r0, #48	; 0x30
 80012ac:	f7ff fec0 	bl	8001030 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 80012b0:	2005      	movs	r0, #5
 80012b2:	f001 fadb 	bl	800286c <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80012b6:	2030      	movs	r0, #48	; 0x30
 80012b8:	f7ff feba 	bl	8001030 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 80012bc:	2001      	movs	r0, #1
 80012be:	f001 fad5 	bl	800286c <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80012c2:	2030      	movs	r0, #48	; 0x30
 80012c4:	f7ff feb4 	bl	8001030 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 80012c8:	2020      	movs	r0, #32
 80012ca:	f7ff feb1 	bl	8001030 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 80012ce:	2028      	movs	r0, #40	; 0x28
 80012d0:	f7ff ff82 	bl	80011d8 <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 80012d4:	200c      	movs	r0, #12
 80012d6:	f7ff ff7f 	bl	80011d8 <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff ff7c 	bl	80011d8 <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 80012e0:	2006      	movs	r0, #6
 80012e2:	f7ff ff79 	bl	80011d8 <hd44780_wr_cmd>

}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <HD44780_PutChar>:

 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	hd44780_wr_data(c & 0xff);
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff7c 	bl	80011fe <hd44780_wr_data>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HD44780_GotoXY>:
 Parameters			: x				-	column position (0 - HD44780_DISP_LENGTH-1)
 y				-	row position (0 - HD44780_DISP_ROWS-1)

 Return value		: NONE
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	460a      	mov	r2, r1
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	4613      	mov	r3, r2
 800131e:	71bb      	strb	r3, [r7, #6]
	unsigned char copy_y = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]

	if (x > (HD44780_DISP_LENGTH - 1))
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	d901      	bls.n	800132e <HD44780_GotoXY+0x1e>
		x = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	71fb      	strb	r3, [r7, #7]

	if (y > (HD44780_DISP_ROWS - 1))
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d901      	bls.n	8001338 <HD44780_GotoXY+0x28>
		y = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	71bb      	strb	r3, [r7, #6]

	switch (y) {
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d816      	bhi.n	800136c <HD44780_GotoXY+0x5c>
 800133e:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <HD44780_GotoXY+0x34>)
 8001340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001344:	08001355 	.word	0x08001355
 8001348:	0800135b 	.word	0x0800135b
 800134c:	08001361 	.word	0x08001361
 8001350:	08001367 	.word	0x08001367
	case 0:
		copy_y = 0x80;
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	73fb      	strb	r3, [r7, #15]
		break;
 8001358:	e008      	b.n	800136c <HD44780_GotoXY+0x5c>
	case 1:
		copy_y = 0xc0;
 800135a:	23c0      	movs	r3, #192	; 0xc0
 800135c:	73fb      	strb	r3, [r7, #15]
		break;
 800135e:	e005      	b.n	800136c <HD44780_GotoXY+0x5c>
	case 2:
		copy_y = 0x94;
 8001360:	2394      	movs	r3, #148	; 0x94
 8001362:	73fb      	strb	r3, [r7, #15]
		break;
 8001364:	e002      	b.n	800136c <HD44780_GotoXY+0x5c>
	case 3:
		copy_y = 0xd4;
 8001366:	23d4      	movs	r3, #212	; 0xd4
 8001368:	73fb      	strb	r3, [r7, #15]
		break;
 800136a:	bf00      	nop
	}
	hd44780_wr_cmd(x + copy_y);
 800136c:	79fa      	ldrb	r2, [r7, #7]
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	4413      	add	r3, r2
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff2f 	bl	80011d8 <hd44780_wr_cmd>
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop

08001384 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__IO unsigned int i = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]

	do {
		HD44780_PutChar(str[i]);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ffab 	bl	80012f4 <HD44780_PutChar>
		i++;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3301      	adds	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
	} while (str[i] != '\0');
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ef      	bne.n	8001390 <HD44780_PutStr+0xc>
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HD44780_ClrScr>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff ff0a 	bl	80011d8 <hd44780_wr_cmd>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <calculate>:
#include <math.h>
#include "HD44780.h"
#include "keypad.h"


float calculate(float num1,float num2,char operator){
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80013d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]

	float output =0 ;
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
	switch (operator){
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b2f      	cmp	r3, #47	; 0x2f
 80013e4:	dc14      	bgt.n	8001410 <calculate+0x48>
 80013e6:	2b2a      	cmp	r3, #42	; 0x2a
 80013e8:	db68      	blt.n	80014bc <calculate+0xf4>
 80013ea:	3b2a      	subs	r3, #42	; 0x2a
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d865      	bhi.n	80014bc <calculate+0xf4>
 80013f0:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <calculate+0x30>)
 80013f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f6:	bf00      	nop
 80013f8:	0800143b 	.word	0x0800143b
 80013fc:	08001417 	.word	0x08001417
 8001400:	080014bd 	.word	0x080014bd
 8001404:	08001429 	.word	0x08001429
 8001408:	080014bd 	.word	0x080014bd
 800140c:	0800147f 	.word	0x0800147f
 8001410:	2b5e      	cmp	r3, #94	; 0x5e
 8001412:	d01b      	beq.n	800144c <calculate+0x84>
 8001414:	e052      	b.n	80014bc <calculate+0xf4>
	case '+' : output =num1+num2 ;break;
 8001416:	ed97 7a03 	vldr	s14, [r7, #12]
 800141a:	edd7 7a02 	vldr	s15, [r7, #8]
 800141e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001422:	edc7 7a05 	vstr	s15, [r7, #20]
 8001426:	e054      	b.n	80014d2 <calculate+0x10a>
	case '-' : output =num1-num2 ;break;
 8001428:	ed97 7a03 	vldr	s14, [r7, #12]
 800142c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001434:	edc7 7a05 	vstr	s15, [r7, #20]
 8001438:	e04b      	b.n	80014d2 <calculate+0x10a>
	case '*' : output =num1*num2 ;break;
 800143a:	ed97 7a03 	vldr	s14, [r7, #12]
 800143e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001446:	edc7 7a05 	vstr	s15, [r7, #20]
 800144a:	e042      	b.n	80014d2 <calculate+0x10a>
	case '^' : output =pow(num1,num2);break;
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f7ff f87b 	bl	8000548 <__aeabi_f2d>
 8001452:	4604      	mov	r4, r0
 8001454:	460d      	mov	r5, r1
 8001456:	68b8      	ldr	r0, [r7, #8]
 8001458:	f7ff f876 	bl	8000548 <__aeabi_f2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	ec43 2b11 	vmov	d1, r2, r3
 8001464:	ec45 4b10 	vmov	d0, r4, r5
 8001468:	f007 fc44 	bl	8008cf4 <pow>
 800146c:	ec53 2b10 	vmov	r2, r3, d0
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fbb8 	bl	8000be8 <__aeabi_d2f>
 8001478:	4603      	mov	r3, r0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e029      	b.n	80014d2 <calculate+0x10a>
	case '/' :
			if(num2 !=0){
 800147e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001482:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148a:	d008      	beq.n	800149e <calculate+0xd6>
				output =num1/num2 ;
 800148c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001490:	ed97 7a02 	vldr	s14, [r7, #8]
 8001494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001498:	edc7 7a05 	vstr	s15, [r7, #20]
				return UINT32_MAX;


			}

			break;
 800149c:	e019      	b.n	80014d2 <calculate+0x10a>
				HD44780_ClrScr();
 800149e:	f7ff ff8c 	bl	80013ba <HD44780_ClrScr>
				HD44780_PutStr("Input error!");
 80014a2:	4810      	ldr	r0, [pc, #64]	; (80014e4 <calculate+0x11c>)
 80014a4:	f7ff ff6e 	bl	8001384 <HD44780_PutStr>
				HD44780_GotoXY(0,1);
 80014a8:	2101      	movs	r1, #1
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff ff30 	bl	8001310 <HD44780_GotoXY>
				HAL_Delay(100);
 80014b0:	2064      	movs	r0, #100	; 0x64
 80014b2:	f001 f9db 	bl	800286c <HAL_Delay>
				return UINT32_MAX;
 80014b6:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
 80014ba:	e00b      	b.n	80014d4 <calculate+0x10c>


	default :
			HD44780_PutStr("Operator error!");
 80014bc:	480a      	ldr	r0, [pc, #40]	; (80014e8 <calculate+0x120>)
 80014be:	f7ff ff61 	bl	8001384 <HD44780_PutStr>
			HAL_Delay(100);
 80014c2:	2064      	movs	r0, #100	; 0x64
 80014c4:	f001 f9d2 	bl	800286c <HAL_Delay>
			HD44780_ClrScr();
 80014c8:	f7ff ff77 	bl	80013ba <HD44780_ClrScr>
			return UINT32_MAX;
 80014cc:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
 80014d0:	e000      	b.n	80014d4 <calculate+0x10c>


	}


	return output;
 80014d2:	697b      	ldr	r3, [r7, #20]
}
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eeb0 0a67 	vmov.f32	s0, s15
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bdb0      	pop	{r4, r5, r7, pc}
 80014e2:	bf00      	nop
 80014e4:	08009b80 	.word	0x08009b80
 80014e8:	08009b90 	.word	0x08009b90

080014ec <deBounceInit>:
#include <stdio.h>
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_gpio.h"

void deBounceInit(int16_t pin, char port, int8_t mode)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
 80014f6:	460b      	mov	r3, r1
 80014f8:	717b      	strb	r3, [r7, #5]
 80014fa:	4613      	mov	r3, r2
 80014fc:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	/*Configure GPIO pin : */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014fe:	2301      	movs	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
	switch(pin)
 8001502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	d85a      	bhi.n	80015c0 <deBounceInit+0xd4>
 800150a:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <deBounceInit+0x24>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	08001551 	.word	0x08001551
 8001514:	08001557 	.word	0x08001557
 8001518:	0800155d 	.word	0x0800155d
 800151c:	08001563 	.word	0x08001563
 8001520:	08001569 	.word	0x08001569
 8001524:	0800156f 	.word	0x0800156f
 8001528:	08001575 	.word	0x08001575
 800152c:	0800157b 	.word	0x0800157b
 8001530:	08001581 	.word	0x08001581
 8001534:	08001589 	.word	0x08001589
 8001538:	08001591 	.word	0x08001591
 800153c:	08001599 	.word	0x08001599
 8001540:	080015a1 	.word	0x080015a1
 8001544:	080015a9 	.word	0x080015a9
 8001548:	080015b1 	.word	0x080015b1
 800154c:	080015b9 	.word	0x080015b9
	{
		case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 8001550:	2301      	movs	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	e038      	b.n	80015c8 <deBounceInit+0xdc>
		case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 8001556:	2302      	movs	r3, #2
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e035      	b.n	80015c8 <deBounceInit+0xdc>
		case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 800155c:	2304      	movs	r3, #4
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e032      	b.n	80015c8 <deBounceInit+0xdc>
		case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8001562:	2308      	movs	r3, #8
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	e02f      	b.n	80015c8 <deBounceInit+0xdc>
		case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8001568:	2310      	movs	r3, #16
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	e02c      	b.n	80015c8 <deBounceInit+0xdc>
		case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 800156e:	2320      	movs	r3, #32
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e029      	b.n	80015c8 <deBounceInit+0xdc>
		case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8001574:	2340      	movs	r3, #64	; 0x40
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e026      	b.n	80015c8 <deBounceInit+0xdc>
		case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	e023      	b.n	80015c8 <deBounceInit+0xdc>
		case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 8001580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	e01f      	b.n	80015c8 <deBounceInit+0xdc>
		case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8001588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e01b      	b.n	80015c8 <deBounceInit+0xdc>
		case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 8001590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	e017      	b.n	80015c8 <deBounceInit+0xdc>
		case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8001598:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	e013      	b.n	80015c8 <deBounceInit+0xdc>
		case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 80015a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	e00f      	b.n	80015c8 <deBounceInit+0xdc>
		case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 80015a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	e00b      	b.n	80015c8 <deBounceInit+0xdc>
		case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 80015b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e007      	b.n	80015c8 <deBounceInit+0xdc>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 80015b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	e003      	b.n	80015c8 <deBounceInit+0xdc>
		default:
			printf( "bad gpio pin number in init\n\r");
 80015c0:	4821      	ldr	r0, [pc, #132]	; (8001648 <deBounceInit+0x15c>)
 80015c2:	f004 fd6d 	bl	80060a0 <iprintf>
			break;
 80015c6:	bf00      	nop
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015cc:	2302      	movs	r3, #2
 80015ce:	617b      	str	r3, [r7, #20]
	switch (mode)
 80015d0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <deBounceInit+0xf2>
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d003      	beq.n	80015e4 <deBounceInit+0xf8>
 80015dc:	e005      	b.n	80015ea <deBounceInit+0xfe>
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
 80015de:	2302      	movs	r3, #2
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	e002      	b.n	80015ea <deBounceInit+0xfe>
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 80015e4:	2301      	movs	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	bf00      	nop
	}
	switch (port)
 80015ea:	797b      	ldrb	r3, [r7, #5]
 80015ec:	2b43      	cmp	r3, #67	; 0x43
 80015ee:	d015      	beq.n	800161c <deBounceInit+0x130>
 80015f0:	2b43      	cmp	r3, #67	; 0x43
 80015f2:	dc1a      	bgt.n	800162a <deBounceInit+0x13e>
 80015f4:	2b41      	cmp	r3, #65	; 0x41
 80015f6:	d002      	beq.n	80015fe <deBounceInit+0x112>
 80015f8:	2b42      	cmp	r3, #66	; 0x42
 80015fa:	d008      	beq.n	800160e <deBounceInit+0x122>
 80015fc:	e015      	b.n	800162a <deBounceInit+0x13e>
	{
		case 'A': HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	4619      	mov	r1, r3
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f001 fa3a 	bl	8002a80 <HAL_GPIO_Init>
 800160c:	e011      	b.n	8001632 <deBounceInit+0x146>
		case 'B': HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	4619      	mov	r1, r3
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <deBounceInit+0x160>)
 8001616:	f001 fa33 	bl	8002a80 <HAL_GPIO_Init>
 800161a:	e00a      	b.n	8001632 <deBounceInit+0x146>
		case 'C': HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	4619      	mov	r1, r3
 8001622:	480b      	ldr	r0, [pc, #44]	; (8001650 <deBounceInit+0x164>)
 8001624:	f001 fa2c 	bl	8002a80 <HAL_GPIO_Init>
 8001628:	e003      	b.n	8001632 <deBounceInit+0x146>
		default:
			printf( "bad gpio port number\n\r");
 800162a:	480a      	ldr	r0, [pc, #40]	; (8001654 <deBounceInit+0x168>)
 800162c:	f004 fd38 	bl	80060a0 <iprintf>
			break;
 8001630:	bf00      	nop
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f001 fa20 	bl	8002a80 <HAL_GPIO_Init>
}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	08009ba0 	.word	0x08009ba0
 800164c:	48000400 	.word	0x48000400
 8001650:	48000800 	.word	0x48000800
 8001654:	08009bc0 	.word	0x08009bc0

08001658 <deBounceReadPin>:

int8_t deBounceReadPin(int16_t pin, char port, int8_t stableInterval)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
 8001662:	460b      	mov	r3, r1
 8001664:	717b      	strb	r3, [r7, #5]
 8001666:	4613      	mov	r3, r2
 8001668:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState = GPIO_PIN_RESET;	//remember variables should be initialized
 800166a:	2300      	movs	r3, #0
 800166c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int8_t pinStateWeAreLookingFor = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int32_t msTimeStamp = HAL_GetTick();		//get a timeStamp in ms
 8001676:	f001 f8ed 	bl	8002854 <HAL_GetTick>
 800167a:	4603      	mov	r3, r0
 800167c:	623b      	str	r3, [r7, #32]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800167e:	2301      	movs	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
		/*Configure GPIO pin : */
		switch(pin)
 8001682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	d85a      	bhi.n	8001740 <deBounceReadPin+0xe8>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <deBounceReadPin+0x38>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016d1 	.word	0x080016d1
 8001694:	080016d7 	.word	0x080016d7
 8001698:	080016dd 	.word	0x080016dd
 800169c:	080016e3 	.word	0x080016e3
 80016a0:	080016e9 	.word	0x080016e9
 80016a4:	080016ef 	.word	0x080016ef
 80016a8:	080016f5 	.word	0x080016f5
 80016ac:	080016fb 	.word	0x080016fb
 80016b0:	08001701 	.word	0x08001701
 80016b4:	08001709 	.word	0x08001709
 80016b8:	08001711 	.word	0x08001711
 80016bc:	08001719 	.word	0x08001719
 80016c0:	08001721 	.word	0x08001721
 80016c4:	08001729 	.word	0x08001729
 80016c8:	08001731 	.word	0x08001731
 80016cc:	08001739 	.word	0x08001739
		{
			case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 80016d0:	2301      	movs	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e038      	b.n	8001748 <deBounceReadPin+0xf0>
			case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 80016d6:	2302      	movs	r3, #2
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	e035      	b.n	8001748 <deBounceReadPin+0xf0>
			case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 80016dc:	2304      	movs	r3, #4
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e032      	b.n	8001748 <deBounceReadPin+0xf0>
			case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 80016e2:	2308      	movs	r3, #8
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	e02f      	b.n	8001748 <deBounceReadPin+0xf0>
			case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 80016e8:	2310      	movs	r3, #16
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	e02c      	b.n	8001748 <deBounceReadPin+0xf0>
			case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 80016ee:	2320      	movs	r3, #32
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e029      	b.n	8001748 <deBounceReadPin+0xf0>
			case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 80016f4:	2340      	movs	r3, #64	; 0x40
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	e026      	b.n	8001748 <deBounceReadPin+0xf0>
			case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	e023      	b.n	8001748 <deBounceReadPin+0xf0>
			case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 8001700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	e01f      	b.n	8001748 <deBounceReadPin+0xf0>
			case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8001708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	e01b      	b.n	8001748 <deBounceReadPin+0xf0>
			case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 8001710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	e017      	b.n	8001748 <deBounceReadPin+0xf0>
			case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8001718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e013      	b.n	8001748 <deBounceReadPin+0xf0>
			case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e00f      	b.n	8001748 <deBounceReadPin+0xf0>
			case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 8001728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e00b      	b.n	8001748 <deBounceReadPin+0xf0>
			case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 8001730:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e007      	b.n	8001748 <deBounceReadPin+0xf0>
			case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 8001738:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	e003      	b.n	8001748 <deBounceReadPin+0xf0>
			default:
				printf( "bad gpio pin number in read pin\n\r");
 8001740:	4847      	ldr	r0, [pc, #284]	; (8001860 <deBounceReadPin+0x208>)
 8001742:	f004 fcad 	bl	80060a0 <iprintf>
				break;
 8001746:	bf00      	nop
		}


	/* let's do our first read of the pin
	 * and to do that we need to incorporate the port we're going to read*/
	pinState = 0 ;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (port)
 800174e:	797b      	ldrb	r3, [r7, #5]
 8001750:	2b43      	cmp	r3, #67	; 0x43
 8001752:	d01b      	beq.n	800178c <deBounceReadPin+0x134>
 8001754:	2b43      	cmp	r3, #67	; 0x43
 8001756:	dc23      	bgt.n	80017a0 <deBounceReadPin+0x148>
 8001758:	2b41      	cmp	r3, #65	; 0x41
 800175a:	d002      	beq.n	8001762 <deBounceReadPin+0x10a>
 800175c:	2b42      	cmp	r3, #66	; 0x42
 800175e:	d00b      	beq.n	8001778 <deBounceReadPin+0x120>
 8001760:	e01e      	b.n	80017a0 <deBounceReadPin+0x148>
	{
		case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	b29b      	uxth	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176c:	f001 faf2 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001770:	4603      	mov	r3, r0
 8001772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001776:	e017      	b.n	80017a8 <deBounceReadPin+0x150>
		case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4619      	mov	r1, r3
 800177e:	4839      	ldr	r0, [pc, #228]	; (8001864 <deBounceReadPin+0x20c>)
 8001780:	f001 fae8 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001784:	4603      	mov	r3, r0
 8001786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800178a:	e00d      	b.n	80017a8 <deBounceReadPin+0x150>
		case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	b29b      	uxth	r3, r3
 8001790:	4619      	mov	r1, r3
 8001792:	4835      	ldr	r0, [pc, #212]	; (8001868 <deBounceReadPin+0x210>)
 8001794:	f001 fade 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001798:	4603      	mov	r3, r0
 800179a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800179e:	e003      	b.n	80017a8 <deBounceReadPin+0x150>
		default:
			printf( "bad gpio port name in read pin\n\r");
 80017a0:	4832      	ldr	r0, [pc, #200]	; (800186c <deBounceReadPin+0x214>)
 80017a2:	f004 fc7d 	bl	80060a0 <iprintf>
			break;
 80017a6:	bf00      	nop
	}
	/* is the GPIO pin high or low 	 */
	if(pinState == GPIO_PIN_RESET )		// if low we're looking for more 0's
 80017a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d103      	bne.n	80017b8 <deBounceReadPin+0x160>
	{
		pinStateWeAreLookingFor = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017b6:	e043      	b.n	8001840 <deBounceReadPin+0x1e8>
	}
	else
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	/* now, let's read the pin again until x stable ms have elapsed */
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 80017be:	e03f      	b.n	8001840 <deBounceReadPin+0x1e8>
	{

		switch (port)
 80017c0:	797b      	ldrb	r3, [r7, #5]
 80017c2:	2b43      	cmp	r3, #67	; 0x43
 80017c4:	d01b      	beq.n	80017fe <deBounceReadPin+0x1a6>
 80017c6:	2b43      	cmp	r3, #67	; 0x43
 80017c8:	dc23      	bgt.n	8001812 <deBounceReadPin+0x1ba>
 80017ca:	2b41      	cmp	r3, #65	; 0x41
 80017cc:	d002      	beq.n	80017d4 <deBounceReadPin+0x17c>
 80017ce:	2b42      	cmp	r3, #66	; 0x42
 80017d0:	d00b      	beq.n	80017ea <deBounceReadPin+0x192>
 80017d2:	e01e      	b.n	8001812 <deBounceReadPin+0x1ba>
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f001 fab9 	bl	8002d54 <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017e8:	e017      	b.n	800181a <deBounceReadPin+0x1c2>
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	4619      	mov	r1, r3
 80017f0:	481c      	ldr	r0, [pc, #112]	; (8001864 <deBounceReadPin+0x20c>)
 80017f2:	f001 faaf 	bl	8002d54 <HAL_GPIO_ReadPin>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017fc:	e00d      	b.n	800181a <deBounceReadPin+0x1c2>
			case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4619      	mov	r1, r3
 8001804:	4818      	ldr	r0, [pc, #96]	; (8001868 <deBounceReadPin+0x210>)
 8001806:	f001 faa5 	bl	8002d54 <HAL_GPIO_ReadPin>
 800180a:	4603      	mov	r3, r0
 800180c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001810:	e003      	b.n	800181a <deBounceReadPin+0x1c2>
			default:
				printf( "bad gpio port letter in read pin\n\r");
 8001812:	4817      	ldr	r0, [pc, #92]	; (8001870 <deBounceReadPin+0x218>)
 8001814:	f004 fc44 	bl	80060a0 <iprintf>
				break;
 8001818:	bf00      	nop
		}
		if(pinState != pinStateWeAreLookingFor)
 800181a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800181e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001822:	429a      	cmp	r2, r3
 8001824:	d00c      	beq.n	8001840 <deBounceReadPin+0x1e8>
		{
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
 8001826:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			/* reset the timeStamp as we've had a change in state			 */
			msTimeStamp = HAL_GetTick();
 8001838:	f001 f80c 	bl	8002854 <HAL_GetTick>
 800183c:	4603      	mov	r3, r0
 800183e:	623b      	str	r3, [r7, #32]
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 8001840:	f001 f808 	bl	8002854 <HAL_GetTick>
 8001844:	4601      	mov	r1, r0
 8001846:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	4413      	add	r3, r2
 800184e:	4299      	cmp	r1, r3
 8001850:	d3b6      	bcc.n	80017c0 <deBounceReadPin+0x168>
		}
	}
	return (pinStateWeAreLookingFor);
 8001852:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8001856:	4618      	mov	r0, r3
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	08009bd8 	.word	0x08009bd8
 8001864:	48000400 	.word	0x48000400
 8001868:	48000800 	.word	0x48000800
 800186c:	08009bfc 	.word	0x08009bfc
 8001870:	08009c20 	.word	0x08009c20

08001874 <keyPadInit>:
GPIO_TypeDef* ROW_PORT[5] = {GPIOA, GPIOA, GPIOA, GPIOB, GPIOB};
uint16_t ROW_PIN[5] = {GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_4, GPIO_PIN_5};



void keyPadInit(void){
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0

	deBounceInit(0,'B',0);
 8001878:	2200      	movs	r2, #0
 800187a:	2142      	movs	r1, #66	; 0x42
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff fe35 	bl	80014ec <deBounceInit>
	deBounceInit(6,'A',0);
 8001882:	2200      	movs	r2, #0
 8001884:	2141      	movs	r1, #65	; 0x41
 8001886:	2006      	movs	r0, #6
 8001888:	f7ff fe30 	bl	80014ec <deBounceInit>
	deBounceInit(14,'C',0);
 800188c:	2200      	movs	r2, #0
 800188e:	2143      	movs	r1, #67	; 0x43
 8001890:	200e      	movs	r0, #14
 8001892:	f7ff fe2b 	bl	80014ec <deBounceInit>
	deBounceInit(1,'B',0);
 8001896:	2200      	movs	r2, #0
 8001898:	2142      	movs	r1, #66	; 0x42
 800189a:	2001      	movs	r0, #1
 800189c:	f7ff fe26 	bl	80014ec <deBounceInit>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <checkFirstRow>:
 * Function :char checkFirstRow(void)
 * Description : This function detec the first row keys and return the key input
 * @param : None
 * Return : keypad
 * */
char checkFirstRow(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
    // Set all rows low
    for (int8_t row = 0; row < 5; row++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	71fb      	strb	r3, [r7, #7]
 80018ae:	e013      	b.n	80018d8 <checkFirstRow+0x34>
        HAL_GPIO_WritePin(ROW_PORT[row], ROW_PIN[row], GPIO_PIN_RESET);
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	4a35      	ldr	r2, [pc, #212]	; (800198c <checkFirstRow+0xe8>)
 80018b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	4a34      	ldr	r2, [pc, #208]	; (8001990 <checkFirstRow+0xec>)
 80018c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018c4:	2200      	movs	r2, #0
 80018c6:	4619      	mov	r1, r3
 80018c8:	f001 fa5c 	bl	8002d84 <HAL_GPIO_WritePin>
    for (int8_t row = 0; row < 5; row++) {
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3301      	adds	r3, #1
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b04      	cmp	r3, #4
 80018de:	dde7      	ble.n	80018b0 <checkFirstRow+0xc>
    }

    // Set the second row high
    HAL_GPIO_WritePin(ROW_PORT[0], ROW_PIN[0], GPIO_PIN_SET);
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <checkFirstRow+0xe8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a2a      	ldr	r2, [pc, #168]	; (8001990 <checkFirstRow+0xec>)
 80018e6:	8811      	ldrh	r1, [r2, #0]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 fa4a 	bl	8002d84 <HAL_GPIO_WritePin>


    // Check all columns

    int8_t col0=deBounceReadPin(COLUMN_PIN[0],COLUMN_PORT[0], 100);
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <checkFirstRow+0xf0>)
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	4a28      	ldr	r2, [pc, #160]	; (8001998 <checkFirstRow+0xf4>)
 80018f8:	7811      	ldrb	r1, [r2, #0]
 80018fa:	2264      	movs	r2, #100	; 0x64
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff feab 	bl	8001658 <deBounceReadPin>
 8001902:	4603      	mov	r3, r0
 8001904:	71bb      	strb	r3, [r7, #6]

    int8_t col1=deBounceReadPin(COLUMN_PIN[1],COLUMN_PORT[1], 100);
 8001906:	4b23      	ldr	r3, [pc, #140]	; (8001994 <checkFirstRow+0xf0>)
 8001908:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800190c:	4a22      	ldr	r2, [pc, #136]	; (8001998 <checkFirstRow+0xf4>)
 800190e:	7851      	ldrb	r1, [r2, #1]
 8001910:	2264      	movs	r2, #100	; 0x64
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fea0 	bl	8001658 <deBounceReadPin>
 8001918:	4603      	mov	r3, r0
 800191a:	717b      	strb	r3, [r7, #5]

    int8_t col2=deBounceReadPin(COLUMN_PIN[2],COLUMN_PORT[2], 100);
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <checkFirstRow+0xf0>)
 800191e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001922:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <checkFirstRow+0xf4>)
 8001924:	7891      	ldrb	r1, [r2, #2]
 8001926:	2264      	movs	r2, #100	; 0x64
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fe95 	bl	8001658 <deBounceReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	713b      	strb	r3, [r7, #4]

    int8_t col3=deBounceReadPin(COLUMN_PIN[3],COLUMN_PORT[3], 100);
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <checkFirstRow+0xf0>)
 8001934:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001938:	4a17      	ldr	r2, [pc, #92]	; (8001998 <checkFirstRow+0xf4>)
 800193a:	78d1      	ldrb	r1, [r2, #3]
 800193c:	2264      	movs	r2, #100	; 0x64
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fe8a 	bl	8001658 <deBounceReadPin>
 8001944:	4603      	mov	r3, r0
 8001946:	70fb      	strb	r3, [r7, #3]

    // Handle each column independently
    if (col0 == GPIO_PIN_SET) {
 8001948:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d102      	bne.n	8001956 <checkFirstRow+0xb2>
        return keypad[0][0];
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <checkFirstRow+0xf8>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	e015      	b.n	8001982 <checkFirstRow+0xde>
    }

    if (col1 == GPIO_PIN_SET) {
 8001956:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d102      	bne.n	8001964 <checkFirstRow+0xc0>
      return keypad[0][1];
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <checkFirstRow+0xf8>)
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	e00e      	b.n	8001982 <checkFirstRow+0xde>
   }

    if (col2 == GPIO_PIN_SET) {
 8001964:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d102      	bne.n	8001972 <checkFirstRow+0xce>
    	 return keypad[0][2];
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <checkFirstRow+0xf8>)
 800196e:	789b      	ldrb	r3, [r3, #2]
 8001970:	e007      	b.n	8001982 <checkFirstRow+0xde>
    }

    if (col3 == GPIO_PIN_SET) {
 8001972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d102      	bne.n	8001980 <checkFirstRow+0xdc>
    	 return keypad[0][3];
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <checkFirstRow+0xf8>)
 800197c:	78db      	ldrb	r3, [r3, #3]
 800197e:	e000      	b.n	8001982 <checkFirstRow+0xde>
    }

    return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000020 	.word	0x20000020
 8001990:	20000034 	.word	0x20000034
 8001994:	20000018 	.word	0x20000018
 8001998:	20000014 	.word	0x20000014
 800199c:	20000000 	.word	0x20000000

080019a0 <checkSecondRow>:



char checkSecondRow(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
    // Set all rows low
    for (int8_t row = 0; row < 5; row++) {
 80019a6:	2300      	movs	r3, #0
 80019a8:	71fb      	strb	r3, [r7, #7]
 80019aa:	e013      	b.n	80019d4 <checkSecondRow+0x34>
        HAL_GPIO_WritePin(ROW_PORT[row], ROW_PIN[row], GPIO_PIN_RESET);
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	4a35      	ldr	r2, [pc, #212]	; (8001a88 <checkSecondRow+0xe8>)
 80019b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	4a34      	ldr	r2, [pc, #208]	; (8001a8c <checkSecondRow+0xec>)
 80019bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019c0:	2200      	movs	r2, #0
 80019c2:	4619      	mov	r1, r3
 80019c4:	f001 f9de 	bl	8002d84 <HAL_GPIO_WritePin>
    for (int8_t row = 0; row < 5; row++) {
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	dde7      	ble.n	80019ac <checkSecondRow+0xc>
    }

    // Set the second row high
    HAL_GPIO_WritePin(ROW_PORT[1], ROW_PIN[1], GPIO_PIN_SET);
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <checkSecondRow+0xe8>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a2a      	ldr	r2, [pc, #168]	; (8001a8c <checkSecondRow+0xec>)
 80019e2:	8851      	ldrh	r1, [r2, #2]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4618      	mov	r0, r3
 80019e8:	f001 f9cc 	bl	8002d84 <HAL_GPIO_WritePin>

    int8_t col0=deBounceReadPin(COLUMN_PIN[0],COLUMN_PORT[0], 80);
 80019ec:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <checkSecondRow+0xf0>)
 80019ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f2:	4a28      	ldr	r2, [pc, #160]	; (8001a94 <checkSecondRow+0xf4>)
 80019f4:	7811      	ldrb	r1, [r2, #0]
 80019f6:	2250      	movs	r2, #80	; 0x50
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fe2d 	bl	8001658 <deBounceReadPin>
 80019fe:	4603      	mov	r3, r0
 8001a00:	71bb      	strb	r3, [r7, #6]

    int8_t col1=deBounceReadPin(COLUMN_PIN[1],COLUMN_PORT[1], 80);
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <checkSecondRow+0xf0>)
 8001a04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a08:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <checkSecondRow+0xf4>)
 8001a0a:	7851      	ldrb	r1, [r2, #1]
 8001a0c:	2250      	movs	r2, #80	; 0x50
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fe22 	bl	8001658 <deBounceReadPin>
 8001a14:	4603      	mov	r3, r0
 8001a16:	717b      	strb	r3, [r7, #5]

    int8_t col2=deBounceReadPin(COLUMN_PIN[2],COLUMN_PORT[2], 80);
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <checkSecondRow+0xf0>)
 8001a1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <checkSecondRow+0xf4>)
 8001a20:	7891      	ldrb	r1, [r2, #2]
 8001a22:	2250      	movs	r2, #80	; 0x50
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fe17 	bl	8001658 <deBounceReadPin>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	713b      	strb	r3, [r7, #4]

    int8_t col3=deBounceReadPin(COLUMN_PIN[3],COLUMN_PORT[3], 80);
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <checkSecondRow+0xf0>)
 8001a30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a34:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <checkSecondRow+0xf4>)
 8001a36:	78d1      	ldrb	r1, [r2, #3]
 8001a38:	2250      	movs	r2, #80	; 0x50
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fe0c 	bl	8001658 <deBounceReadPin>
 8001a40:	4603      	mov	r3, r0
 8001a42:	70fb      	strb	r3, [r7, #3]

    // Handle each column independently
    if (col0 == GPIO_PIN_SET) {
 8001a44:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d102      	bne.n	8001a52 <checkSecondRow+0xb2>

        return keypad[1][0];
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <checkSecondRow+0xf8>)
 8001a4e:	791b      	ldrb	r3, [r3, #4]
 8001a50:	e015      	b.n	8001a7e <checkSecondRow+0xde>
    }

    if (col1 == GPIO_PIN_SET) {
 8001a52:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d102      	bne.n	8001a60 <checkSecondRow+0xc0>

    	return keypad[1][1];
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <checkSecondRow+0xf8>)
 8001a5c:	795b      	ldrb	r3, [r3, #5]
 8001a5e:	e00e      	b.n	8001a7e <checkSecondRow+0xde>
    }

    if (col2 == GPIO_PIN_SET) {
 8001a60:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d102      	bne.n	8001a6e <checkSecondRow+0xce>

    	return keypad[1][2];
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <checkSecondRow+0xf8>)
 8001a6a:	799b      	ldrb	r3, [r3, #6]
 8001a6c:	e007      	b.n	8001a7e <checkSecondRow+0xde>
    }

    if (col3 == GPIO_PIN_SET) {
 8001a6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d102      	bne.n	8001a7c <checkSecondRow+0xdc>

    	return keypad[1][3];
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <checkSecondRow+0xf8>)
 8001a78:	79db      	ldrb	r3, [r3, #7]
 8001a7a:	e000      	b.n	8001a7e <checkSecondRow+0xde>
    }

    return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000020 	.word	0x20000020
 8001a8c:	20000034 	.word	0x20000034
 8001a90:	20000018 	.word	0x20000018
 8001a94:	20000014 	.word	0x20000014
 8001a98:	20000000 	.word	0x20000000

08001a9c <checkThirdRow>:



char checkThirdRow(void){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0


    for ( int8_t row = 0; row < 5; row++) {
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	71fb      	strb	r3, [r7, #7]
 8001aa6:	e013      	b.n	8001ad0 <checkThirdRow+0x34>
        // Set all rows high
           HAL_GPIO_WritePin(ROW_PORT[row], ROW_PIN[row], GPIO_PIN_RESET);
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	4a35      	ldr	r2, [pc, #212]	; (8001b84 <checkThirdRow+0xe8>)
 8001aae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	4a34      	ldr	r2, [pc, #208]	; (8001b88 <checkThirdRow+0xec>)
 8001ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001abc:	2200      	movs	r2, #0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f001 f960 	bl	8002d84 <HAL_GPIO_WritePin>
    for ( int8_t row = 0; row < 5; row++) {
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	71fb      	strb	r3, [r7, #7]
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	dde7      	ble.n	8001aa8 <checkThirdRow+0xc>

    }


        HAL_GPIO_WritePin(ROW_PORT[2], ROW_PIN[2], GPIO_PIN_SET);
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <checkThirdRow+0xe8>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a2a      	ldr	r2, [pc, #168]	; (8001b88 <checkThirdRow+0xec>)
 8001ade:	8891      	ldrh	r1, [r2, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 f94e 	bl	8002d84 <HAL_GPIO_WritePin>

        int8_t col0=deBounceReadPin(COLUMN_PIN[0],COLUMN_PORT[0], 80);
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <checkThirdRow+0xf0>)
 8001aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aee:	4a28      	ldr	r2, [pc, #160]	; (8001b90 <checkThirdRow+0xf4>)
 8001af0:	7811      	ldrb	r1, [r2, #0]
 8001af2:	2250      	movs	r2, #80	; 0x50
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fdaf 	bl	8001658 <deBounceReadPin>
 8001afa:	4603      	mov	r3, r0
 8001afc:	71bb      	strb	r3, [r7, #6]


        int8_t col1=deBounceReadPin(COLUMN_PIN[1],COLUMN_PORT[1], 80);
 8001afe:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <checkThirdRow+0xf0>)
 8001b00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b04:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <checkThirdRow+0xf4>)
 8001b06:	7851      	ldrb	r1, [r2, #1]
 8001b08:	2250      	movs	r2, #80	; 0x50
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fda4 	bl	8001658 <deBounceReadPin>
 8001b10:	4603      	mov	r3, r0
 8001b12:	717b      	strb	r3, [r7, #5]


        int8_t col2=deBounceReadPin(COLUMN_PIN[2],COLUMN_PORT[2], 80);
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <checkThirdRow+0xf0>)
 8001b16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b1a:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <checkThirdRow+0xf4>)
 8001b1c:	7891      	ldrb	r1, [r2, #2]
 8001b1e:	2250      	movs	r2, #80	; 0x50
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fd99 	bl	8001658 <deBounceReadPin>
 8001b26:	4603      	mov	r3, r0
 8001b28:	713b      	strb	r3, [r7, #4]


        int8_t col3=deBounceReadPin(COLUMN_PIN[3],COLUMN_PORT[3], 80);
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <checkThirdRow+0xf0>)
 8001b2c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b30:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <checkThirdRow+0xf4>)
 8001b32:	78d1      	ldrb	r1, [r2, #3]
 8001b34:	2250      	movs	r2, #80	; 0x50
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fd8e 	bl	8001658 <deBounceReadPin>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	70fb      	strb	r3, [r7, #3]

    	if (col0 == GPIO_PIN_SET){
 8001b40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d102      	bne.n	8001b4e <checkThirdRow+0xb2>

    		return keypad[2][0];
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <checkThirdRow+0xf8>)
 8001b4a:	7a1b      	ldrb	r3, [r3, #8]
 8001b4c:	e015      	b.n	8001b7a <checkThirdRow+0xde>
    		}

    	else if ( col1== GPIO_PIN_SET){
 8001b4e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <checkThirdRow+0xc0>
    		return keypad[2][1];
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <checkThirdRow+0xf8>)
 8001b58:	7a5b      	ldrb	r3, [r3, #9]
 8001b5a:	e00e      	b.n	8001b7a <checkThirdRow+0xde>
    	 }

    	else if (col2 == GPIO_PIN_SET){
 8001b5c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d102      	bne.n	8001b6a <checkThirdRow+0xce>
    		return keypad[2][2];
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <checkThirdRow+0xf8>)
 8001b66:	7a9b      	ldrb	r3, [r3, #10]
 8001b68:	e007      	b.n	8001b7a <checkThirdRow+0xde>
    	}

    	else if (col3 == GPIO_PIN_SET){
 8001b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d102      	bne.n	8001b78 <checkThirdRow+0xdc>
    		return keypad[2][3];
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <checkThirdRow+0xf8>)
 8001b74:	7adb      	ldrb	r3, [r3, #11]
 8001b76:	e000      	b.n	8001b7a <checkThirdRow+0xde>
    	}

    	else{
    		return 0;
 8001b78:	2300      	movs	r3, #0
    	}


}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000020 	.word	0x20000020
 8001b88:	20000034 	.word	0x20000034
 8001b8c:	20000018 	.word	0x20000018
 8001b90:	20000014 	.word	0x20000014
 8001b94:	20000000 	.word	0x20000000

08001b98 <checkFourthRow>:



char checkFourthRow(void){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0


    for ( int8_t row = 0; row < 5; row++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	71fb      	strb	r3, [r7, #7]
 8001ba2:	e013      	b.n	8001bcc <checkFourthRow+0x34>
        // Set all rows high
           HAL_GPIO_WritePin(ROW_PORT[row], ROW_PIN[row], GPIO_PIN_RESET);
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4a35      	ldr	r2, [pc, #212]	; (8001c80 <checkFourthRow+0xe8>)
 8001baa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	4a34      	ldr	r2, [pc, #208]	; (8001c84 <checkFourthRow+0xec>)
 8001bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f001 f8e2 	bl	8002d84 <HAL_GPIO_WritePin>
    for ( int8_t row = 0; row < 5; row++) {
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	71fb      	strb	r3, [r7, #7]
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	dde7      	ble.n	8001ba4 <checkFourthRow+0xc>

    }


        HAL_GPIO_WritePin(ROW_PORT[3], ROW_PIN[3], GPIO_PIN_SET);
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <checkFourthRow+0xe8>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4a2a      	ldr	r2, [pc, #168]	; (8001c84 <checkFourthRow+0xec>)
 8001bda:	88d1      	ldrh	r1, [r2, #6]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4618      	mov	r0, r3
 8001be0:	f001 f8d0 	bl	8002d84 <HAL_GPIO_WritePin>

        int8_t col0=deBounceReadPin(COLUMN_PIN[0],COLUMN_PORT[0], 80);
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <checkFourthRow+0xf0>)
 8001be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bea:	4a28      	ldr	r2, [pc, #160]	; (8001c8c <checkFourthRow+0xf4>)
 8001bec:	7811      	ldrb	r1, [r2, #0]
 8001bee:	2250      	movs	r2, #80	; 0x50
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fd31 	bl	8001658 <deBounceReadPin>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71bb      	strb	r3, [r7, #6]

        int8_t col1=deBounceReadPin(COLUMN_PIN[1],COLUMN_PORT[1], 80);
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <checkFourthRow+0xf0>)
 8001bfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c00:	4a22      	ldr	r2, [pc, #136]	; (8001c8c <checkFourthRow+0xf4>)
 8001c02:	7851      	ldrb	r1, [r2, #1]
 8001c04:	2250      	movs	r2, #80	; 0x50
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fd26 	bl	8001658 <deBounceReadPin>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	717b      	strb	r3, [r7, #5]

        int8_t col2=deBounceReadPin(COLUMN_PIN[2],COLUMN_PORT[2], 80);
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <checkFourthRow+0xf0>)
 8001c12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c16:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <checkFourthRow+0xf4>)
 8001c18:	7891      	ldrb	r1, [r2, #2]
 8001c1a:	2250      	movs	r2, #80	; 0x50
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fd1b 	bl	8001658 <deBounceReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	713b      	strb	r3, [r7, #4]

        int8_t col3=deBounceReadPin(COLUMN_PIN[3],COLUMN_PORT[3], 80);
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <checkFourthRow+0xf0>)
 8001c28:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c2c:	4a17      	ldr	r2, [pc, #92]	; (8001c8c <checkFourthRow+0xf4>)
 8001c2e:	78d1      	ldrb	r1, [r2, #3]
 8001c30:	2250      	movs	r2, #80	; 0x50
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fd10 	bl	8001658 <deBounceReadPin>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	70fb      	strb	r3, [r7, #3]

    	if (col0 == GPIO_PIN_SET){
 8001c3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d102      	bne.n	8001c4a <checkFourthRow+0xb2>
    		return keypad[3][0];
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <checkFourthRow+0xf8>)
 8001c46:	7b1b      	ldrb	r3, [r3, #12]
 8001c48:	e015      	b.n	8001c76 <checkFourthRow+0xde>
    		}

    	else if ( col1== GPIO_PIN_SET){
 8001c4a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d102      	bne.n	8001c58 <checkFourthRow+0xc0>
    		return keypad[3][1];
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <checkFourthRow+0xf8>)
 8001c54:	7b5b      	ldrb	r3, [r3, #13]
 8001c56:	e00e      	b.n	8001c76 <checkFourthRow+0xde>
    	 }

    	else if (col2 == GPIO_PIN_SET){
 8001c58:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d102      	bne.n	8001c66 <checkFourthRow+0xce>
    		return keypad[3][2];
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <checkFourthRow+0xf8>)
 8001c62:	7b9b      	ldrb	r3, [r3, #14]
 8001c64:	e007      	b.n	8001c76 <checkFourthRow+0xde>
    	}

    	else if (col3 == GPIO_PIN_SET){
 8001c66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d102      	bne.n	8001c74 <checkFourthRow+0xdc>
    		return keypad[3][3];
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <checkFourthRow+0xf8>)
 8001c70:	7bdb      	ldrb	r3, [r3, #15]
 8001c72:	e000      	b.n	8001c76 <checkFourthRow+0xde>
    	}

    	else{
    		return 0;
 8001c74:	2300      	movs	r3, #0
    	}


}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000020 	.word	0x20000020
 8001c84:	20000034 	.word	0x20000034
 8001c88:	20000018 	.word	0x20000018
 8001c8c:	20000014 	.word	0x20000014
 8001c90:	20000000 	.word	0x20000000

08001c94 <checkFifthRow>:


char checkFifthRow(void){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0


    for ( int8_t row = 0; row < 5; row++) {
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	71fb      	strb	r3, [r7, #7]
 8001c9e:	e013      	b.n	8001cc8 <checkFifthRow+0x34>
        // Set all rows high
           HAL_GPIO_WritePin(ROW_PORT[row], ROW_PIN[row], GPIO_PIN_RESET);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4a35      	ldr	r2, [pc, #212]	; (8001d7c <checkFifthRow+0xe8>)
 8001ca6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	4a34      	ldr	r2, [pc, #208]	; (8001d80 <checkFifthRow+0xec>)
 8001cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f001 f864 	bl	8002d84 <HAL_GPIO_WritePin>
    for ( int8_t row = 0; row < 5; row++) {
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	71fb      	strb	r3, [r7, #7]
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	dde7      	ble.n	8001ca0 <checkFifthRow+0xc>

    }


        HAL_GPIO_WritePin(ROW_PORT[4], ROW_PIN[4], GPIO_PIN_SET);
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <checkFifthRow+0xe8>)
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	4a2a      	ldr	r2, [pc, #168]	; (8001d80 <checkFifthRow+0xec>)
 8001cd6:	8911      	ldrh	r1, [r2, #8]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 f852 	bl	8002d84 <HAL_GPIO_WritePin>

        int8_t col0=deBounceReadPin(COLUMN_PIN[0],COLUMN_PORT[0], 80);
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <checkFifthRow+0xf0>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	4a28      	ldr	r2, [pc, #160]	; (8001d88 <checkFifthRow+0xf4>)
 8001ce8:	7811      	ldrb	r1, [r2, #0]
 8001cea:	2250      	movs	r2, #80	; 0x50
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fcb3 	bl	8001658 <deBounceReadPin>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71bb      	strb	r3, [r7, #6]

        int8_t col1=deBounceReadPin(COLUMN_PIN[1],COLUMN_PORT[1], 80);
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <checkFifthRow+0xf0>)
 8001cf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cfc:	4a22      	ldr	r2, [pc, #136]	; (8001d88 <checkFifthRow+0xf4>)
 8001cfe:	7851      	ldrb	r1, [r2, #1]
 8001d00:	2250      	movs	r2, #80	; 0x50
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fca8 	bl	8001658 <deBounceReadPin>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	717b      	strb	r3, [r7, #5]

        int8_t col2=deBounceReadPin(COLUMN_PIN[2],COLUMN_PORT[2], 80);
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <checkFifthRow+0xf0>)
 8001d0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d12:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <checkFifthRow+0xf4>)
 8001d14:	7891      	ldrb	r1, [r2, #2]
 8001d16:	2250      	movs	r2, #80	; 0x50
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fc9d 	bl	8001658 <deBounceReadPin>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	713b      	strb	r3, [r7, #4]

        int8_t col3=deBounceReadPin(COLUMN_PIN[3],COLUMN_PORT[3], 80);
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <checkFifthRow+0xf0>)
 8001d24:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d28:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <checkFifthRow+0xf4>)
 8001d2a:	78d1      	ldrb	r1, [r2, #3]
 8001d2c:	2250      	movs	r2, #80	; 0x50
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fc92 	bl	8001658 <deBounceReadPin>
 8001d34:	4603      	mov	r3, r0
 8001d36:	70fb      	strb	r3, [r7, #3]

    	if (col0 == GPIO_PIN_SET){
 8001d38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d102      	bne.n	8001d46 <checkFifthRow+0xb2>
    		return keypad[4][0];
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <checkFifthRow+0xf8>)
 8001d42:	7c1b      	ldrb	r3, [r3, #16]
 8001d44:	e015      	b.n	8001d72 <checkFifthRow+0xde>
    		}

    	else if ( col1== GPIO_PIN_SET){
 8001d46:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d102      	bne.n	8001d54 <checkFifthRow+0xc0>
    		return keypad[4][1];
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <checkFifthRow+0xf8>)
 8001d50:	7c5b      	ldrb	r3, [r3, #17]
 8001d52:	e00e      	b.n	8001d72 <checkFifthRow+0xde>
    	 }

    	else if (col2 == GPIO_PIN_SET){
 8001d54:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d102      	bne.n	8001d62 <checkFifthRow+0xce>
    		return keypad[4][2];
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <checkFifthRow+0xf8>)
 8001d5e:	7c9b      	ldrb	r3, [r3, #18]
 8001d60:	e007      	b.n	8001d72 <checkFifthRow+0xde>
    	}

    	else if (col3 == GPIO_PIN_SET){
 8001d62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <checkFifthRow+0xdc>
    		return keypad[4][3];
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <checkFifthRow+0xf8>)
 8001d6c:	7cdb      	ldrb	r3, [r3, #19]
 8001d6e:	e000      	b.n	8001d72 <checkFifthRow+0xde>
    	}

    	else{
    		return 0;
 8001d70:	2300      	movs	r3, #0
    	}


}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000020 	.word	0x20000020
 8001d80:	20000034 	.word	0x20000034
 8001d84:	20000018 	.word	0x20000018
 8001d88:	20000014 	.word	0x20000014
 8001d8c:	20000000 	.word	0x20000000

08001d90 <detectKeyPressed>:
	 * Function :char detectKeyPressed(void)
	 * Description : This function detect the whole keypad by integrating all rows functions
	 * @param : None
	 * Return : char  key
	 * */
	char detectKeyPressed(void) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
	    char key = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	71fb      	strb	r3, [r7, #7]

	    // Check the first row
	    key = checkFirstRow();
 8001d9a:	f7ff fd83 	bl	80018a4 <checkFirstRow>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]

	    if (key) {
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <detectKeyPressed+0x1c>
	        return key;
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	e024      	b.n	8001df6 <detectKeyPressed+0x66>
	    }

	    // Check the second row
	    key = checkSecondRow();
 8001dac:	f7ff fdf8 	bl	80019a0 <checkSecondRow>
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
	    if (key ) {
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <detectKeyPressed+0x2e>
	        return key;
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	e01b      	b.n	8001df6 <detectKeyPressed+0x66>
	    }

	    // Check the third row
	    key = checkThirdRow();
 8001dbe:	f7ff fe6d 	bl	8001a9c <checkThirdRow>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
	    if (key) {
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <detectKeyPressed+0x40>
	        return key;
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	e012      	b.n	8001df6 <detectKeyPressed+0x66>
	    }

	    // Check the fourth row
	    key = checkFourthRow();
 8001dd0:	f7ff fee2 	bl	8001b98 <checkFourthRow>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
	    if (key ) {
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <detectKeyPressed+0x52>
	        return key;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	e009      	b.n	8001df6 <detectKeyPressed+0x66>
	    }

	    // Check the fifth row
	    key = checkFifthRow();
 8001de2:	f7ff ff57 	bl	8001c94 <checkFifthRow>
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
	    if (key) {
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <detectKeyPressed+0x64>
	        return key;
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	e000      	b.n	8001df6 <detectKeyPressed+0x66>
	    }

	    // Return 0 if no key is pressed
	    return 0;
 8001df4:	2300      	movs	r3, #0

	}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <show2Strings>:
 * Description : This function display the two strings in two different positions
 * @param : str1, str2
 * Return : None
 * */

void show2Strings(char* str1,char* str2) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
	HD44780_GotoXY(0, 0);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff fa80 	bl	8001310 <HD44780_GotoXY>
	HD44780_PutStr(str1);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff fab7 	bl	8001384 <HD44780_PutStr>
	HD44780_GotoXY(0, 1);
 8001e16:	2101      	movs	r1, #1
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff fa79 	bl	8001310 <HD44780_GotoXY>
	HD44780_PutStr(str2);
 8001e1e:	6838      	ldr	r0, [r7, #0]
 8001e20:	f7ff fab0 	bl	8001384 <HD44780_PutStr>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <msDelay>:

void msDelay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f000 fd0e 	bl	8002854 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d005      	beq.n	8001e52 <msDelay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <msDelay+0x44>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e52:	bf00      	nop
 8001e54:	f000 fcfe 	bl	8002854 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d8f7      	bhi.n	8001e54 <msDelay+0x28>
  {
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000048 	.word	0x20000048

08001e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e74:	b5b0      	push	{r4, r5, r7, lr}
 8001e76:	b098      	sub	sp, #96	; 0x60
 8001e78:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	//static uint8_t count = 0;
	//Dialog1.stringName = {"Hi","How are You?","I'm good" ,"Thank you!","Have a good day",":-)","You too!","See you Soon","See ya :-)","Bye"};

	char *string[8] = {"Hello All","I'm Arkar","I'm working on","a simple LCD","Calculator","Project","Thank you!",":-)"};
 8001e7a:	4bc9      	ldr	r3, [pc, #804]	; (80021a0 <main+0x32c>)
 8001e7c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001e80:	461d      	mov	r5, r3
 8001e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e8e:	f000 fc78 	bl	8002782 <HAL_Init>

  /* USER CODE BEGIN Init */
  keyPadInit();
 8001e92:	f7ff fcef 	bl	8001874 <keyPadInit>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e96:	f000 f9a9 	bl	80021ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e9a:	f000 fa39 	bl	8002310 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e9e:	f000 fa07 	bl	80022b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(); //initialize LCD Display
 8001ea2:	f7ff f9bf 	bl	8001224 <HD44780_Init>
	  //HAL_UART_Receive(&huart2, pData, Size, Timeout)
#endif

	  static uint8_t numCount =0;
	  char key;
	  char inputBuffer[16] ={0};
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	f107 0318 	add.w	r3, r7, #24
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
	  char outputBuffer[16] ={0};
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	f107 0308 	add.w	r3, r7, #8
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
	  uint8_t input_index =0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  float num1,num2,result;



	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed2:	f000 ff3f 	bl	8002d54 <HAL_GPIO_ReadPin>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0e4      	beq.n	8001ea6 <main+0x32>

		  //This loop print out the greeting message
			  for (int8_t i=0 ; i<sizeof(string)/sizeof(string[0]) ;i++){
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8001ee2:	e034      	b.n	8001f4e <main+0xda>

			  	  HAL_GPIO_WritePin(GPIOB/*On-board led port*/, LD3_Pin/*it's PB3*/, GPIO_PIN_SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2108      	movs	r1, #8
 8001ee8:	48ae      	ldr	r0, [pc, #696]	; (80021a4 <main+0x330>)
 8001eea:	f000 ff4b 	bl	8002d84 <HAL_GPIO_WritePin>
			  	  HD44780_ClrScr(); //Clear LCD screen
 8001eee:	f7ff fa64 	bl	80013ba <HD44780_ClrScr>
			  	  show2Strings(string[i], string[i+1]);
 8001ef2:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3358      	adds	r3, #88	; 0x58
 8001efa:	443b      	add	r3, r7
 8001efc:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8001f00:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8001f04:	3301      	adds	r3, #1
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	3358      	adds	r3, #88	; 0x58
 8001f0a:	443b      	add	r3, r7
 8001f0c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001f10:	4619      	mov	r1, r3
 8001f12:	4610      	mov	r0, r2
 8001f14:	f7ff ff73 	bl	8001dfe <show2Strings>

			  	  i++;
 8001f18:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			  	  msDelay(1000);
 8001f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f2a:	f7ff ff7f 	bl	8001e2c <msDelay>
			  	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2108      	movs	r1, #8
 8001f32:	489c      	ldr	r0, [pc, #624]	; (80021a4 <main+0x330>)
 8001f34:	f000 ff26 	bl	8002d84 <HAL_GPIO_WritePin>
			  	  HAL_Delay(1000);
 8001f38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f3c:	f000 fc96 	bl	800286c <HAL_Delay>
			  for (int8_t i=0 ; i<sizeof(string)/sizeof(string[0]) ;i++){
 8001f40:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8001f4e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001f52:	2b07      	cmp	r3, #7
 8001f54:	d9c6      	bls.n	8001ee4 <main+0x70>

			  }

			  HD44780_ClrScr();// clear the greeting screen
 8001f56:	f7ff fa30 	bl	80013ba <HD44780_ClrScr>

			  //This loop for the calculation
			  do {
				  if(numCount ==0){
 8001f5a:	4b93      	ldr	r3, [pc, #588]	; (80021a8 <main+0x334>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d108      	bne.n	8001f74 <main+0x100>
					  HD44780_PutStr("Num1:");
 8001f62:	4892      	ldr	r0, [pc, #584]	; (80021ac <main+0x338>)
 8001f64:	f7ff fa0e 	bl	8001384 <HD44780_PutStr>
					  numCount++;
 8001f68:	4b8f      	ldr	r3, [pc, #572]	; (80021a8 <main+0x334>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	4b8d      	ldr	r3, [pc, #564]	; (80021a8 <main+0x334>)
 8001f72:	701a      	strb	r2, [r3, #0]
				  }


				  key = detectKeyPressed();//read the keypad input
 8001f74:	f7ff ff0c 	bl	8001d90 <detectKeyPressed>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

				  	  if (key !='\0'){
 8001f7e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d04a      	beq.n	800201c <main+0x1a8>
				  		  //check if Enter Key
				  		  if (key == 'E'){
 8001f86:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001f8a:	2b45      	cmp	r3, #69	; 0x45
 8001f8c:	d11f      	bne.n	8001fce <main+0x15a>
				  			  numCount++;
 8001f8e:	4b86      	ldr	r3, [pc, #536]	; (80021a8 <main+0x334>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b84      	ldr	r3, [pc, #528]	; (80021a8 <main+0x334>)
 8001f98:	701a      	strb	r2, [r3, #0]
				  			  num1 =atof(inputBuffer);//convert back char to integer
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f002 fd3b 	bl	8004a1a <atof>
 8001fa4:	ec53 2b10 	vmov	r2, r3, d0
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	f7fe fe1c 	bl	8000be8 <__aeabi_d2f>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	653b      	str	r3, [r7, #80]	; 0x50
				  			  memset(inputBuffer,0,sizeof(inputBuffer));//clear the buffer
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2210      	movs	r2, #16
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 f8f8 	bl	80061b2 <memset>
				  			  input_index =0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				  			  HD44780_ClrScr();
 8001fc8:	f7ff f9f7 	bl	80013ba <HD44780_ClrScr>
 8001fcc:	e026      	b.n	800201c <main+0x1a8>

				  		  }
				  		  //handle the wrong input and press Esc to clear the buffer
				  		  else if(key == 'X'){
 8001fce:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001fd2:	2b58      	cmp	r3, #88	; 0x58
 8001fd4:	d10f      	bne.n	8001ff6 <main+0x182>
				  			HD44780_ClrScr();
 8001fd6:	f7ff f9f0 	bl	80013ba <HD44780_ClrScr>
				  			memset(inputBuffer,0,sizeof(inputBuffer));
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	2210      	movs	r2, #16
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 f8e5 	bl	80061b2 <memset>
				  			input_index =0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				  			numCount=0;
 8001fee:	4b6e      	ldr	r3, [pc, #440]	; (80021a8 <main+0x334>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	e012      	b.n	800201c <main+0x1a8>
				  		  }
				  		  //accept the rest of the key input
				  		  else{
						  	  	HD44780_PutChar(key);
 8001ff6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff f97a 	bl	80012f4 <HD44780_PutChar>
						  	  	inputBuffer[input_index++]=key;
 8002000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 800200a:	3358      	adds	r3, #88	; 0x58
 800200c:	443b      	add	r3, r7
 800200e:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8002012:	f803 2c44 	strb.w	r2, [r3, #-68]
						  		HAL_Delay(30);
 8002016:	201e      	movs	r0, #30
 8002018:	f000 fc28 	bl	800286c <HAL_Delay>
				  	  }
				  	  /*This condition store the input in the buffer and
				  	   * change to int type and store in num2
				  	   * */

				  	  if(numCount == 2){
 800201c:	4b62      	ldr	r3, [pc, #392]	; (80021a8 <main+0x334>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d15d      	bne.n	80020e0 <main+0x26c>

							HD44780_PutStr("Num2:");
 8002024:	4862      	ldr	r0, [pc, #392]	; (80021b0 <main+0x33c>)
 8002026:	f7ff f9ad 	bl	8001384 <HD44780_PutStr>
							while(1){

								key = detectKeyPressed();
 800202a:	f7ff feb1 	bl	8001d90 <detectKeyPressed>
 800202e:	4603      	mov	r3, r0
 8002030:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
								 if(key !=0 && key !='E' && key !='X')
 8002034:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01b      	beq.n	8002074 <main+0x200>
 800203c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002040:	2b45      	cmp	r3, #69	; 0x45
 8002042:	d017      	beq.n	8002074 <main+0x200>
 8002044:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002048:	2b58      	cmp	r3, #88	; 0x58
 800204a:	d013      	beq.n	8002074 <main+0x200>
								  {
									  HD44780_PutChar(key);
 800204c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff f94f 	bl	80012f4 <HD44780_PutChar>
									  inputBuffer[input_index++]=key;
 8002056:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 8002060:	3358      	adds	r3, #88	; 0x58
 8002062:	443b      	add	r3, r7
 8002064:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8002068:	f803 2c44 	strb.w	r2, [r3, #-68]
									  HAL_Delay(30);
 800206c:	201e      	movs	r0, #30
 800206e:	f000 fbfd 	bl	800286c <HAL_Delay>
 8002072:	e034      	b.n	80020de <main+0x26a>
								  }
								 /*handle to clear the buffer if press Esc button
								  * in case if we press the wrong input */
							  	else if(key == 'X'){
 8002074:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002078:	2b58      	cmp	r3, #88	; 0x58
 800207a:	d10c      	bne.n	8002096 <main+0x222>
							  			HD44780_ClrScr();
 800207c:	f7ff f99d 	bl	80013ba <HD44780_ClrScr>
							  			memset(inputBuffer,0,sizeof(inputBuffer));
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2210      	movs	r2, #16
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f004 f892 	bl	80061b2 <memset>
							  			input_index =0;
 800208e:	2300      	movs	r3, #0
 8002090:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							  			break;
 8002094:	e024      	b.n	80020e0 <main+0x26c>
							  		  }

								 //check if Enter Key and register the number to num2
								 else if (key == 'E'){
 8002096:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800209a:	2b45      	cmp	r3, #69	; 0x45
 800209c:	d1c5      	bne.n	800202a <main+0x1b6>
									 numCount++;
 800209e:	4b42      	ldr	r3, [pc, #264]	; (80021a8 <main+0x334>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	3301      	adds	r3, #1
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <main+0x334>)
 80020a8:	701a      	strb	r2, [r3, #0]
						  			  num2 =atof(inputBuffer);
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 fcb3 	bl	8004a1a <atof>
 80020b4:	ec53 2b10 	vmov	r2, r3, d0
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	f7fe fd94 	bl	8000be8 <__aeabi_d2f>
 80020c0:	4603      	mov	r3, r0
 80020c2:	64fb      	str	r3, [r7, #76]	; 0x4c
						  			  memset(inputBuffer,0,sizeof(inputBuffer));
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	2210      	movs	r2, #16
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f004 f870 	bl	80061b2 <memset>
						  			  input_index =0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						  			  HD44780_ClrScr();
 80020d8:	f7ff f96f 	bl	80013ba <HD44780_ClrScr>
									  break;
 80020dc:	e000      	b.n	80020e0 <main+0x26c>
								key = detectKeyPressed();
 80020de:	e7a4      	b.n	800202a <main+0x1b6>

				  	  /*This condition take the operator character and do the calculation
				  	   * of the two inputs And print on LCD and allows user to clear the screen
				  	   * if the input is wrong
				  	   * */
				  	  if(numCount ==3){
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <main+0x334>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	f47f af38 	bne.w	8001f5a <main+0xe6>
							HD44780_PutStr("Operator:");
 80020ea:	4832      	ldr	r0, [pc, #200]	; (80021b4 <main+0x340>)
 80020ec:	f7ff f94a 	bl	8001384 <HD44780_PutStr>
							while(1){

								key = detectKeyPressed();
 80020f0:	f7ff fe4e 	bl	8001d90 <detectKeyPressed>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
								 if(key !=0 && key !='E' && key !='X')
 80020fa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d06a      	beq.n	80021d8 <main+0x364>
 8002102:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002106:	2b45      	cmp	r3, #69	; 0x45
 8002108:	d066      	beq.n	80021d8 <main+0x364>
 800210a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800210e:	2b58      	cmp	r3, #88	; 0x58
 8002110:	d062      	beq.n	80021d8 <main+0x364>
								  {
									if (key=='+' || key=='-' || key== '*' || key =='/' || key=='^'){
 8002112:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002116:	2b2b      	cmp	r3, #43	; 0x2b
 8002118:	d00f      	beq.n	800213a <main+0x2c6>
 800211a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800211e:	2b2d      	cmp	r3, #45	; 0x2d
 8002120:	d00b      	beq.n	800213a <main+0x2c6>
 8002122:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002126:	2b2a      	cmp	r3, #42	; 0x2a
 8002128:	d007      	beq.n	800213a <main+0x2c6>
 800212a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800212e:	2b2f      	cmp	r3, #47	; 0x2f
 8002130:	d003      	beq.n	800213a <main+0x2c6>
 8002132:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002136:	2b5e      	cmp	r3, #94	; 0x5e
 8002138:	d140      	bne.n	80021bc <main+0x348>
									HD44780_PutChar(key);
 800213a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f8d8 	bl	80012f4 <HD44780_PutChar>
									result= calculate(num1, num2,key);
 8002144:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002148:	4618      	mov	r0, r3
 800214a:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 800214e:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002152:	f7ff f939 	bl	80013c8 <calculate>
 8002156:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
									snprintf(outputBuffer,sizeof(outputBuffer)," %0.3f",result);
 800215a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800215c:	f7fe f9f4 	bl	8000548 <__aeabi_f2d>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	1d38      	adds	r0, r7, #4
 8002166:	e9cd 2300 	strd	r2, r3, [sp]
 800216a:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <main+0x344>)
 800216c:	2110      	movs	r1, #16
 800216e:	f003 ffa9 	bl	80060c4 <sniprintf>
									HD44780_GotoXY(0,1);
 8002172:	2101      	movs	r1, #1
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff f8cb 	bl	8001310 <HD44780_GotoXY>
									HD44780_PutStr(outputBuffer);
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff f901 	bl	8001384 <HD44780_PutStr>
									HAL_Delay(3000);
 8002182:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002186:	f000 fb71 	bl	800286c <HAL_Delay>
									//HD44780_ClrScr();
									memset(outputBuffer,0,sizeof(outputBuffer));
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	2210      	movs	r2, #16
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f004 f80e 	bl	80061b2 <memset>
									numCount =0;
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <main+0x334>)
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
									if (key=='+' || key=='-' || key== '*' || key =='/' || key=='^'){
 800219c:	e023      	b.n	80021e6 <main+0x372>
 800219e:	bf00      	nop
 80021a0:	08009cc4 	.word	0x08009cc4
 80021a4:	48000400 	.word	0x48000400
 80021a8:	200002cc 	.word	0x200002cc
 80021ac:	08009c44 	.word	0x08009c44
 80021b0:	08009c4c 	.word	0x08009c4c
 80021b4:	08009c54 	.word	0x08009c54
 80021b8:	08009c60 	.word	0x08009c60
									 * For operator inputs other than +,-,*,/,^ keys are pressed ,
									 * it display the error
									 * message*/

									else{
										HD44780_ClrScr();
 80021bc:	f7ff f8fd 	bl	80013ba <HD44780_ClrScr>
										result= calculate(num1, num2,key);
 80021c0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80021c4:	4618      	mov	r0, r3
 80021c6:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 80021ca:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80021ce:	f7ff f8fb 	bl	80013c8 <calculate>
 80021d2:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
										break;
 80021d6:	e007      	b.n	80021e8 <main+0x374>


								  }

								 //clear the screen after display the result
								 else if(key == 'X'){
 80021d8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80021dc:	2b58      	cmp	r3, #88	; 0x58
 80021de:	d187      	bne.n	80020f0 <main+0x27c>
										HD44780_ClrScr();
 80021e0:	f7ff f8eb 	bl	80013ba <HD44780_ClrScr>
										break;
 80021e4:	e000      	b.n	80021e8 <main+0x374>
								key = detectKeyPressed();
 80021e6:	e783      	b.n	80020f0 <main+0x27c>
				  if(numCount ==0){
 80021e8:	e6b7      	b.n	8001f5a <main+0xe6>
 80021ea:	bf00      	nop

080021ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b096      	sub	sp, #88	; 0x58
 80021f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	2244      	movs	r2, #68	; 0x44
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f003 ffd9 	bl	80061b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002200:	463b      	mov	r3, r7
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800220e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002212:	f000 fded 	bl	8002df0 <HAL_PWREx_ControlVoltageScaling>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800221c:	f000 f8f2 	bl	8002404 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002220:	f000 fdc8 	bl	8002db4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <SystemClock_Config+0xc0>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	4a20      	ldr	r2, [pc, #128]	; (80022ac <SystemClock_Config+0xc0>)
 800222c:	f023 0318 	bic.w	r3, r3, #24
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002234:	2314      	movs	r3, #20
 8002236:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002238:	2301      	movs	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800223c:	2301      	movs	r3, #1
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002244:	2360      	movs	r3, #96	; 0x60
 8002246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002248:	2302      	movs	r3, #2
 800224a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800224c:	2301      	movs	r3, #1
 800224e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002250:	2301      	movs	r3, #1
 8002252:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002254:	2310      	movs	r3, #16
 8002256:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002258:	2307      	movs	r3, #7
 800225a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800225c:	2302      	movs	r3, #2
 800225e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002260:	2302      	movs	r3, #2
 8002262:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fe17 	bl	8002e9c <HAL_RCC_OscConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002274:	f000 f8c6 	bl	8002404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002278:	230f      	movs	r3, #15
 800227a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800227c:	2303      	movs	r3, #3
 800227e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800228c:	463b      	mov	r3, r7
 800228e:	2101      	movs	r1, #1
 8002290:	4618      	mov	r0, r3
 8002292:	f001 fa17 	bl	80036c4 <HAL_RCC_ClockConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800229c:	f000 f8b2 	bl	8002404 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80022a0:	f001 fe2a 	bl	8003ef8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80022a4:	bf00      	nop
 80022a6:	3758      	adds	r7, #88	; 0x58
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000

080022b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022b6:	4a15      	ldr	r2, [pc, #84]	; (800230c <MX_USART2_UART_Init+0x5c>)
 80022b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022d6:	220c      	movs	r2, #12
 80022d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <MX_USART2_UART_Init+0x58>)
 80022f4:	f001 ff02 	bl	80040fc <HAL_UART_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022fe:	f000 f881 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000244 	.word	0x20000244
 800230c:	40004400 	.word	0x40004400

08002310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
 8002324:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002326:	4b35      	ldr	r3, [pc, #212]	; (80023fc <MX_GPIO_Init+0xec>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	4a34      	ldr	r2, [pc, #208]	; (80023fc <MX_GPIO_Init+0xec>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002332:	4b32      	ldr	r3, [pc, #200]	; (80023fc <MX_GPIO_Init+0xec>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	4b2f      	ldr	r3, [pc, #188]	; (80023fc <MX_GPIO_Init+0xec>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	4a2e      	ldr	r2, [pc, #184]	; (80023fc <MX_GPIO_Init+0xec>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <MX_GPIO_Init+0xec>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002356:	4b29      	ldr	r3, [pc, #164]	; (80023fc <MX_GPIO_Init+0xec>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	4a28      	ldr	r2, [pc, #160]	; (80023fc <MX_GPIO_Init+0xec>)
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <MX_GPIO_Init+0xec>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|ROW1_OUTPUT_Pin|ROW2_OUTPUT_Pin|ROW3_OUTPUT_Pin
 800236e:	2200      	movs	r2, #0
 8002370:	f641 71ba 	movw	r1, #8122	; 0x1fba
 8002374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002378:	f000 fd04 	bl	8002d84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|ROW4_OUPUT_Pin|ROW5_OUTPUT_Pin, GPIO_PIN_RESET);
 800237c:	2200      	movs	r2, #0
 800237e:	2138      	movs	r1, #56	; 0x38
 8002380:	481f      	ldr	r0, [pc, #124]	; (8002400 <MX_GPIO_Init+0xf0>)
 8002382:	f000 fcff 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 ROW1_OUTPUT_Pin ROW2_OUTPUT_Pin ROW3_OUTPUT_Pin
                           PA7 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|ROW1_OUTPUT_Pin|ROW2_OUTPUT_Pin|ROW3_OUTPUT_Pin
 8002386:	f641 73ba 	movw	r3, #8122	; 0x1fba
 800238a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238c:	2301      	movs	r3, #1
 800238e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002398:	f107 030c 	add.w	r3, r7, #12
 800239c:	4619      	mov	r1, r3
 800239e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a2:	f000 fb6d 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023a6:	2340      	movs	r3, #64	; 0x40
 80023a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023ae:	2302      	movs	r3, #2
 80023b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	4619      	mov	r1, r3
 80023b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023bc:	f000 fb60 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_INPUT_Pin COL4_INPUT_Pin COL3_INPUT_Pin COL2_INPUT_Pin */
  GPIO_InitStruct.Pin = COL1_INPUT_Pin|COL4_INPUT_Pin|COL3_INPUT_Pin|COL2_INPUT_Pin;
 80023c0:	23c3      	movs	r3, #195	; 0xc3
 80023c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023c8:	2302      	movs	r3, #2
 80023ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	4619      	mov	r1, r3
 80023d2:	480b      	ldr	r0, [pc, #44]	; (8002400 <MX_GPIO_Init+0xf0>)
 80023d4:	f000 fb54 	bl	8002a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin ROW4_OUPUT_Pin ROW5_OUTPUT_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|ROW4_OUPUT_Pin|ROW5_OUTPUT_Pin;
 80023d8:	2338      	movs	r3, #56	; 0x38
 80023da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023dc:	2301      	movs	r3, #1
 80023de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	4619      	mov	r1, r3
 80023ee:	4804      	ldr	r0, [pc, #16]	; (8002400 <MX_GPIO_Init+0xf0>)
 80023f0:	f000 fb46 	bl	8002a80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023f4:	bf00      	nop
 80023f6:	3720      	adds	r7, #32
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	48000400 	.word	0x48000400

08002404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002408:	b672      	cpsid	i
}
 800240a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800240c:	e7fe      	b.n	800240c <Error_Handler+0x8>
	...

08002410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_MspInit+0x44>)
 8002418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241a:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <HAL_MspInit+0x44>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6613      	str	r3, [r2, #96]	; 0x60
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <HAL_MspInit+0x44>)
 8002424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_MspInit+0x44>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	4a08      	ldr	r2, [pc, #32]	; (8002454 <HAL_MspInit+0x44>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002438:	6593      	str	r3, [r2, #88]	; 0x58
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_MspInit+0x44>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000

08002458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b09e      	sub	sp, #120	; 0x78
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	2254      	movs	r2, #84	; 0x54
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f003 fe9a 	bl	80061b2 <memset>
  if(huart->Instance==USART2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a28      	ldr	r2, [pc, #160]	; (8002524 <HAL_UART_MspInit+0xcc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d148      	bne.n	800251a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002488:	2302      	movs	r3, #2
 800248a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800248c:	2300      	movs	r3, #0
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	4618      	mov	r0, r3
 8002496:	f001 fb39 	bl	8003b0c <HAL_RCCEx_PeriphCLKConfig>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024a0:	f7ff ffb0 	bl	8002404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_UART_MspInit+0xd0>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <HAL_UART_MspInit+0xd0>)
 80024aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ae:	6593      	str	r3, [r2, #88]	; 0x58
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <HAL_UART_MspInit+0xd0>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024bc:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <HAL_UART_MspInit+0xd0>)
 80024be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c0:	4a19      	ldr	r2, [pc, #100]	; (8002528 <HAL_UART_MspInit+0xd0>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c8:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_UART_MspInit+0xd0>)
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80024d4:	2304      	movs	r3, #4
 80024d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e0:	2303      	movs	r3, #3
 80024e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024e4:	2307      	movs	r3, #7
 80024e6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80024e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024ec:	4619      	mov	r1, r3
 80024ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f2:	f000 fac5 	bl	8002a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80024f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002508:	2303      	movs	r3, #3
 800250a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800250c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002510:	4619      	mov	r1, r3
 8002512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002516:	f000 fab3 	bl	8002a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800251a:	bf00      	nop
 800251c:	3778      	adds	r7, #120	; 0x78
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40004400 	.word	0x40004400
 8002528:	40021000 	.word	0x40021000

0800252c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <NMI_Handler+0x4>

08002532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002536:	e7fe      	b.n	8002536 <HardFault_Handler+0x4>

08002538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800253c:	e7fe      	b.n	800253c <MemManage_Handler+0x4>

0800253e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002542:	e7fe      	b.n	8002542 <BusFault_Handler+0x4>

08002544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <UsageFault_Handler+0x4>

0800254a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002578:	f000 f958 	bl	800282c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}

08002580 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return 1;
 8002584:	2301      	movs	r3, #1
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_kill>:

int _kill(int pid, int sig)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800259a:	f003 fe6f 	bl	800627c <__errno>
 800259e:	4603      	mov	r3, r0
 80025a0:	2216      	movs	r2, #22
 80025a2:	601a      	str	r2, [r3, #0]
  return -1;
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_exit>:

void _exit (int status)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ffe7 	bl	8002590 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025c2:	e7fe      	b.n	80025c2 <_exit+0x12>

080025c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	e00a      	b.n	80025ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025d6:	f3af 8000 	nop.w
 80025da:	4601      	mov	r1, r0
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	60ba      	str	r2, [r7, #8]
 80025e2:	b2ca      	uxtb	r2, r1
 80025e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	dbf0      	blt.n	80025d6 <_read+0x12>
  }

  return len;
 80025f4:	687b      	ldr	r3, [r7, #4]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	e009      	b.n	8002624 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	60ba      	str	r2, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	dbf1      	blt.n	8002610 <_write+0x12>
  }
  return len;
 800262c:	687b      	ldr	r3, [r7, #4]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_close>:

int _close(int file)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800265e:	605a      	str	r2, [r3, #4]
  return 0;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_isatty>:

int _isatty(int file)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <_sbrk+0x5c>)
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <_sbrk+0x60>)
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <_sbrk+0x64>)
 80026be:	4a12      	ldr	r2, [pc, #72]	; (8002708 <_sbrk+0x68>)
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d207      	bcs.n	80026e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d0:	f003 fdd4 	bl	800627c <__errno>
 80026d4:	4603      	mov	r3, r0
 80026d6:	220c      	movs	r2, #12
 80026d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e009      	b.n	80026f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <_sbrk+0x64>)
 80026f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20010000 	.word	0x20010000
 8002700:	00000400 	.word	0x00000400
 8002704:	200002d0 	.word	0x200002d0
 8002708:	20000428 	.word	0x20000428

0800270c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <SystemInit+0x20>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <SystemInit+0x20>)
 8002718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800271c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002768 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002734:	f7ff ffea 	bl	800270c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002738:	480c      	ldr	r0, [pc, #48]	; (800276c <LoopForever+0x6>)
  ldr r1, =_edata
 800273a:	490d      	ldr	r1, [pc, #52]	; (8002770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <LoopForever+0xe>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002740:	e002      	b.n	8002748 <LoopCopyDataInit>

08002742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002746:	3304      	adds	r3, #4

08002748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800274c:	d3f9      	bcc.n	8002742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002750:	4c0a      	ldr	r4, [pc, #40]	; (800277c <LoopForever+0x16>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002754:	e001      	b.n	800275a <LoopFillZerobss>

08002756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002758:	3204      	adds	r2, #4

0800275a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800275c:	d3fb      	bcc.n	8002756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800275e:	f003 fd93 	bl	8006288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002762:	f7ff fb87 	bl	8001e74 <main>

08002766 <LoopForever>:

LoopForever:
    b LoopForever
 8002766:	e7fe      	b.n	8002766 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002768:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800276c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002770:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8002774:	0800a198 	.word	0x0800a198
  ldr r2, =_sbss
 8002778:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 800277c:	20000424 	.word	0x20000424

08002780 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002780:	e7fe      	b.n	8002780 <ADC1_IRQHandler>

08002782 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800278c:	2003      	movs	r0, #3
 800278e:	f000 f943 	bl	8002a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002792:	2000      	movs	r0, #0
 8002794:	f000 f80e 	bl	80027b4 <HAL_InitTick>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	71fb      	strb	r3, [r7, #7]
 80027a2:	e001      	b.n	80027a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027a4:	f7ff fe34 	bl	8002410 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027a8:	79fb      	ldrb	r3, [r7, #7]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <HAL_InitTick+0x6c>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d023      	beq.n	8002810 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <HAL_InitTick+0x70>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HAL_InitTick+0x6c>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4619      	mov	r1, r3
 80027d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f941 	bl	8002a66 <HAL_SYSTICK_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10f      	bne.n	800280a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b0f      	cmp	r3, #15
 80027ee:	d809      	bhi.n	8002804 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f0:	2200      	movs	r2, #0
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	f000 f919 	bl	8002a2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_InitTick+0x74>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e007      	b.n	8002814 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
 8002808:	e004      	b.n	8002814 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e001      	b.n	8002814 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000048 	.word	0x20000048
 8002824:	20000040 	.word	0x20000040
 8002828:	20000044 	.word	0x20000044

0800282c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_IncTick+0x20>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_IncTick+0x24>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4413      	add	r3, r2
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_IncTick+0x24>)
 800283e:	6013      	str	r3, [r2, #0]
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000048 	.word	0x20000048
 8002850:	200002d4 	.word	0x200002d4

08002854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return uwTick;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_GetTick+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	200002d4 	.word	0x200002d4

0800286c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002874:	f7ff ffee 	bl	8002854 <HAL_GetTick>
 8002878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d005      	beq.n	8002892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_Delay+0x44>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002892:	bf00      	nop
 8002894:	f7ff ffde 	bl	8002854 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d8f7      	bhi.n	8002894 <HAL_Delay+0x28>
  {
  }
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000048 	.word	0x20000048

080028b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <__NVIC_GetPriorityGrouping+0x18>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 0307 	and.w	r3, r3, #7
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	; (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	; (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	; 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf28      	it	cs
 800298a:	2304      	movcs	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3304      	adds	r3, #4
 8002992:	2b06      	cmp	r3, #6
 8002994:	d902      	bls.n	800299c <NVIC_EncodePriority+0x30>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3b03      	subs	r3, #3
 800299a:	e000      	b.n	800299e <NVIC_EncodePriority+0x32>
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43d9      	mvns	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	4313      	orrs	r3, r2
         );
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e4:	d301      	bcc.n	80029ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00f      	b.n	8002a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ea:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <SysTick_Config+0x40>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f2:	210f      	movs	r1, #15
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f7ff ff8e 	bl	8002918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <SysTick_Config+0x40>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <SysTick_Config+0x40>)
 8002a04:	2207      	movs	r2, #7
 8002a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000e010 	.word	0xe000e010

08002a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff47 	bl	80028b4 <__NVIC_SetPriorityGrouping>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a40:	f7ff ff5c 	bl	80028fc <__NVIC_GetPriorityGrouping>
 8002a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	6978      	ldr	r0, [r7, #20]
 8002a4c:	f7ff ff8e 	bl	800296c <NVIC_EncodePriority>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff5d 	bl	8002918 <__NVIC_SetPriority>
}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ffb0 	bl	80029d4 <SysTick_Config>
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8e:	e148      	b.n	8002d22 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2101      	movs	r1, #1
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 813a 	beq.w	8002d1c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d005      	beq.n	8002ac0 <HAL_GPIO_Init+0x40>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d130      	bne.n	8002b22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002af6:	2201      	movs	r2, #1
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	f003 0201 	and.w	r2, r3, #1
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d017      	beq.n	8002b5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d123      	bne.n	8002bb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	08da      	lsrs	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3208      	adds	r2, #8
 8002b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	220f      	movs	r2, #15
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	08da      	lsrs	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3208      	adds	r2, #8
 8002bac:	6939      	ldr	r1, [r7, #16]
 8002bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0203 	and.w	r2, r3, #3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8094 	beq.w	8002d1c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf4:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <HAL_GPIO_Init+0x2c0>)
 8002bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf8:	4a51      	ldr	r2, [pc, #324]	; (8002d40 <HAL_GPIO_Init+0x2c0>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6613      	str	r3, [r2, #96]	; 0x60
 8002c00:	4b4f      	ldr	r3, [pc, #316]	; (8002d40 <HAL_GPIO_Init+0x2c0>)
 8002c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c0c:	4a4d      	ldr	r2, [pc, #308]	; (8002d44 <HAL_GPIO_Init+0x2c4>)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	3302      	adds	r3, #2
 8002c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	220f      	movs	r2, #15
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c36:	d00d      	beq.n	8002c54 <HAL_GPIO_Init+0x1d4>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a43      	ldr	r2, [pc, #268]	; (8002d48 <HAL_GPIO_Init+0x2c8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d007      	beq.n	8002c50 <HAL_GPIO_Init+0x1d0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a42      	ldr	r2, [pc, #264]	; (8002d4c <HAL_GPIO_Init+0x2cc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d101      	bne.n	8002c4c <HAL_GPIO_Init+0x1cc>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e004      	b.n	8002c56 <HAL_GPIO_Init+0x1d6>
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	e002      	b.n	8002c56 <HAL_GPIO_Init+0x1d6>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_GPIO_Init+0x1d6>
 8002c54:	2300      	movs	r3, #0
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	f002 0203 	and.w	r2, r2, #3
 8002c5c:	0092      	lsls	r2, r2, #2
 8002c5e:	4093      	lsls	r3, r2
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c66:	4937      	ldr	r1, [pc, #220]	; (8002d44 <HAL_GPIO_Init+0x2c4>)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c74:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c98:	4a2d      	ldr	r2, [pc, #180]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c9e:	4b2c      	ldr	r3, [pc, #176]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cc2:	4a23      	ldr	r2, [pc, #140]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cc8:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cec:	4a18      	ldr	r2, [pc, #96]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cf2:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d16:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <HAL_GPIO_Init+0x2d0>)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f47f aeaf 	bne.w	8002a90 <HAL_GPIO_Init+0x10>
  }
}
 8002d32:	bf00      	nop
 8002d34:	bf00      	nop
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40010000 	.word	0x40010000
 8002d48:	48000400 	.word	0x48000400
 8002d4c:	48000800 	.word	0x48000800
 8002d50:	40010400 	.word	0x40010400

08002d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	887b      	ldrh	r3, [r7, #2]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e001      	b.n	8002d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
 8002d90:	4613      	mov	r3, r2
 8002d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d94:	787b      	ldrb	r3, [r7, #1]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc2:	6013      	str	r3, [r2, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40007000 	.word	0x40007000

08002dd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <HAL_PWREx_GetVoltageRange+0x18>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40007000 	.word	0x40007000

08002df0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dfe:	d130      	bne.n	8002e62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e0c:	d038      	beq.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e0e:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e16:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e1e:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2232      	movs	r2, #50	; 0x32
 8002e24:	fb02 f303 	mul.w	r3, r2, r3
 8002e28:	4a1b      	ldr	r2, [pc, #108]	; (8002e98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0c9b      	lsrs	r3, r3, #18
 8002e30:	3301      	adds	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e34:	e002      	b.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e48:	d102      	bne.n	8002e50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f2      	bne.n	8002e36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5c:	d110      	bne.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e00f      	b.n	8002e82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6e:	d007      	beq.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e70:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e78:	4a05      	ldr	r2, [pc, #20]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40007000 	.word	0x40007000
 8002e94:	20000040 	.word	0x20000040
 8002e98:	431bde83 	.word	0x431bde83

08002e9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f000 bc02 	b.w	80036b4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb0:	4b96      	ldr	r3, [pc, #600]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eba:	4b94      	ldr	r3, [pc, #592]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80e4 	beq.w	800309a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d007      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x4c>
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	f040 808b 	bne.w	8002ff6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	f040 8087 	bne.w	8002ff6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ee8:	4b88      	ldr	r3, [pc, #544]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_OscConfig+0x64>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e3d9      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1a      	ldr	r2, [r3, #32]
 8002f04:	4b81      	ldr	r3, [pc, #516]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d004      	beq.n	8002f1a <HAL_RCC_OscConfig+0x7e>
 8002f10:	4b7e      	ldr	r3, [pc, #504]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f18:	e005      	b.n	8002f26 <HAL_RCC_OscConfig+0x8a>
 8002f1a:	4b7c      	ldr	r3, [pc, #496]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d223      	bcs.n	8002f72 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fd8c 	bl	8003a4c <RCC_SetFlashLatencyFromMSIRange>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e3ba      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f3e:	4b73      	ldr	r3, [pc, #460]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a72      	ldr	r2, [pc, #456]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f44:	f043 0308 	orr.w	r3, r3, #8
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b70      	ldr	r3, [pc, #448]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	496d      	ldr	r1, [pc, #436]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f5c:	4b6b      	ldr	r3, [pc, #428]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	4968      	ldr	r1, [pc, #416]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
 8002f70:	e025      	b.n	8002fbe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f72:	4b66      	ldr	r3, [pc, #408]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a65      	ldr	r2, [pc, #404]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f78:	f043 0308 	orr.w	r3, r3, #8
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4b63      	ldr	r3, [pc, #396]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	4960      	ldr	r1, [pc, #384]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f90:	4b5e      	ldr	r3, [pc, #376]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	495b      	ldr	r1, [pc, #364]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fd4c 	bl	8003a4c <RCC_SetFlashLatencyFromMSIRange>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e37a      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fbe:	f000 fc81 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b51      	ldr	r3, [pc, #324]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	4950      	ldr	r1, [pc, #320]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fda:	4a4e      	ldr	r2, [pc, #312]	; (8003114 <HAL_RCC_OscConfig+0x278>)
 8002fdc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fde:	4b4e      	ldr	r3, [pc, #312]	; (8003118 <HAL_RCC_OscConfig+0x27c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fbe6 	bl	80027b4 <HAL_InitTick>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d052      	beq.n	8003098 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	e35e      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d032      	beq.n	8003064 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ffe:	4b43      	ldr	r3, [pc, #268]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a42      	ldr	r2, [pc, #264]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800300a:	f7ff fc23 	bl	8002854 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003012:	f7ff fc1f 	bl	8002854 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e347      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003024:	4b39      	ldr	r3, [pc, #228]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003030:	4b36      	ldr	r3, [pc, #216]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a35      	ldr	r2, [pc, #212]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003036:	f043 0308 	orr.w	r3, r3, #8
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	4b33      	ldr	r3, [pc, #204]	; (800310c <HAL_RCC_OscConfig+0x270>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4930      	ldr	r1, [pc, #192]	; (800310c <HAL_RCC_OscConfig+0x270>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800304e:	4b2f      	ldr	r3, [pc, #188]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	492b      	ldr	r1, [pc, #172]	; (800310c <HAL_RCC_OscConfig+0x270>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
 8003062:	e01a      	b.n	800309a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003064:	4b29      	ldr	r3, [pc, #164]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a28      	ldr	r2, [pc, #160]	; (800310c <HAL_RCC_OscConfig+0x270>)
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003070:	f7ff fbf0 	bl	8002854 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003078:	f7ff fbec 	bl	8002854 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e314      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800308a:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_RCC_OscConfig+0x270>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x1dc>
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003098:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d073      	beq.n	800318e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_OscConfig+0x21c>
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2b0c      	cmp	r3, #12
 80030b0:	d10e      	bne.n	80030d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d10b      	bne.n	80030d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b8:	4b14      	ldr	r3, [pc, #80]	; (800310c <HAL_RCC_OscConfig+0x270>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d063      	beq.n	800318c <HAL_RCC_OscConfig+0x2f0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d15f      	bne.n	800318c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e2f1      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d8:	d106      	bne.n	80030e8 <HAL_RCC_OscConfig+0x24c>
 80030da:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_RCC_OscConfig+0x270>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a0b      	ldr	r2, [pc, #44]	; (800310c <HAL_RCC_OscConfig+0x270>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e025      	b.n	8003134 <HAL_RCC_OscConfig+0x298>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f0:	d114      	bne.n	800311c <HAL_RCC_OscConfig+0x280>
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_OscConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a05      	ldr	r2, [pc, #20]	; (800310c <HAL_RCC_OscConfig+0x270>)
 80030f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b03      	ldr	r3, [pc, #12]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a02      	ldr	r2, [pc, #8]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e013      	b.n	8003134 <HAL_RCC_OscConfig+0x298>
 800310c:	40021000 	.word	0x40021000
 8003110:	08009ce4 	.word	0x08009ce4
 8003114:	20000040 	.word	0x20000040
 8003118:	20000044 	.word	0x20000044
 800311c:	4ba0      	ldr	r3, [pc, #640]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a9f      	ldr	r2, [pc, #636]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b9d      	ldr	r3, [pc, #628]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a9c      	ldr	r2, [pc, #624]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800312e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d013      	beq.n	8003164 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7ff fb8a 	bl	8002854 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7ff fb86 	bl	8002854 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e2ae      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003156:	4b92      	ldr	r3, [pc, #584]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x2a8>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7ff fb76 	bl	8002854 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7ff fb72 	bl	8002854 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e29a      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800317e:	4b88      	ldr	r3, [pc, #544]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x2d0>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d060      	beq.n	800325c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b04      	cmp	r3, #4
 800319e:	d005      	beq.n	80031ac <HAL_RCC_OscConfig+0x310>
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d119      	bne.n	80031da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d116      	bne.n	80031da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ac:	4b7c      	ldr	r3, [pc, #496]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_OscConfig+0x328>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e277      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b76      	ldr	r3, [pc, #472]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	4973      	ldr	r1, [pc, #460]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d8:	e040      	b.n	800325c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d023      	beq.n	800322a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e2:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6e      	ldr	r2, [pc, #440]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ee:	f7ff fb31 	bl	8002854 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f6:	f7ff fb2d 	bl	8002854 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e255      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003208:	4b65      	ldr	r3, [pc, #404]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003214:	4b62      	ldr	r3, [pc, #392]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	495f      	ldr	r1, [pc, #380]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
 8003228:	e018      	b.n	800325c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800322a:	4b5d      	ldr	r3, [pc, #372]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5c      	ldr	r2, [pc, #368]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003236:	f7ff fb0d 	bl	8002854 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800323e:	f7ff fb09 	bl	8002854 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e231      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003250:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f0      	bne.n	800323e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d03c      	beq.n	80032e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01c      	beq.n	80032aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003270:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003276:	4a4a      	ldr	r2, [pc, #296]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7ff fae8 	bl	8002854 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003288:	f7ff fae4 	bl	8002854 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e20c      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800329a:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800329c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ef      	beq.n	8003288 <HAL_RCC_OscConfig+0x3ec>
 80032a8:	e01b      	b.n	80032e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032aa:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80032ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b0:	4a3b      	ldr	r2, [pc, #236]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7ff facb 	bl	8002854 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c2:	f7ff fac7 	bl	8002854 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e1ef      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032d4:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80032d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1ef      	bne.n	80032c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80a6 	beq.w	800343c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f0:	2300      	movs	r3, #0
 80032f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10d      	bne.n	800331c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330a:	6593      	str	r3, [r2, #88]	; 0x58
 800330c:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003318:	2301      	movs	r3, #1
 800331a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <HAL_RCC_OscConfig+0x508>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d118      	bne.n	800335a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <HAL_RCC_OscConfig+0x508>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <HAL_RCC_OscConfig+0x508>)
 800332e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003332:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003334:	f7ff fa8e 	bl	8002854 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333c:	f7ff fa8a 	bl	8002854 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e1b2      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <HAL_RCC_OscConfig+0x508>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d108      	bne.n	8003374 <HAL_RCC_OscConfig+0x4d8>
 8003362:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003372:	e029      	b.n	80033c8 <HAL_RCC_OscConfig+0x52c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b05      	cmp	r3, #5
 800337a:	d115      	bne.n	80033a8 <HAL_RCC_OscConfig+0x50c>
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	4a03      	ldr	r2, [pc, #12]	; (80033a0 <HAL_RCC_OscConfig+0x504>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800339c:	e014      	b.n	80033c8 <HAL_RCC_OscConfig+0x52c>
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40007000 	.word	0x40007000
 80033a8:	4b9a      	ldr	r3, [pc, #616]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	4a99      	ldr	r2, [pc, #612]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033b8:	4b96      	ldr	r3, [pc, #600]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	4a95      	ldr	r2, [pc, #596]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d016      	beq.n	80033fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7ff fa40 	bl	8002854 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7ff fa3c 	bl	8002854 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e162      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ee:	4b89      	ldr	r3, [pc, #548]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ed      	beq.n	80033d8 <HAL_RCC_OscConfig+0x53c>
 80033fc:	e015      	b.n	800342a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7ff fa29 	bl	8002854 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003404:	e00a      	b.n	800341c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7ff fa25 	bl	8002854 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	; 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e14b      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800341c:	4b7d      	ldr	r3, [pc, #500]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ed      	bne.n	8003406 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800342a:	7ffb      	ldrb	r3, [r7, #31]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d105      	bne.n	800343c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003430:	4b78      	ldr	r3, [pc, #480]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	4a77      	ldr	r2, [pc, #476]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 8003436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d03c      	beq.n	80034c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01c      	beq.n	800348a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003450:	4b70      	ldr	r3, [pc, #448]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 8003452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003456:	4a6f      	ldr	r2, [pc, #444]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7ff f9f8 	bl	8002854 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003468:	f7ff f9f4 	bl	8002854 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e11c      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800347a:	4b66      	ldr	r3, [pc, #408]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 800347c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ef      	beq.n	8003468 <HAL_RCC_OscConfig+0x5cc>
 8003488:	e01b      	b.n	80034c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800348a:	4b62      	ldr	r3, [pc, #392]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 800348c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003490:	4a60      	ldr	r2, [pc, #384]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7ff f9db 	bl	8002854 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034a2:	f7ff f9d7 	bl	8002854 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e0ff      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034b4:	4b57      	ldr	r3, [pc, #348]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 80034b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ef      	bne.n	80034a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80f3 	beq.w	80036b2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	f040 80c9 	bne.w	8003668 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034d6:	4b4f      	ldr	r3, [pc, #316]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f003 0203 	and.w	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d12c      	bne.n	8003544 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	3b01      	subs	r3, #1
 80034f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d123      	bne.n	8003544 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003506:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d11b      	bne.n	8003544 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d113      	bne.n	8003544 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	3b01      	subs	r3, #1
 800352a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d109      	bne.n	8003544 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	3b01      	subs	r3, #1
 800353e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d06b      	beq.n	800361c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d062      	beq.n	8003610 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800354a:	4b32      	ldr	r3, [pc, #200]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0ac      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800355a:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2d      	ldr	r2, [pc, #180]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 8003560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003564:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003566:	f7ff f975 	bl	8002854 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356e:	f7ff f971 	bl	8002854 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e099      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003580:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f0      	bne.n	800356e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800358c:	4b21      	ldr	r3, [pc, #132]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	4b21      	ldr	r3, [pc, #132]	; (8003618 <HAL_RCC_OscConfig+0x77c>)
 8003592:	4013      	ands	r3, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800359c:	3a01      	subs	r2, #1
 800359e:	0112      	lsls	r2, r2, #4
 80035a0:	4311      	orrs	r1, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035a6:	0212      	lsls	r2, r2, #8
 80035a8:	4311      	orrs	r1, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035ae:	0852      	lsrs	r2, r2, #1
 80035b0:	3a01      	subs	r2, #1
 80035b2:	0552      	lsls	r2, r2, #21
 80035b4:	4311      	orrs	r1, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035ba:	0852      	lsrs	r2, r2, #1
 80035bc:	3a01      	subs	r2, #1
 80035be:	0652      	lsls	r2, r2, #25
 80035c0:	4311      	orrs	r1, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035c6:	06d2      	lsls	r2, r2, #27
 80035c8:	430a      	orrs	r2, r1
 80035ca:	4912      	ldr	r1, [pc, #72]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035d0:	4b10      	ldr	r3, [pc, #64]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a0f      	ldr	r2, [pc, #60]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 80035d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035dc:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a0c      	ldr	r2, [pc, #48]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 80035e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035e8:	f7ff f934 	bl	8002854 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7ff f930 	bl	8002854 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e058      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003602:	4b04      	ldr	r3, [pc, #16]	; (8003614 <HAL_RCC_OscConfig+0x778>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800360e:	e050      	b.n	80036b2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e04f      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
 8003614:	40021000 	.word	0x40021000
 8003618:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361c:	4b27      	ldr	r3, [pc, #156]	; (80036bc <HAL_RCC_OscConfig+0x820>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d144      	bne.n	80036b2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003628:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_RCC_OscConfig+0x820>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a23      	ldr	r2, [pc, #140]	; (80036bc <HAL_RCC_OscConfig+0x820>)
 800362e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003632:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003634:	4b21      	ldr	r3, [pc, #132]	; (80036bc <HAL_RCC_OscConfig+0x820>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4a20      	ldr	r2, [pc, #128]	; (80036bc <HAL_RCC_OscConfig+0x820>)
 800363a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800363e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003640:	f7ff f908 	bl	8002854 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003648:	f7ff f904 	bl	8002854 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e02c      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365a:	4b18      	ldr	r3, [pc, #96]	; (80036bc <HAL_RCC_OscConfig+0x820>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x7ac>
 8003666:	e024      	b.n	80036b2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2b0c      	cmp	r3, #12
 800366c:	d01f      	beq.n	80036ae <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	4b13      	ldr	r3, [pc, #76]	; (80036bc <HAL_RCC_OscConfig+0x820>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a12      	ldr	r2, [pc, #72]	; (80036bc <HAL_RCC_OscConfig+0x820>)
 8003674:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367a:	f7ff f8eb 	bl	8002854 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003682:	f7ff f8e7 	bl	8002854 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e00f      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_RCC_OscConfig+0x820>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f0      	bne.n	8003682 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_RCC_OscConfig+0x820>)
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	4905      	ldr	r1, [pc, #20]	; (80036bc <HAL_RCC_OscConfig+0x820>)
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_OscConfig+0x824>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	60cb      	str	r3, [r1, #12]
 80036ac:	e001      	b.n	80036b2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3720      	adds	r7, #32
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000
 80036c0:	feeefffc 	.word	0xfeeefffc

080036c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0e7      	b.n	80038a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d8:	4b75      	ldr	r3, [pc, #468]	; (80038b0 <HAL_RCC_ClockConfig+0x1ec>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d910      	bls.n	8003708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b72      	ldr	r3, [pc, #456]	; (80038b0 <HAL_RCC_ClockConfig+0x1ec>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 0207 	bic.w	r2, r3, #7
 80036ee:	4970      	ldr	r1, [pc, #448]	; (80038b0 <HAL_RCC_ClockConfig+0x1ec>)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b6e      	ldr	r3, [pc, #440]	; (80038b0 <HAL_RCC_ClockConfig+0x1ec>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0cf      	b.n	80038a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d010      	beq.n	8003736 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	4b66      	ldr	r3, [pc, #408]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003720:	429a      	cmp	r2, r3
 8003722:	d908      	bls.n	8003736 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003724:	4b63      	ldr	r3, [pc, #396]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4960      	ldr	r1, [pc, #384]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d04c      	beq.n	80037dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b03      	cmp	r3, #3
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374a:	4b5a      	ldr	r3, [pc, #360]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d121      	bne.n	800379a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0a6      	b.n	80038a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003762:	4b54      	ldr	r3, [pc, #336]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d115      	bne.n	800379a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e09a      	b.n	80038a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d107      	bne.n	800378a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800377a:	4b4e      	ldr	r3, [pc, #312]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e08e      	b.n	80038a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800378a:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e086      	b.n	80038a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800379a:	4b46      	ldr	r3, [pc, #280]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f023 0203 	bic.w	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4943      	ldr	r1, [pc, #268]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ac:	f7ff f852 	bl	8002854 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b4:	f7ff f84e 	bl	8002854 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e06e      	b.n	80038a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ca:	4b3a      	ldr	r3, [pc, #232]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 020c 	and.w	r2, r3, #12
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	429a      	cmp	r2, r3
 80037da:	d1eb      	bne.n	80037b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d010      	beq.n	800380a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d208      	bcs.n	800380a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f8:	4b2e      	ldr	r3, [pc, #184]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	492b      	ldr	r1, [pc, #172]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800380a:	4b29      	ldr	r3, [pc, #164]	; (80038b0 <HAL_RCC_ClockConfig+0x1ec>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d210      	bcs.n	800383a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003818:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <HAL_RCC_ClockConfig+0x1ec>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 0207 	bic.w	r2, r3, #7
 8003820:	4923      	ldr	r1, [pc, #140]	; (80038b0 <HAL_RCC_ClockConfig+0x1ec>)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003828:	4b21      	ldr	r3, [pc, #132]	; (80038b0 <HAL_RCC_ClockConfig+0x1ec>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d001      	beq.n	800383a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e036      	b.n	80038a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	4918      	ldr	r1, [pc, #96]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003854:	4313      	orrs	r3, r2
 8003856:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d009      	beq.n	8003878 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003864:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4910      	ldr	r1, [pc, #64]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003878:	f000 f824 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	490b      	ldr	r1, [pc, #44]	; (80038b8 <HAL_RCC_ClockConfig+0x1f4>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
 8003894:	4a09      	ldr	r2, [pc, #36]	; (80038bc <HAL_RCC_ClockConfig+0x1f8>)
 8003896:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003898:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <HAL_RCC_ClockConfig+0x1fc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe ff89 	bl	80027b4 <HAL_InitTick>
 80038a2:	4603      	mov	r3, r0
 80038a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80038a6:	7afb      	ldrb	r3, [r7, #11]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40022000 	.word	0x40022000
 80038b4:	40021000 	.word	0x40021000
 80038b8:	08009ce4 	.word	0x08009ce4
 80038bc:	20000040 	.word	0x20000040
 80038c0:	20000044 	.word	0x20000044

080038c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	; 0x24
 80038c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	2300      	movs	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d2:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <HAL_RCC_GetSysClockFreq+0x108>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038dc:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <HAL_RCC_GetSysClockFreq+0x108>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x34>
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b0c      	cmp	r3, #12
 80038f0:	d121      	bne.n	8003936 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d11e      	bne.n	8003936 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038f8:	4b34      	ldr	r3, [pc, #208]	; (80039cc <HAL_RCC_GetSysClockFreq+0x108>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d107      	bne.n	8003914 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003904:	4b31      	ldr	r3, [pc, #196]	; (80039cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	e005      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003914:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003920:	4a2b      	ldr	r2, [pc, #172]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003928:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10d      	bne.n	800394c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003934:	e00a      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b04      	cmp	r3, #4
 800393a:	d102      	bne.n	8003942 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800393c:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	e004      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d101      	bne.n	800394c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003948:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800394a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	2b0c      	cmp	r3, #12
 8003950:	d134      	bne.n	80039bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d003      	beq.n	800396a <HAL_RCC_GetSysClockFreq+0xa6>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d003      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0xac>
 8003968:	e005      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800396a:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800396c:	617b      	str	r3, [r7, #20]
      break;
 800396e:	e005      	b.n	800397c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003970:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003972:	617b      	str	r3, [r7, #20]
      break;
 8003974:	e002      	b.n	800397c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	617b      	str	r3, [r7, #20]
      break;
 800397a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800397c:	4b13      	ldr	r3, [pc, #76]	; (80039cc <HAL_RCC_GetSysClockFreq+0x108>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	3301      	adds	r3, #1
 8003988:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800398a:	4b10      	ldr	r3, [pc, #64]	; (80039cc <HAL_RCC_GetSysClockFreq+0x108>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	0a1b      	lsrs	r3, r3, #8
 8003990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	fb03 f202 	mul.w	r2, r3, r2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <HAL_RCC_GetSysClockFreq+0x108>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	0e5b      	lsrs	r3, r3, #25
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	3301      	adds	r3, #1
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039bc:	69bb      	ldr	r3, [r7, #24]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3724      	adds	r7, #36	; 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40021000 	.word	0x40021000
 80039d0:	08009cfc 	.word	0x08009cfc
 80039d4:	00f42400 	.word	0x00f42400
 80039d8:	007a1200 	.word	0x007a1200

080039dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039e2:	681b      	ldr	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20000040 	.word	0x20000040

080039f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039f8:	f7ff fff0 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	4904      	ldr	r1, [pc, #16]	; (8003a1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	08009cf4 	.word	0x08009cf4

08003a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a24:	f7ff ffda 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0adb      	lsrs	r3, r3, #11
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4904      	ldr	r1, [pc, #16]	; (8003a48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	08009cf4 	.word	0x08009cf4

08003a4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a54:	2300      	movs	r3, #0
 8003a56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a58:	4b2a      	ldr	r3, [pc, #168]	; (8003b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a64:	f7ff f9b6 	bl	8002dd4 <HAL_PWREx_GetVoltageRange>
 8003a68:	6178      	str	r0, [r7, #20]
 8003a6a:	e014      	b.n	8003a96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a6c:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	4a24      	ldr	r2, [pc, #144]	; (8003b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a76:	6593      	str	r3, [r2, #88]	; 0x58
 8003a78:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a84:	f7ff f9a6 	bl	8002dd4 <HAL_PWREx_GetVoltageRange>
 8003a88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8e:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a9c:	d10b      	bne.n	8003ab6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b80      	cmp	r3, #128	; 0x80
 8003aa2:	d919      	bls.n	8003ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2ba0      	cmp	r3, #160	; 0xa0
 8003aa8:	d902      	bls.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aaa:	2302      	movs	r3, #2
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	e013      	b.n	8003ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	e010      	b.n	8003ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b80      	cmp	r3, #128	; 0x80
 8003aba:	d902      	bls.n	8003ac2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003abc:	2303      	movs	r3, #3
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	e00a      	b.n	8003ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b80      	cmp	r3, #128	; 0x80
 8003ac6:	d102      	bne.n	8003ace <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ac8:	2302      	movs	r3, #2
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	e004      	b.n	8003ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b70      	cmp	r3, #112	; 0x70
 8003ad2:	d101      	bne.n	8003ad8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f023 0207 	bic.w	r2, r3, #7
 8003ae0:	4909      	ldr	r1, [pc, #36]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d001      	beq.n	8003afa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40022000 	.word	0x40022000

08003b0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b14:	2300      	movs	r3, #0
 8003b16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b18:	2300      	movs	r3, #0
 8003b1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d031      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b30:	d01a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003b32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b36:	d814      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d009      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b40:	d10f      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003b42:	4b5d      	ldr	r3, [pc, #372]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4a5c      	ldr	r2, [pc, #368]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b4e:	e00c      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f9de 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b60:	e003      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	74fb      	strb	r3, [r7, #19]
      break;
 8003b66:	e000      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b70:	4b51      	ldr	r3, [pc, #324]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	494e      	ldr	r1, [pc, #312]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b86:	e001      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b88:	7cfb      	ldrb	r3, [r7, #19]
 8003b8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 809e 	beq.w	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b9e:	4b46      	ldr	r3, [pc, #280]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00d      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb4:	4b40      	ldr	r3, [pc, #256]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	4a3f      	ldr	r2, [pc, #252]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc0:	4b3d      	ldr	r3, [pc, #244]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bd0:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a39      	ldr	r2, [pc, #228]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bdc:	f7fe fe3a 	bl	8002854 <HAL_GetTick>
 8003be0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003be2:	e009      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be4:	f7fe fe36 	bl	8002854 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d902      	bls.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	74fb      	strb	r3, [r7, #19]
        break;
 8003bf6:	e005      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bf8:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0ef      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003c04:	7cfb      	ldrb	r3, [r7, #19]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d15a      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c0a:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01e      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d019      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c30:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c32:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c42:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c52:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d016      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fe fdf6 	bl	8002854 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6c:	f7fe fdf2 	bl	8002854 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d902      	bls.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	74fb      	strb	r3, [r7, #19]
            break;
 8003c82:	e006      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ec      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003c92:	7cfb      	ldrb	r3, [r7, #19]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c98:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca6:	4904      	ldr	r1, [pc, #16]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cae:	e009      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	74bb      	strb	r3, [r7, #18]
 8003cb4:	e006      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc4:	7c7b      	ldrb	r3, [r7, #17]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d105      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cca:	4b8a      	ldr	r3, [pc, #552]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cce:	4a89      	ldr	r2, [pc, #548]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ce2:	4b84      	ldr	r3, [pc, #528]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce8:	f023 0203 	bic.w	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	4980      	ldr	r1, [pc, #512]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d04:	4b7b      	ldr	r3, [pc, #492]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	f023 020c 	bic.w	r2, r3, #12
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	4978      	ldr	r1, [pc, #480]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d26:	4b73      	ldr	r3, [pc, #460]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	496f      	ldr	r1, [pc, #444]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d48:	4b6a      	ldr	r3, [pc, #424]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d56:	4967      	ldr	r1, [pc, #412]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d6a:	4b62      	ldr	r3, [pc, #392]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	495e      	ldr	r1, [pc, #376]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d8c:	4b59      	ldr	r3, [pc, #356]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	4956      	ldr	r1, [pc, #344]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dae:	4b51      	ldr	r3, [pc, #324]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	494d      	ldr	r1, [pc, #308]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d028      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dd0:	4b48      	ldr	r3, [pc, #288]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	4945      	ldr	r1, [pc, #276]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dee:	d106      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003df0:	4b40      	ldr	r3, [pc, #256]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4a3f      	ldr	r2, [pc, #252]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dfa:	60d3      	str	r3, [r2, #12]
 8003dfc:	e011      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e06:	d10c      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f882 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003e1e:	7cfb      	ldrb	r3, [r7, #19]
 8003e20:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d028      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e2e:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	492d      	ldr	r1, [pc, #180]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e4c:	d106      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e4e:	4b29      	ldr	r3, [pc, #164]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	4a28      	ldr	r2, [pc, #160]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e58:	60d3      	str	r3, [r2, #12]
 8003e5a:	e011      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f853 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01c      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e8c:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9a:	4916      	ldr	r1, [pc, #88]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eaa:	d10c      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f830 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003ec2:	7cfb      	ldrb	r3, [r7, #19]
 8003ec4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee0:	4904      	ldr	r1, [pc, #16]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ee8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000

08003ef8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a04      	ldr	r2, [pc, #16]	; (8003f14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f02:	f043 0304 	orr.w	r3, r3, #4
 8003f06:	6013      	str	r3, [r2, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000

08003f18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f26:	4b74      	ldr	r3, [pc, #464]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d018      	beq.n	8003f64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f32:	4b71      	ldr	r3, [pc, #452]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0203 	and.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d10d      	bne.n	8003f5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
       ||
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f4a:	4b6b      	ldr	r3, [pc, #428]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	091b      	lsrs	r3, r3, #4
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
       ||
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d047      	beq.n	8003fee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
 8003f62:	e044      	b.n	8003fee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d018      	beq.n	8003f9e <RCCEx_PLLSAI1_Config+0x86>
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d825      	bhi.n	8003fbc <RCCEx_PLLSAI1_Config+0xa4>
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d002      	beq.n	8003f7a <RCCEx_PLLSAI1_Config+0x62>
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d009      	beq.n	8003f8c <RCCEx_PLLSAI1_Config+0x74>
 8003f78:	e020      	b.n	8003fbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f7a:	4b5f      	ldr	r3, [pc, #380]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d11d      	bne.n	8003fc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f8a:	e01a      	b.n	8003fc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f8c:	4b5a      	ldr	r3, [pc, #360]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d116      	bne.n	8003fc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f9c:	e013      	b.n	8003fc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f9e:	4b56      	ldr	r3, [pc, #344]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10f      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003faa:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fba:	e006      	b.n	8003fca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc0:	e004      	b.n	8003fcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fc2:	bf00      	nop
 8003fc4:	e002      	b.n	8003fcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fc6:	bf00      	nop
 8003fc8:	e000      	b.n	8003fcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10d      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fd2:	4b49      	ldr	r3, [pc, #292]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6819      	ldr	r1, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	4943      	ldr	r1, [pc, #268]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d17c      	bne.n	80040ee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ff4:	4b40      	ldr	r3, [pc, #256]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a3f      	ldr	r2, [pc, #252]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ffa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004000:	f7fe fc28 	bl	8002854 <HAL_GetTick>
 8004004:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004006:	e009      	b.n	800401c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004008:	f7fe fc24 	bl	8002854 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d902      	bls.n	800401c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	73fb      	strb	r3, [r7, #15]
        break;
 800401a:	e005      	b.n	8004028 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800401c:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ef      	bne.n	8004008 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d15f      	bne.n	80040ee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d110      	bne.n	8004056 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004034:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800403c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6892      	ldr	r2, [r2, #8]
 8004044:	0211      	lsls	r1, r2, #8
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68d2      	ldr	r2, [r2, #12]
 800404a:	06d2      	lsls	r2, r2, #27
 800404c:	430a      	orrs	r2, r1
 800404e:	492a      	ldr	r1, [pc, #168]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004050:	4313      	orrs	r3, r2
 8004052:	610b      	str	r3, [r1, #16]
 8004054:	e027      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d112      	bne.n	8004082 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800405c:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004064:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6892      	ldr	r2, [r2, #8]
 800406c:	0211      	lsls	r1, r2, #8
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6912      	ldr	r2, [r2, #16]
 8004072:	0852      	lsrs	r2, r2, #1
 8004074:	3a01      	subs	r2, #1
 8004076:	0552      	lsls	r2, r2, #21
 8004078:	430a      	orrs	r2, r1
 800407a:	491f      	ldr	r1, [pc, #124]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800407c:	4313      	orrs	r3, r2
 800407e:	610b      	str	r3, [r1, #16]
 8004080:	e011      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004082:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800408a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6892      	ldr	r2, [r2, #8]
 8004092:	0211      	lsls	r1, r2, #8
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6952      	ldr	r2, [r2, #20]
 8004098:	0852      	lsrs	r2, r2, #1
 800409a:	3a01      	subs	r2, #1
 800409c:	0652      	lsls	r2, r2, #25
 800409e:	430a      	orrs	r2, r1
 80040a0:	4915      	ldr	r1, [pc, #84]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040a6:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a13      	ldr	r2, [pc, #76]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b2:	f7fe fbcf 	bl	8002854 <HAL_GetTick>
 80040b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040b8:	e009      	b.n	80040ce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040ba:	f7fe fbcb 	bl	8002854 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d902      	bls.n	80040ce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	73fb      	strb	r3, [r7, #15]
          break;
 80040cc:	e005      	b.n	80040da <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0ef      	beq.n	80040ba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	4903      	ldr	r1, [pc, #12]	; (80040f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000

080040fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e040      	b.n	8004190 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fe f99a 	bl	8002458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	; 0x24
 8004128:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0201 	bic.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa54 	bl	80045f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f825 	bl	8004198 <UART_SetConfig>
 800414e:	4603      	mov	r3, r0
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e01b      	b.n	8004190 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fad3 	bl	8004734 <UART_CheckIdleState>
 800418e:	4603      	mov	r3, r0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800419c:	b08a      	sub	sp, #40	; 0x28
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	431a      	orrs	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	4313      	orrs	r3, r2
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4bb4      	ldr	r3, [pc, #720]	; (8004498 <UART_SetConfig+0x300>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041d0:	430b      	orrs	r3, r1
 80041d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4aa9      	ldr	r2, [pc, #676]	; (800449c <UART_SetConfig+0x304>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004200:	4313      	orrs	r3, r2
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004214:	430a      	orrs	r2, r1
 8004216:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4aa0      	ldr	r2, [pc, #640]	; (80044a0 <UART_SetConfig+0x308>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d126      	bne.n	8004270 <UART_SetConfig+0xd8>
 8004222:	4ba0      	ldr	r3, [pc, #640]	; (80044a4 <UART_SetConfig+0x30c>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	2b03      	cmp	r3, #3
 800422e:	d81b      	bhi.n	8004268 <UART_SetConfig+0xd0>
 8004230:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <UART_SetConfig+0xa0>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	08004249 	.word	0x08004249
 800423c:	08004259 	.word	0x08004259
 8004240:	08004251 	.word	0x08004251
 8004244:	08004261 	.word	0x08004261
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424e:	e080      	b.n	8004352 <UART_SetConfig+0x1ba>
 8004250:	2302      	movs	r3, #2
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004256:	e07c      	b.n	8004352 <UART_SetConfig+0x1ba>
 8004258:	2304      	movs	r3, #4
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425e:	e078      	b.n	8004352 <UART_SetConfig+0x1ba>
 8004260:	2308      	movs	r3, #8
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004266:	e074      	b.n	8004352 <UART_SetConfig+0x1ba>
 8004268:	2310      	movs	r3, #16
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426e:	e070      	b.n	8004352 <UART_SetConfig+0x1ba>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a8c      	ldr	r2, [pc, #560]	; (80044a8 <UART_SetConfig+0x310>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d138      	bne.n	80042ec <UART_SetConfig+0x154>
 800427a:	4b8a      	ldr	r3, [pc, #552]	; (80044a4 <UART_SetConfig+0x30c>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004280:	f003 030c 	and.w	r3, r3, #12
 8004284:	2b0c      	cmp	r3, #12
 8004286:	d82d      	bhi.n	80042e4 <UART_SetConfig+0x14c>
 8004288:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <UART_SetConfig+0xf8>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	080042c5 	.word	0x080042c5
 8004294:	080042e5 	.word	0x080042e5
 8004298:	080042e5 	.word	0x080042e5
 800429c:	080042e5 	.word	0x080042e5
 80042a0:	080042d5 	.word	0x080042d5
 80042a4:	080042e5 	.word	0x080042e5
 80042a8:	080042e5 	.word	0x080042e5
 80042ac:	080042e5 	.word	0x080042e5
 80042b0:	080042cd 	.word	0x080042cd
 80042b4:	080042e5 	.word	0x080042e5
 80042b8:	080042e5 	.word	0x080042e5
 80042bc:	080042e5 	.word	0x080042e5
 80042c0:	080042dd 	.word	0x080042dd
 80042c4:	2300      	movs	r3, #0
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ca:	e042      	b.n	8004352 <UART_SetConfig+0x1ba>
 80042cc:	2302      	movs	r3, #2
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d2:	e03e      	b.n	8004352 <UART_SetConfig+0x1ba>
 80042d4:	2304      	movs	r3, #4
 80042d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042da:	e03a      	b.n	8004352 <UART_SetConfig+0x1ba>
 80042dc:	2308      	movs	r3, #8
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e2:	e036      	b.n	8004352 <UART_SetConfig+0x1ba>
 80042e4:	2310      	movs	r3, #16
 80042e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ea:	e032      	b.n	8004352 <UART_SetConfig+0x1ba>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a6a      	ldr	r2, [pc, #424]	; (800449c <UART_SetConfig+0x304>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d12a      	bne.n	800434c <UART_SetConfig+0x1b4>
 80042f6:	4b6b      	ldr	r3, [pc, #428]	; (80044a4 <UART_SetConfig+0x30c>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004300:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004304:	d01a      	beq.n	800433c <UART_SetConfig+0x1a4>
 8004306:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800430a:	d81b      	bhi.n	8004344 <UART_SetConfig+0x1ac>
 800430c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004310:	d00c      	beq.n	800432c <UART_SetConfig+0x194>
 8004312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004316:	d815      	bhi.n	8004344 <UART_SetConfig+0x1ac>
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <UART_SetConfig+0x18c>
 800431c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004320:	d008      	beq.n	8004334 <UART_SetConfig+0x19c>
 8004322:	e00f      	b.n	8004344 <UART_SetConfig+0x1ac>
 8004324:	2300      	movs	r3, #0
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432a:	e012      	b.n	8004352 <UART_SetConfig+0x1ba>
 800432c:	2302      	movs	r3, #2
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004332:	e00e      	b.n	8004352 <UART_SetConfig+0x1ba>
 8004334:	2304      	movs	r3, #4
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433a:	e00a      	b.n	8004352 <UART_SetConfig+0x1ba>
 800433c:	2308      	movs	r3, #8
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004342:	e006      	b.n	8004352 <UART_SetConfig+0x1ba>
 8004344:	2310      	movs	r3, #16
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434a:	e002      	b.n	8004352 <UART_SetConfig+0x1ba>
 800434c:	2310      	movs	r3, #16
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a51      	ldr	r2, [pc, #324]	; (800449c <UART_SetConfig+0x304>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d17a      	bne.n	8004452 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800435c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004360:	2b08      	cmp	r3, #8
 8004362:	d824      	bhi.n	80043ae <UART_SetConfig+0x216>
 8004364:	a201      	add	r2, pc, #4	; (adr r2, 800436c <UART_SetConfig+0x1d4>)
 8004366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436a:	bf00      	nop
 800436c:	08004391 	.word	0x08004391
 8004370:	080043af 	.word	0x080043af
 8004374:	08004399 	.word	0x08004399
 8004378:	080043af 	.word	0x080043af
 800437c:	0800439f 	.word	0x0800439f
 8004380:	080043af 	.word	0x080043af
 8004384:	080043af 	.word	0x080043af
 8004388:	080043af 	.word	0x080043af
 800438c:	080043a7 	.word	0x080043a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004390:	f7ff fb30 	bl	80039f4 <HAL_RCC_GetPCLK1Freq>
 8004394:	61f8      	str	r0, [r7, #28]
        break;
 8004396:	e010      	b.n	80043ba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004398:	4b44      	ldr	r3, [pc, #272]	; (80044ac <UART_SetConfig+0x314>)
 800439a:	61fb      	str	r3, [r7, #28]
        break;
 800439c:	e00d      	b.n	80043ba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439e:	f7ff fa91 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 80043a2:	61f8      	str	r0, [r7, #28]
        break;
 80043a4:	e009      	b.n	80043ba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043aa:	61fb      	str	r3, [r7, #28]
        break;
 80043ac:	e005      	b.n	80043ba <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8107 	beq.w	80045d0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d305      	bcc.n	80043de <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d903      	bls.n	80043e6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043e4:	e0f4      	b.n	80045d0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2200      	movs	r2, #0
 80043ea:	461c      	mov	r4, r3
 80043ec:	4615      	mov	r5, r2
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	022b      	lsls	r3, r5, #8
 80043f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80043fc:	0222      	lsls	r2, r4, #8
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	6849      	ldr	r1, [r1, #4]
 8004402:	0849      	lsrs	r1, r1, #1
 8004404:	2000      	movs	r0, #0
 8004406:	4688      	mov	r8, r1
 8004408:	4681      	mov	r9, r0
 800440a:	eb12 0a08 	adds.w	sl, r2, r8
 800440e:	eb43 0b09 	adc.w	fp, r3, r9
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004420:	4650      	mov	r0, sl
 8004422:	4659      	mov	r1, fp
 8004424:	f7fc fc30 	bl	8000c88 <__aeabi_uldivmod>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4613      	mov	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004436:	d308      	bcc.n	800444a <UART_SetConfig+0x2b2>
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800443e:	d204      	bcs.n	800444a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	60da      	str	r2, [r3, #12]
 8004448:	e0c2      	b.n	80045d0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004450:	e0be      	b.n	80045d0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445a:	d16a      	bne.n	8004532 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800445c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004460:	2b08      	cmp	r3, #8
 8004462:	d834      	bhi.n	80044ce <UART_SetConfig+0x336>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <UART_SetConfig+0x2d4>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	08004491 	.word	0x08004491
 8004470:	080044b1 	.word	0x080044b1
 8004474:	080044b9 	.word	0x080044b9
 8004478:	080044cf 	.word	0x080044cf
 800447c:	080044bf 	.word	0x080044bf
 8004480:	080044cf 	.word	0x080044cf
 8004484:	080044cf 	.word	0x080044cf
 8004488:	080044cf 	.word	0x080044cf
 800448c:	080044c7 	.word	0x080044c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004490:	f7ff fab0 	bl	80039f4 <HAL_RCC_GetPCLK1Freq>
 8004494:	61f8      	str	r0, [r7, #28]
        break;
 8004496:	e020      	b.n	80044da <UART_SetConfig+0x342>
 8004498:	efff69f3 	.word	0xefff69f3
 800449c:	40008000 	.word	0x40008000
 80044a0:	40013800 	.word	0x40013800
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40004400 	.word	0x40004400
 80044ac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044b0:	f7ff fab6 	bl	8003a20 <HAL_RCC_GetPCLK2Freq>
 80044b4:	61f8      	str	r0, [r7, #28]
        break;
 80044b6:	e010      	b.n	80044da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b8:	4b4c      	ldr	r3, [pc, #304]	; (80045ec <UART_SetConfig+0x454>)
 80044ba:	61fb      	str	r3, [r7, #28]
        break;
 80044bc:	e00d      	b.n	80044da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044be:	f7ff fa01 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 80044c2:	61f8      	str	r0, [r7, #28]
        break;
 80044c4:	e009      	b.n	80044da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ca:	61fb      	str	r3, [r7, #28]
        break;
 80044cc:	e005      	b.n	80044da <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d077      	beq.n	80045d0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	005a      	lsls	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b0f      	cmp	r3, #15
 80044fa:	d916      	bls.n	800452a <UART_SetConfig+0x392>
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004502:	d212      	bcs.n	800452a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f023 030f 	bic.w	r3, r3, #15
 800450c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	b29b      	uxth	r3, r3
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	b29a      	uxth	r2, r3
 800451a:	8afb      	ldrh	r3, [r7, #22]
 800451c:	4313      	orrs	r3, r2
 800451e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	8afa      	ldrh	r2, [r7, #22]
 8004526:	60da      	str	r2, [r3, #12]
 8004528:	e052      	b.n	80045d0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004530:	e04e      	b.n	80045d0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004532:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004536:	2b08      	cmp	r3, #8
 8004538:	d827      	bhi.n	800458a <UART_SetConfig+0x3f2>
 800453a:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <UART_SetConfig+0x3a8>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004565 	.word	0x08004565
 8004544:	0800456d 	.word	0x0800456d
 8004548:	08004575 	.word	0x08004575
 800454c:	0800458b 	.word	0x0800458b
 8004550:	0800457b 	.word	0x0800457b
 8004554:	0800458b 	.word	0x0800458b
 8004558:	0800458b 	.word	0x0800458b
 800455c:	0800458b 	.word	0x0800458b
 8004560:	08004583 	.word	0x08004583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004564:	f7ff fa46 	bl	80039f4 <HAL_RCC_GetPCLK1Freq>
 8004568:	61f8      	str	r0, [r7, #28]
        break;
 800456a:	e014      	b.n	8004596 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800456c:	f7ff fa58 	bl	8003a20 <HAL_RCC_GetPCLK2Freq>
 8004570:	61f8      	str	r0, [r7, #28]
        break;
 8004572:	e010      	b.n	8004596 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004574:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <UART_SetConfig+0x454>)
 8004576:	61fb      	str	r3, [r7, #28]
        break;
 8004578:	e00d      	b.n	8004596 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800457a:	f7ff f9a3 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 800457e:	61f8      	str	r0, [r7, #28]
        break;
 8004580:	e009      	b.n	8004596 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004586:	61fb      	str	r3, [r7, #28]
        break;
 8004588:	e005      	b.n	8004596 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004594:	bf00      	nop
    }

    if (pclk != 0U)
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d019      	beq.n	80045d0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	085a      	lsrs	r2, r3, #1
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	441a      	add	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b0f      	cmp	r3, #15
 80045b4:	d909      	bls.n	80045ca <UART_SetConfig+0x432>
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045bc:	d205      	bcs.n	80045ca <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60da      	str	r2, [r3, #12]
 80045c8:	e002      	b.n	80045d0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3728      	adds	r7, #40	; 0x28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ea:	bf00      	nop
 80045ec:	00f42400 	.word	0x00f42400

080045f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01a      	beq.n	8004706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ee:	d10a      	bne.n	8004706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	605a      	str	r2, [r3, #4]
  }
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b098      	sub	sp, #96	; 0x60
 8004738:	af02      	add	r7, sp, #8
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004744:	f7fe f886 	bl	8002854 <HAL_GetTick>
 8004748:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b08      	cmp	r3, #8
 8004756:	d12e      	bne.n	80047b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004760:	2200      	movs	r2, #0
 8004762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f88c 	bl	8004884 <UART_WaitOnFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d021      	beq.n	80047b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004786:	653b      	str	r3, [r7, #80]	; 0x50
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004790:	647b      	str	r3, [r7, #68]	; 0x44
 8004792:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800479e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e6      	bne.n	8004772 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e062      	b.n	800487c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d149      	bne.n	8004858 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047cc:	2200      	movs	r2, #0
 80047ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f856 	bl	8004884 <UART_WaitOnFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d03c      	beq.n	8004858 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	623b      	str	r3, [r7, #32]
   return(result);
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fc:	633b      	str	r3, [r7, #48]	; 0x30
 80047fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e6      	bne.n	80047de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3308      	adds	r3, #8
 8004816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	e853 3f00 	ldrex	r3, [r3]
 800481e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0301 	bic.w	r3, r3, #1
 8004826:	64bb      	str	r3, [r7, #72]	; 0x48
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3308      	adds	r3, #8
 800482e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004830:	61fa      	str	r2, [r7, #28]
 8004832:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	69b9      	ldr	r1, [r7, #24]
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	617b      	str	r3, [r7, #20]
   return(result);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e5      	bne.n	8004810 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e011      	b.n	800487c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3758      	adds	r7, #88	; 0x58
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	4613      	mov	r3, r2
 8004892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004894:	e049      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d045      	beq.n	800492a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489e:	f7fd ffd9 	bl	8002854 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e048      	b.n	800494a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d031      	beq.n	800492a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d110      	bne.n	80048f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2208      	movs	r2, #8
 80048da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f838 	bl	8004952 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2208      	movs	r2, #8
 80048e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e029      	b.n	800494a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004904:	d111      	bne.n	800492a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800490e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f81e 	bl	8004952 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e00f      	b.n	800494a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4013      	ands	r3, r2
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	bf0c      	ite	eq
 800493a:	2301      	moveq	r3, #1
 800493c:	2300      	movne	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	429a      	cmp	r2, r3
 8004946:	d0a6      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004952:	b480      	push	{r7}
 8004954:	b095      	sub	sp, #84	; 0x54
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004978:	643b      	str	r3, [r7, #64]	; 0x40
 800497a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800497e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e6      	bne.n	800495a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3308      	adds	r3, #8
 8004992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	61fb      	str	r3, [r7, #28]
   return(result);
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3308      	adds	r3, #8
 80049aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d118      	bne.n	80049fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f023 0310 	bic.w	r3, r3, #16
 80049dc:	647b      	str	r3, [r7, #68]	; 0x44
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6979      	ldr	r1, [r7, #20]
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	613b      	str	r3, [r7, #16]
   return(result);
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e6      	bne.n	80049c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a0e:	bf00      	nop
 8004a10:	3754      	adds	r7, #84	; 0x54
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <atof>:
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	f000 be0c 	b.w	8005638 <strtod>

08004a20 <sulp>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	4604      	mov	r4, r0
 8004a24:	460d      	mov	r5, r1
 8004a26:	ec45 4b10 	vmov	d0, r4, r5
 8004a2a:	4616      	mov	r6, r2
 8004a2c:	f003 fabc 	bl	8007fa8 <__ulp>
 8004a30:	ec51 0b10 	vmov	r0, r1, d0
 8004a34:	b17e      	cbz	r6, 8004a56 <sulp+0x36>
 8004a36:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004a3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	dd09      	ble.n	8004a56 <sulp+0x36>
 8004a42:	051b      	lsls	r3, r3, #20
 8004a44:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004a48:	2400      	movs	r4, #0
 8004a4a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004a4e:	4622      	mov	r2, r4
 8004a50:	462b      	mov	r3, r5
 8004a52:	f7fb fdd1 	bl	80005f8 <__aeabi_dmul>
 8004a56:	bd70      	pop	{r4, r5, r6, pc}

08004a58 <_strtod_l>:
 8004a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5c:	ed2d 8b02 	vpush	{d8}
 8004a60:	b09b      	sub	sp, #108	; 0x6c
 8004a62:	4604      	mov	r4, r0
 8004a64:	9213      	str	r2, [sp, #76]	; 0x4c
 8004a66:	2200      	movs	r2, #0
 8004a68:	9216      	str	r2, [sp, #88]	; 0x58
 8004a6a:	460d      	mov	r5, r1
 8004a6c:	f04f 0800 	mov.w	r8, #0
 8004a70:	f04f 0900 	mov.w	r9, #0
 8004a74:	460a      	mov	r2, r1
 8004a76:	9215      	str	r2, [sp, #84]	; 0x54
 8004a78:	7811      	ldrb	r1, [r2, #0]
 8004a7a:	292b      	cmp	r1, #43	; 0x2b
 8004a7c:	d04c      	beq.n	8004b18 <_strtod_l+0xc0>
 8004a7e:	d83a      	bhi.n	8004af6 <_strtod_l+0x9e>
 8004a80:	290d      	cmp	r1, #13
 8004a82:	d834      	bhi.n	8004aee <_strtod_l+0x96>
 8004a84:	2908      	cmp	r1, #8
 8004a86:	d834      	bhi.n	8004af2 <_strtod_l+0x9a>
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	d03d      	beq.n	8004b08 <_strtod_l+0xb0>
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	920a      	str	r2, [sp, #40]	; 0x28
 8004a90:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004a92:	7832      	ldrb	r2, [r6, #0]
 8004a94:	2a30      	cmp	r2, #48	; 0x30
 8004a96:	f040 80b4 	bne.w	8004c02 <_strtod_l+0x1aa>
 8004a9a:	7872      	ldrb	r2, [r6, #1]
 8004a9c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004aa0:	2a58      	cmp	r2, #88	; 0x58
 8004aa2:	d170      	bne.n	8004b86 <_strtod_l+0x12e>
 8004aa4:	9302      	str	r3, [sp, #8]
 8004aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	ab16      	add	r3, sp, #88	; 0x58
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	4a8e      	ldr	r2, [pc, #568]	; (8004ce8 <_strtod_l+0x290>)
 8004ab0:	ab17      	add	r3, sp, #92	; 0x5c
 8004ab2:	a915      	add	r1, sp, #84	; 0x54
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f002 fb55 	bl	8007164 <__gethex>
 8004aba:	f010 070f 	ands.w	r7, r0, #15
 8004abe:	4605      	mov	r5, r0
 8004ac0:	d005      	beq.n	8004ace <_strtod_l+0x76>
 8004ac2:	2f06      	cmp	r7, #6
 8004ac4:	d12a      	bne.n	8004b1c <_strtod_l+0xc4>
 8004ac6:	3601      	adds	r6, #1
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9615      	str	r6, [sp, #84]	; 0x54
 8004acc:	930a      	str	r3, [sp, #40]	; 0x28
 8004ace:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f040 857f 	bne.w	80055d4 <_strtod_l+0xb7c>
 8004ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ad8:	b1db      	cbz	r3, 8004b12 <_strtod_l+0xba>
 8004ada:	4642      	mov	r2, r8
 8004adc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004ae0:	ec43 2b10 	vmov	d0, r2, r3
 8004ae4:	b01b      	add	sp, #108	; 0x6c
 8004ae6:	ecbd 8b02 	vpop	{d8}
 8004aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aee:	2920      	cmp	r1, #32
 8004af0:	d1cc      	bne.n	8004a8c <_strtod_l+0x34>
 8004af2:	3201      	adds	r2, #1
 8004af4:	e7bf      	b.n	8004a76 <_strtod_l+0x1e>
 8004af6:	292d      	cmp	r1, #45	; 0x2d
 8004af8:	d1c8      	bne.n	8004a8c <_strtod_l+0x34>
 8004afa:	2101      	movs	r1, #1
 8004afc:	910a      	str	r1, [sp, #40]	; 0x28
 8004afe:	1c51      	adds	r1, r2, #1
 8004b00:	9115      	str	r1, [sp, #84]	; 0x54
 8004b02:	7852      	ldrb	r2, [r2, #1]
 8004b04:	2a00      	cmp	r2, #0
 8004b06:	d1c3      	bne.n	8004a90 <_strtod_l+0x38>
 8004b08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004b0a:	9515      	str	r5, [sp, #84]	; 0x54
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f040 855f 	bne.w	80055d0 <_strtod_l+0xb78>
 8004b12:	4642      	mov	r2, r8
 8004b14:	464b      	mov	r3, r9
 8004b16:	e7e3      	b.n	8004ae0 <_strtod_l+0x88>
 8004b18:	2100      	movs	r1, #0
 8004b1a:	e7ef      	b.n	8004afc <_strtod_l+0xa4>
 8004b1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004b1e:	b13a      	cbz	r2, 8004b30 <_strtod_l+0xd8>
 8004b20:	2135      	movs	r1, #53	; 0x35
 8004b22:	a818      	add	r0, sp, #96	; 0x60
 8004b24:	f003 fb3d 	bl	80081a2 <__copybits>
 8004b28:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f002 ff10 	bl	8007950 <_Bfree>
 8004b30:	3f01      	subs	r7, #1
 8004b32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004b34:	2f04      	cmp	r7, #4
 8004b36:	d806      	bhi.n	8004b46 <_strtod_l+0xee>
 8004b38:	e8df f007 	tbb	[pc, r7]
 8004b3c:	201d0314 	.word	0x201d0314
 8004b40:	14          	.byte	0x14
 8004b41:	00          	.byte	0x00
 8004b42:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8004b46:	05e9      	lsls	r1, r5, #23
 8004b48:	bf48      	it	mi
 8004b4a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8004b4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b52:	0d1b      	lsrs	r3, r3, #20
 8004b54:	051b      	lsls	r3, r3, #20
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1b9      	bne.n	8004ace <_strtod_l+0x76>
 8004b5a:	f001 fb8f 	bl	800627c <__errno>
 8004b5e:	2322      	movs	r3, #34	; 0x22
 8004b60:	6003      	str	r3, [r0, #0]
 8004b62:	e7b4      	b.n	8004ace <_strtod_l+0x76>
 8004b64:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8004b68:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004b6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004b74:	e7e7      	b.n	8004b46 <_strtod_l+0xee>
 8004b76:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004cf0 <_strtod_l+0x298>
 8004b7a:	e7e4      	b.n	8004b46 <_strtod_l+0xee>
 8004b7c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004b80:	f04f 38ff 	mov.w	r8, #4294967295
 8004b84:	e7df      	b.n	8004b46 <_strtod_l+0xee>
 8004b86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	9215      	str	r2, [sp, #84]	; 0x54
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	2b30      	cmp	r3, #48	; 0x30
 8004b90:	d0f9      	beq.n	8004b86 <_strtod_l+0x12e>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d09b      	beq.n	8004ace <_strtod_l+0x76>
 8004b96:	2301      	movs	r3, #1
 8004b98:	f04f 0a00 	mov.w	sl, #0
 8004b9c:	9304      	str	r3, [sp, #16]
 8004b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ba2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004ba6:	46d3      	mov	fp, sl
 8004ba8:	220a      	movs	r2, #10
 8004baa:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004bac:	7806      	ldrb	r6, [r0, #0]
 8004bae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004bb2:	b2d9      	uxtb	r1, r3
 8004bb4:	2909      	cmp	r1, #9
 8004bb6:	d926      	bls.n	8004c06 <_strtod_l+0x1ae>
 8004bb8:	494c      	ldr	r1, [pc, #304]	; (8004cec <_strtod_l+0x294>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f001 fb01 	bl	80061c2 <strncmp>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d030      	beq.n	8004c26 <_strtod_l+0x1ce>
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	4632      	mov	r2, r6
 8004bc8:	9005      	str	r0, [sp, #20]
 8004bca:	465e      	mov	r6, fp
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2a65      	cmp	r2, #101	; 0x65
 8004bd0:	d001      	beq.n	8004bd6 <_strtod_l+0x17e>
 8004bd2:	2a45      	cmp	r2, #69	; 0x45
 8004bd4:	d113      	bne.n	8004bfe <_strtod_l+0x1a6>
 8004bd6:	b91e      	cbnz	r6, 8004be0 <_strtod_l+0x188>
 8004bd8:	9a04      	ldr	r2, [sp, #16]
 8004bda:	4302      	orrs	r2, r0
 8004bdc:	d094      	beq.n	8004b08 <_strtod_l+0xb0>
 8004bde:	2600      	movs	r6, #0
 8004be0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004be2:	1c6a      	adds	r2, r5, #1
 8004be4:	9215      	str	r2, [sp, #84]	; 0x54
 8004be6:	786a      	ldrb	r2, [r5, #1]
 8004be8:	2a2b      	cmp	r2, #43	; 0x2b
 8004bea:	d074      	beq.n	8004cd6 <_strtod_l+0x27e>
 8004bec:	2a2d      	cmp	r2, #45	; 0x2d
 8004bee:	d078      	beq.n	8004ce2 <_strtod_l+0x28a>
 8004bf0:	f04f 0c00 	mov.w	ip, #0
 8004bf4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004bf8:	2909      	cmp	r1, #9
 8004bfa:	d97f      	bls.n	8004cfc <_strtod_l+0x2a4>
 8004bfc:	9515      	str	r5, [sp, #84]	; 0x54
 8004bfe:	2700      	movs	r7, #0
 8004c00:	e09e      	b.n	8004d40 <_strtod_l+0x2e8>
 8004c02:	2300      	movs	r3, #0
 8004c04:	e7c8      	b.n	8004b98 <_strtod_l+0x140>
 8004c06:	f1bb 0f08 	cmp.w	fp, #8
 8004c0a:	bfd8      	it	le
 8004c0c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004c0e:	f100 0001 	add.w	r0, r0, #1
 8004c12:	bfda      	itte	le
 8004c14:	fb02 3301 	mlale	r3, r2, r1, r3
 8004c18:	9309      	strle	r3, [sp, #36]	; 0x24
 8004c1a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8004c1e:	f10b 0b01 	add.w	fp, fp, #1
 8004c22:	9015      	str	r0, [sp, #84]	; 0x54
 8004c24:	e7c1      	b.n	8004baa <_strtod_l+0x152>
 8004c26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	9215      	str	r2, [sp, #84]	; 0x54
 8004c2c:	785a      	ldrb	r2, [r3, #1]
 8004c2e:	f1bb 0f00 	cmp.w	fp, #0
 8004c32:	d037      	beq.n	8004ca4 <_strtod_l+0x24c>
 8004c34:	9005      	str	r0, [sp, #20]
 8004c36:	465e      	mov	r6, fp
 8004c38:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004c3c:	2b09      	cmp	r3, #9
 8004c3e:	d912      	bls.n	8004c66 <_strtod_l+0x20e>
 8004c40:	2301      	movs	r3, #1
 8004c42:	e7c4      	b.n	8004bce <_strtod_l+0x176>
 8004c44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	9215      	str	r2, [sp, #84]	; 0x54
 8004c4a:	785a      	ldrb	r2, [r3, #1]
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	2a30      	cmp	r2, #48	; 0x30
 8004c50:	d0f8      	beq.n	8004c44 <_strtod_l+0x1ec>
 8004c52:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	f200 84c1 	bhi.w	80055de <_strtod_l+0xb86>
 8004c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c5e:	9005      	str	r0, [sp, #20]
 8004c60:	2000      	movs	r0, #0
 8004c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c64:	4606      	mov	r6, r0
 8004c66:	3a30      	subs	r2, #48	; 0x30
 8004c68:	f100 0301 	add.w	r3, r0, #1
 8004c6c:	d014      	beq.n	8004c98 <_strtod_l+0x240>
 8004c6e:	9905      	ldr	r1, [sp, #20]
 8004c70:	4419      	add	r1, r3
 8004c72:	9105      	str	r1, [sp, #20]
 8004c74:	4633      	mov	r3, r6
 8004c76:	eb00 0c06 	add.w	ip, r0, r6
 8004c7a:	210a      	movs	r1, #10
 8004c7c:	4563      	cmp	r3, ip
 8004c7e:	d113      	bne.n	8004ca8 <_strtod_l+0x250>
 8004c80:	1833      	adds	r3, r6, r0
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	f106 0601 	add.w	r6, r6, #1
 8004c88:	4406      	add	r6, r0
 8004c8a:	dc1a      	bgt.n	8004cc2 <_strtod_l+0x26a>
 8004c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c8e:	230a      	movs	r3, #10
 8004c90:	fb03 2301 	mla	r3, r3, r1, r2
 8004c94:	9309      	str	r3, [sp, #36]	; 0x24
 8004c96:	2300      	movs	r3, #0
 8004c98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c9a:	1c51      	adds	r1, r2, #1
 8004c9c:	9115      	str	r1, [sp, #84]	; 0x54
 8004c9e:	7852      	ldrb	r2, [r2, #1]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	e7c9      	b.n	8004c38 <_strtod_l+0x1e0>
 8004ca4:	4658      	mov	r0, fp
 8004ca6:	e7d2      	b.n	8004c4e <_strtod_l+0x1f6>
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	f103 0301 	add.w	r3, r3, #1
 8004cae:	dc03      	bgt.n	8004cb8 <_strtod_l+0x260>
 8004cb0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004cb2:	434f      	muls	r7, r1
 8004cb4:	9709      	str	r7, [sp, #36]	; 0x24
 8004cb6:	e7e1      	b.n	8004c7c <_strtod_l+0x224>
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	bfd8      	it	le
 8004cbc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8004cc0:	e7dc      	b.n	8004c7c <_strtod_l+0x224>
 8004cc2:	2e10      	cmp	r6, #16
 8004cc4:	bfdc      	itt	le
 8004cc6:	230a      	movle	r3, #10
 8004cc8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8004ccc:	e7e3      	b.n	8004c96 <_strtod_l+0x23e>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9305      	str	r3, [sp, #20]
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e780      	b.n	8004bd8 <_strtod_l+0x180>
 8004cd6:	f04f 0c00 	mov.w	ip, #0
 8004cda:	1caa      	adds	r2, r5, #2
 8004cdc:	9215      	str	r2, [sp, #84]	; 0x54
 8004cde:	78aa      	ldrb	r2, [r5, #2]
 8004ce0:	e788      	b.n	8004bf4 <_strtod_l+0x19c>
 8004ce2:	f04f 0c01 	mov.w	ip, #1
 8004ce6:	e7f8      	b.n	8004cda <_strtod_l+0x282>
 8004ce8:	08009d30 	.word	0x08009d30
 8004cec:	08009d2c 	.word	0x08009d2c
 8004cf0:	7ff00000 	.word	0x7ff00000
 8004cf4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004cf6:	1c51      	adds	r1, r2, #1
 8004cf8:	9115      	str	r1, [sp, #84]	; 0x54
 8004cfa:	7852      	ldrb	r2, [r2, #1]
 8004cfc:	2a30      	cmp	r2, #48	; 0x30
 8004cfe:	d0f9      	beq.n	8004cf4 <_strtod_l+0x29c>
 8004d00:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004d04:	2908      	cmp	r1, #8
 8004d06:	f63f af7a 	bhi.w	8004bfe <_strtod_l+0x1a6>
 8004d0a:	3a30      	subs	r2, #48	; 0x30
 8004d0c:	9208      	str	r2, [sp, #32]
 8004d0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d10:	920c      	str	r2, [sp, #48]	; 0x30
 8004d12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d14:	1c57      	adds	r7, r2, #1
 8004d16:	9715      	str	r7, [sp, #84]	; 0x54
 8004d18:	7852      	ldrb	r2, [r2, #1]
 8004d1a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004d1e:	f1be 0f09 	cmp.w	lr, #9
 8004d22:	d938      	bls.n	8004d96 <_strtod_l+0x33e>
 8004d24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d26:	1a7f      	subs	r7, r7, r1
 8004d28:	2f08      	cmp	r7, #8
 8004d2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004d2e:	dc03      	bgt.n	8004d38 <_strtod_l+0x2e0>
 8004d30:	9908      	ldr	r1, [sp, #32]
 8004d32:	428f      	cmp	r7, r1
 8004d34:	bfa8      	it	ge
 8004d36:	460f      	movge	r7, r1
 8004d38:	f1bc 0f00 	cmp.w	ip, #0
 8004d3c:	d000      	beq.n	8004d40 <_strtod_l+0x2e8>
 8004d3e:	427f      	negs	r7, r7
 8004d40:	2e00      	cmp	r6, #0
 8004d42:	d14f      	bne.n	8004de4 <_strtod_l+0x38c>
 8004d44:	9904      	ldr	r1, [sp, #16]
 8004d46:	4301      	orrs	r1, r0
 8004d48:	f47f aec1 	bne.w	8004ace <_strtod_l+0x76>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f47f aedb 	bne.w	8004b08 <_strtod_l+0xb0>
 8004d52:	2a69      	cmp	r2, #105	; 0x69
 8004d54:	d029      	beq.n	8004daa <_strtod_l+0x352>
 8004d56:	dc26      	bgt.n	8004da6 <_strtod_l+0x34e>
 8004d58:	2a49      	cmp	r2, #73	; 0x49
 8004d5a:	d026      	beq.n	8004daa <_strtod_l+0x352>
 8004d5c:	2a4e      	cmp	r2, #78	; 0x4e
 8004d5e:	f47f aed3 	bne.w	8004b08 <_strtod_l+0xb0>
 8004d62:	499b      	ldr	r1, [pc, #620]	; (8004fd0 <_strtod_l+0x578>)
 8004d64:	a815      	add	r0, sp, #84	; 0x54
 8004d66:	f002 fc3d 	bl	80075e4 <__match>
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	f43f aecc 	beq.w	8004b08 <_strtod_l+0xb0>
 8004d70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b28      	cmp	r3, #40	; 0x28
 8004d76:	d12f      	bne.n	8004dd8 <_strtod_l+0x380>
 8004d78:	4996      	ldr	r1, [pc, #600]	; (8004fd4 <_strtod_l+0x57c>)
 8004d7a:	aa18      	add	r2, sp, #96	; 0x60
 8004d7c:	a815      	add	r0, sp, #84	; 0x54
 8004d7e:	f002 fc45 	bl	800760c <__hexnan>
 8004d82:	2805      	cmp	r0, #5
 8004d84:	d128      	bne.n	8004dd8 <_strtod_l+0x380>
 8004d86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004d90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004d94:	e69b      	b.n	8004ace <_strtod_l+0x76>
 8004d96:	9f08      	ldr	r7, [sp, #32]
 8004d98:	210a      	movs	r1, #10
 8004d9a:	fb01 2107 	mla	r1, r1, r7, r2
 8004d9e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004da2:	9208      	str	r2, [sp, #32]
 8004da4:	e7b5      	b.n	8004d12 <_strtod_l+0x2ba>
 8004da6:	2a6e      	cmp	r2, #110	; 0x6e
 8004da8:	e7d9      	b.n	8004d5e <_strtod_l+0x306>
 8004daa:	498b      	ldr	r1, [pc, #556]	; (8004fd8 <_strtod_l+0x580>)
 8004dac:	a815      	add	r0, sp, #84	; 0x54
 8004dae:	f002 fc19 	bl	80075e4 <__match>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	f43f aea8 	beq.w	8004b08 <_strtod_l+0xb0>
 8004db8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004dba:	4988      	ldr	r1, [pc, #544]	; (8004fdc <_strtod_l+0x584>)
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	a815      	add	r0, sp, #84	; 0x54
 8004dc0:	9315      	str	r3, [sp, #84]	; 0x54
 8004dc2:	f002 fc0f 	bl	80075e4 <__match>
 8004dc6:	b910      	cbnz	r0, 8004dce <_strtod_l+0x376>
 8004dc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004dca:	3301      	adds	r3, #1
 8004dcc:	9315      	str	r3, [sp, #84]	; 0x54
 8004dce:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8004fec <_strtod_l+0x594>
 8004dd2:	f04f 0800 	mov.w	r8, #0
 8004dd6:	e67a      	b.n	8004ace <_strtod_l+0x76>
 8004dd8:	4881      	ldr	r0, [pc, #516]	; (8004fe0 <_strtod_l+0x588>)
 8004dda:	f001 fa8d 	bl	80062f8 <nan>
 8004dde:	ec59 8b10 	vmov	r8, r9, d0
 8004de2:	e674      	b.n	8004ace <_strtod_l+0x76>
 8004de4:	9b05      	ldr	r3, [sp, #20]
 8004de6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de8:	1afb      	subs	r3, r7, r3
 8004dea:	f1bb 0f00 	cmp.w	fp, #0
 8004dee:	bf08      	it	eq
 8004df0:	46b3      	moveq	fp, r6
 8004df2:	2e10      	cmp	r6, #16
 8004df4:	9308      	str	r3, [sp, #32]
 8004df6:	4635      	mov	r5, r6
 8004df8:	bfa8      	it	ge
 8004dfa:	2510      	movge	r5, #16
 8004dfc:	f7fb fb82 	bl	8000504 <__aeabi_ui2d>
 8004e00:	2e09      	cmp	r6, #9
 8004e02:	4680      	mov	r8, r0
 8004e04:	4689      	mov	r9, r1
 8004e06:	dd13      	ble.n	8004e30 <_strtod_l+0x3d8>
 8004e08:	4b76      	ldr	r3, [pc, #472]	; (8004fe4 <_strtod_l+0x58c>)
 8004e0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004e0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004e12:	f7fb fbf1 	bl	80005f8 <__aeabi_dmul>
 8004e16:	4680      	mov	r8, r0
 8004e18:	4650      	mov	r0, sl
 8004e1a:	4689      	mov	r9, r1
 8004e1c:	f7fb fb72 	bl	8000504 <__aeabi_ui2d>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4640      	mov	r0, r8
 8004e26:	4649      	mov	r1, r9
 8004e28:	f7fb fa30 	bl	800028c <__adddf3>
 8004e2c:	4680      	mov	r8, r0
 8004e2e:	4689      	mov	r9, r1
 8004e30:	2e0f      	cmp	r6, #15
 8004e32:	dc38      	bgt.n	8004ea6 <_strtod_l+0x44e>
 8004e34:	9b08      	ldr	r3, [sp, #32]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f43f ae49 	beq.w	8004ace <_strtod_l+0x76>
 8004e3c:	dd24      	ble.n	8004e88 <_strtod_l+0x430>
 8004e3e:	2b16      	cmp	r3, #22
 8004e40:	dc0b      	bgt.n	8004e5a <_strtod_l+0x402>
 8004e42:	4968      	ldr	r1, [pc, #416]	; (8004fe4 <_strtod_l+0x58c>)
 8004e44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	464b      	mov	r3, r9
 8004e50:	f7fb fbd2 	bl	80005f8 <__aeabi_dmul>
 8004e54:	4680      	mov	r8, r0
 8004e56:	4689      	mov	r9, r1
 8004e58:	e639      	b.n	8004ace <_strtod_l+0x76>
 8004e5a:	9a08      	ldr	r2, [sp, #32]
 8004e5c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8004e60:	4293      	cmp	r3, r2
 8004e62:	db20      	blt.n	8004ea6 <_strtod_l+0x44e>
 8004e64:	4c5f      	ldr	r4, [pc, #380]	; (8004fe4 <_strtod_l+0x58c>)
 8004e66:	f1c6 060f 	rsb	r6, r6, #15
 8004e6a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8004e6e:	4642      	mov	r2, r8
 8004e70:	464b      	mov	r3, r9
 8004e72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e76:	f7fb fbbf 	bl	80005f8 <__aeabi_dmul>
 8004e7a:	9b08      	ldr	r3, [sp, #32]
 8004e7c:	1b9e      	subs	r6, r3, r6
 8004e7e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8004e82:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004e86:	e7e3      	b.n	8004e50 <_strtod_l+0x3f8>
 8004e88:	9b08      	ldr	r3, [sp, #32]
 8004e8a:	3316      	adds	r3, #22
 8004e8c:	db0b      	blt.n	8004ea6 <_strtod_l+0x44e>
 8004e8e:	9b05      	ldr	r3, [sp, #20]
 8004e90:	1bdf      	subs	r7, r3, r7
 8004e92:	4b54      	ldr	r3, [pc, #336]	; (8004fe4 <_strtod_l+0x58c>)
 8004e94:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e9c:	4640      	mov	r0, r8
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	f7fb fcd4 	bl	800084c <__aeabi_ddiv>
 8004ea4:	e7d6      	b.n	8004e54 <_strtod_l+0x3fc>
 8004ea6:	9b08      	ldr	r3, [sp, #32]
 8004ea8:	1b75      	subs	r5, r6, r5
 8004eaa:	441d      	add	r5, r3
 8004eac:	2d00      	cmp	r5, #0
 8004eae:	dd70      	ble.n	8004f92 <_strtod_l+0x53a>
 8004eb0:	f015 030f 	ands.w	r3, r5, #15
 8004eb4:	d00a      	beq.n	8004ecc <_strtod_l+0x474>
 8004eb6:	494b      	ldr	r1, [pc, #300]	; (8004fe4 <_strtod_l+0x58c>)
 8004eb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ec4:	f7fb fb98 	bl	80005f8 <__aeabi_dmul>
 8004ec8:	4680      	mov	r8, r0
 8004eca:	4689      	mov	r9, r1
 8004ecc:	f035 050f 	bics.w	r5, r5, #15
 8004ed0:	d04d      	beq.n	8004f6e <_strtod_l+0x516>
 8004ed2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8004ed6:	dd22      	ble.n	8004f1e <_strtod_l+0x4c6>
 8004ed8:	2500      	movs	r5, #0
 8004eda:	46ab      	mov	fp, r5
 8004edc:	9509      	str	r5, [sp, #36]	; 0x24
 8004ede:	9505      	str	r5, [sp, #20]
 8004ee0:	2322      	movs	r3, #34	; 0x22
 8004ee2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004fec <_strtod_l+0x594>
 8004ee6:	6023      	str	r3, [r4, #0]
 8004ee8:	f04f 0800 	mov.w	r8, #0
 8004eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f43f aded 	beq.w	8004ace <_strtod_l+0x76>
 8004ef4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f002 fd2a 	bl	8007950 <_Bfree>
 8004efc:	9905      	ldr	r1, [sp, #20]
 8004efe:	4620      	mov	r0, r4
 8004f00:	f002 fd26 	bl	8007950 <_Bfree>
 8004f04:	4659      	mov	r1, fp
 8004f06:	4620      	mov	r0, r4
 8004f08:	f002 fd22 	bl	8007950 <_Bfree>
 8004f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f002 fd1e 	bl	8007950 <_Bfree>
 8004f14:	4629      	mov	r1, r5
 8004f16:	4620      	mov	r0, r4
 8004f18:	f002 fd1a 	bl	8007950 <_Bfree>
 8004f1c:	e5d7      	b.n	8004ace <_strtod_l+0x76>
 8004f1e:	4b32      	ldr	r3, [pc, #200]	; (8004fe8 <_strtod_l+0x590>)
 8004f20:	9304      	str	r3, [sp, #16]
 8004f22:	2300      	movs	r3, #0
 8004f24:	112d      	asrs	r5, r5, #4
 8004f26:	4640      	mov	r0, r8
 8004f28:	4649      	mov	r1, r9
 8004f2a:	469a      	mov	sl, r3
 8004f2c:	2d01      	cmp	r5, #1
 8004f2e:	dc21      	bgt.n	8004f74 <_strtod_l+0x51c>
 8004f30:	b10b      	cbz	r3, 8004f36 <_strtod_l+0x4de>
 8004f32:	4680      	mov	r8, r0
 8004f34:	4689      	mov	r9, r1
 8004f36:	492c      	ldr	r1, [pc, #176]	; (8004fe8 <_strtod_l+0x590>)
 8004f38:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004f3c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f48:	f7fb fb56 	bl	80005f8 <__aeabi_dmul>
 8004f4c:	4b27      	ldr	r3, [pc, #156]	; (8004fec <_strtod_l+0x594>)
 8004f4e:	460a      	mov	r2, r1
 8004f50:	400b      	ands	r3, r1
 8004f52:	4927      	ldr	r1, [pc, #156]	; (8004ff0 <_strtod_l+0x598>)
 8004f54:	428b      	cmp	r3, r1
 8004f56:	4680      	mov	r8, r0
 8004f58:	d8be      	bhi.n	8004ed8 <_strtod_l+0x480>
 8004f5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004f5e:	428b      	cmp	r3, r1
 8004f60:	bf86      	itte	hi
 8004f62:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8004ff4 <_strtod_l+0x59c>
 8004f66:	f04f 38ff 	movhi.w	r8, #4294967295
 8004f6a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004f6e:	2300      	movs	r3, #0
 8004f70:	9304      	str	r3, [sp, #16]
 8004f72:	e07b      	b.n	800506c <_strtod_l+0x614>
 8004f74:	07ea      	lsls	r2, r5, #31
 8004f76:	d505      	bpl.n	8004f84 <_strtod_l+0x52c>
 8004f78:	9b04      	ldr	r3, [sp, #16]
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f7fb fb3b 	bl	80005f8 <__aeabi_dmul>
 8004f82:	2301      	movs	r3, #1
 8004f84:	9a04      	ldr	r2, [sp, #16]
 8004f86:	3208      	adds	r2, #8
 8004f88:	f10a 0a01 	add.w	sl, sl, #1
 8004f8c:	106d      	asrs	r5, r5, #1
 8004f8e:	9204      	str	r2, [sp, #16]
 8004f90:	e7cc      	b.n	8004f2c <_strtod_l+0x4d4>
 8004f92:	d0ec      	beq.n	8004f6e <_strtod_l+0x516>
 8004f94:	426d      	negs	r5, r5
 8004f96:	f015 020f 	ands.w	r2, r5, #15
 8004f9a:	d00a      	beq.n	8004fb2 <_strtod_l+0x55a>
 8004f9c:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <_strtod_l+0x58c>)
 8004f9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f7fb fc4f 	bl	800084c <__aeabi_ddiv>
 8004fae:	4680      	mov	r8, r0
 8004fb0:	4689      	mov	r9, r1
 8004fb2:	112d      	asrs	r5, r5, #4
 8004fb4:	d0db      	beq.n	8004f6e <_strtod_l+0x516>
 8004fb6:	2d1f      	cmp	r5, #31
 8004fb8:	dd1e      	ble.n	8004ff8 <_strtod_l+0x5a0>
 8004fba:	2500      	movs	r5, #0
 8004fbc:	46ab      	mov	fp, r5
 8004fbe:	9509      	str	r5, [sp, #36]	; 0x24
 8004fc0:	9505      	str	r5, [sp, #20]
 8004fc2:	2322      	movs	r3, #34	; 0x22
 8004fc4:	f04f 0800 	mov.w	r8, #0
 8004fc8:	f04f 0900 	mov.w	r9, #0
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	e78d      	b.n	8004eec <_strtod_l+0x494>
 8004fd0:	08009d8d 	.word	0x08009d8d
 8004fd4:	08009d44 	.word	0x08009d44
 8004fd8:	08009d85 	.word	0x08009d85
 8004fdc:	08009dbf 	.word	0x08009dbf
 8004fe0:	0800a151 	.word	0x0800a151
 8004fe4:	08009f30 	.word	0x08009f30
 8004fe8:	08009f08 	.word	0x08009f08
 8004fec:	7ff00000 	.word	0x7ff00000
 8004ff0:	7ca00000 	.word	0x7ca00000
 8004ff4:	7fefffff 	.word	0x7fefffff
 8004ff8:	f015 0310 	ands.w	r3, r5, #16
 8004ffc:	bf18      	it	ne
 8004ffe:	236a      	movne	r3, #106	; 0x6a
 8005000:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80053a4 <_strtod_l+0x94c>
 8005004:	9304      	str	r3, [sp, #16]
 8005006:	4640      	mov	r0, r8
 8005008:	4649      	mov	r1, r9
 800500a:	2300      	movs	r3, #0
 800500c:	07ea      	lsls	r2, r5, #31
 800500e:	d504      	bpl.n	800501a <_strtod_l+0x5c2>
 8005010:	e9da 2300 	ldrd	r2, r3, [sl]
 8005014:	f7fb faf0 	bl	80005f8 <__aeabi_dmul>
 8005018:	2301      	movs	r3, #1
 800501a:	106d      	asrs	r5, r5, #1
 800501c:	f10a 0a08 	add.w	sl, sl, #8
 8005020:	d1f4      	bne.n	800500c <_strtod_l+0x5b4>
 8005022:	b10b      	cbz	r3, 8005028 <_strtod_l+0x5d0>
 8005024:	4680      	mov	r8, r0
 8005026:	4689      	mov	r9, r1
 8005028:	9b04      	ldr	r3, [sp, #16]
 800502a:	b1bb      	cbz	r3, 800505c <_strtod_l+0x604>
 800502c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005030:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005034:	2b00      	cmp	r3, #0
 8005036:	4649      	mov	r1, r9
 8005038:	dd10      	ble.n	800505c <_strtod_l+0x604>
 800503a:	2b1f      	cmp	r3, #31
 800503c:	f340 811e 	ble.w	800527c <_strtod_l+0x824>
 8005040:	2b34      	cmp	r3, #52	; 0x34
 8005042:	bfde      	ittt	le
 8005044:	f04f 33ff 	movle.w	r3, #4294967295
 8005048:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800504c:	4093      	lslle	r3, r2
 800504e:	f04f 0800 	mov.w	r8, #0
 8005052:	bfcc      	ite	gt
 8005054:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005058:	ea03 0901 	andle.w	r9, r3, r1
 800505c:	2200      	movs	r2, #0
 800505e:	2300      	movs	r3, #0
 8005060:	4640      	mov	r0, r8
 8005062:	4649      	mov	r1, r9
 8005064:	f7fb fd30 	bl	8000ac8 <__aeabi_dcmpeq>
 8005068:	2800      	cmp	r0, #0
 800506a:	d1a6      	bne.n	8004fba <_strtod_l+0x562>
 800506c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005072:	4633      	mov	r3, r6
 8005074:	465a      	mov	r2, fp
 8005076:	4620      	mov	r0, r4
 8005078:	f002 fcd2 	bl	8007a20 <__s2b>
 800507c:	9009      	str	r0, [sp, #36]	; 0x24
 800507e:	2800      	cmp	r0, #0
 8005080:	f43f af2a 	beq.w	8004ed8 <_strtod_l+0x480>
 8005084:	9a08      	ldr	r2, [sp, #32]
 8005086:	9b05      	ldr	r3, [sp, #20]
 8005088:	2a00      	cmp	r2, #0
 800508a:	eba3 0307 	sub.w	r3, r3, r7
 800508e:	bfa8      	it	ge
 8005090:	2300      	movge	r3, #0
 8005092:	930c      	str	r3, [sp, #48]	; 0x30
 8005094:	2500      	movs	r5, #0
 8005096:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800509a:	9312      	str	r3, [sp, #72]	; 0x48
 800509c:	46ab      	mov	fp, r5
 800509e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a0:	4620      	mov	r0, r4
 80050a2:	6859      	ldr	r1, [r3, #4]
 80050a4:	f002 fc14 	bl	80078d0 <_Balloc>
 80050a8:	9005      	str	r0, [sp, #20]
 80050aa:	2800      	cmp	r0, #0
 80050ac:	f43f af18 	beq.w	8004ee0 <_strtod_l+0x488>
 80050b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	3202      	adds	r2, #2
 80050b6:	f103 010c 	add.w	r1, r3, #12
 80050ba:	0092      	lsls	r2, r2, #2
 80050bc:	300c      	adds	r0, #12
 80050be:	f001 f90a 	bl	80062d6 <memcpy>
 80050c2:	ec49 8b10 	vmov	d0, r8, r9
 80050c6:	aa18      	add	r2, sp, #96	; 0x60
 80050c8:	a917      	add	r1, sp, #92	; 0x5c
 80050ca:	4620      	mov	r0, r4
 80050cc:	f002 ffdc 	bl	8008088 <__d2b>
 80050d0:	ec49 8b18 	vmov	d8, r8, r9
 80050d4:	9016      	str	r0, [sp, #88]	; 0x58
 80050d6:	2800      	cmp	r0, #0
 80050d8:	f43f af02 	beq.w	8004ee0 <_strtod_l+0x488>
 80050dc:	2101      	movs	r1, #1
 80050de:	4620      	mov	r0, r4
 80050e0:	f002 fd36 	bl	8007b50 <__i2b>
 80050e4:	4683      	mov	fp, r0
 80050e6:	2800      	cmp	r0, #0
 80050e8:	f43f aefa 	beq.w	8004ee0 <_strtod_l+0x488>
 80050ec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80050ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80050f0:	2e00      	cmp	r6, #0
 80050f2:	bfab      	itete	ge
 80050f4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80050f6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80050f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80050fa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80050fe:	bfac      	ite	ge
 8005100:	eb06 0a03 	addge.w	sl, r6, r3
 8005104:	1b9f      	sublt	r7, r3, r6
 8005106:	9b04      	ldr	r3, [sp, #16]
 8005108:	1af6      	subs	r6, r6, r3
 800510a:	4416      	add	r6, r2
 800510c:	4ba0      	ldr	r3, [pc, #640]	; (8005390 <_strtod_l+0x938>)
 800510e:	3e01      	subs	r6, #1
 8005110:	429e      	cmp	r6, r3
 8005112:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005116:	f280 80c4 	bge.w	80052a2 <_strtod_l+0x84a>
 800511a:	1b9b      	subs	r3, r3, r6
 800511c:	2b1f      	cmp	r3, #31
 800511e:	eba2 0203 	sub.w	r2, r2, r3
 8005122:	f04f 0101 	mov.w	r1, #1
 8005126:	f300 80b0 	bgt.w	800528a <_strtod_l+0x832>
 800512a:	fa01 f303 	lsl.w	r3, r1, r3
 800512e:	930e      	str	r3, [sp, #56]	; 0x38
 8005130:	2300      	movs	r3, #0
 8005132:	930d      	str	r3, [sp, #52]	; 0x34
 8005134:	eb0a 0602 	add.w	r6, sl, r2
 8005138:	9b04      	ldr	r3, [sp, #16]
 800513a:	45b2      	cmp	sl, r6
 800513c:	4417      	add	r7, r2
 800513e:	441f      	add	r7, r3
 8005140:	4653      	mov	r3, sl
 8005142:	bfa8      	it	ge
 8005144:	4633      	movge	r3, r6
 8005146:	42bb      	cmp	r3, r7
 8005148:	bfa8      	it	ge
 800514a:	463b      	movge	r3, r7
 800514c:	2b00      	cmp	r3, #0
 800514e:	bfc2      	ittt	gt
 8005150:	1af6      	subgt	r6, r6, r3
 8005152:	1aff      	subgt	r7, r7, r3
 8005154:	ebaa 0a03 	subgt.w	sl, sl, r3
 8005158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800515a:	2b00      	cmp	r3, #0
 800515c:	dd17      	ble.n	800518e <_strtod_l+0x736>
 800515e:	4659      	mov	r1, fp
 8005160:	461a      	mov	r2, r3
 8005162:	4620      	mov	r0, r4
 8005164:	f002 fdb4 	bl	8007cd0 <__pow5mult>
 8005168:	4683      	mov	fp, r0
 800516a:	2800      	cmp	r0, #0
 800516c:	f43f aeb8 	beq.w	8004ee0 <_strtod_l+0x488>
 8005170:	4601      	mov	r1, r0
 8005172:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005174:	4620      	mov	r0, r4
 8005176:	f002 fd01 	bl	8007b7c <__multiply>
 800517a:	900b      	str	r0, [sp, #44]	; 0x2c
 800517c:	2800      	cmp	r0, #0
 800517e:	f43f aeaf 	beq.w	8004ee0 <_strtod_l+0x488>
 8005182:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005184:	4620      	mov	r0, r4
 8005186:	f002 fbe3 	bl	8007950 <_Bfree>
 800518a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800518c:	9316      	str	r3, [sp, #88]	; 0x58
 800518e:	2e00      	cmp	r6, #0
 8005190:	f300 808c 	bgt.w	80052ac <_strtod_l+0x854>
 8005194:	9b08      	ldr	r3, [sp, #32]
 8005196:	2b00      	cmp	r3, #0
 8005198:	dd08      	ble.n	80051ac <_strtod_l+0x754>
 800519a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800519c:	9905      	ldr	r1, [sp, #20]
 800519e:	4620      	mov	r0, r4
 80051a0:	f002 fd96 	bl	8007cd0 <__pow5mult>
 80051a4:	9005      	str	r0, [sp, #20]
 80051a6:	2800      	cmp	r0, #0
 80051a8:	f43f ae9a 	beq.w	8004ee0 <_strtod_l+0x488>
 80051ac:	2f00      	cmp	r7, #0
 80051ae:	dd08      	ble.n	80051c2 <_strtod_l+0x76a>
 80051b0:	9905      	ldr	r1, [sp, #20]
 80051b2:	463a      	mov	r2, r7
 80051b4:	4620      	mov	r0, r4
 80051b6:	f002 fde5 	bl	8007d84 <__lshift>
 80051ba:	9005      	str	r0, [sp, #20]
 80051bc:	2800      	cmp	r0, #0
 80051be:	f43f ae8f 	beq.w	8004ee0 <_strtod_l+0x488>
 80051c2:	f1ba 0f00 	cmp.w	sl, #0
 80051c6:	dd08      	ble.n	80051da <_strtod_l+0x782>
 80051c8:	4659      	mov	r1, fp
 80051ca:	4652      	mov	r2, sl
 80051cc:	4620      	mov	r0, r4
 80051ce:	f002 fdd9 	bl	8007d84 <__lshift>
 80051d2:	4683      	mov	fp, r0
 80051d4:	2800      	cmp	r0, #0
 80051d6:	f43f ae83 	beq.w	8004ee0 <_strtod_l+0x488>
 80051da:	9a05      	ldr	r2, [sp, #20]
 80051dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80051de:	4620      	mov	r0, r4
 80051e0:	f002 fe58 	bl	8007e94 <__mdiff>
 80051e4:	4605      	mov	r5, r0
 80051e6:	2800      	cmp	r0, #0
 80051e8:	f43f ae7a 	beq.w	8004ee0 <_strtod_l+0x488>
 80051ec:	68c3      	ldr	r3, [r0, #12]
 80051ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80051f0:	2300      	movs	r3, #0
 80051f2:	60c3      	str	r3, [r0, #12]
 80051f4:	4659      	mov	r1, fp
 80051f6:	f002 fe31 	bl	8007e5c <__mcmp>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	da60      	bge.n	80052c0 <_strtod_l+0x868>
 80051fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005200:	ea53 0308 	orrs.w	r3, r3, r8
 8005204:	f040 8084 	bne.w	8005310 <_strtod_l+0x8b8>
 8005208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800520c:	2b00      	cmp	r3, #0
 800520e:	d17f      	bne.n	8005310 <_strtod_l+0x8b8>
 8005210:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005214:	0d1b      	lsrs	r3, r3, #20
 8005216:	051b      	lsls	r3, r3, #20
 8005218:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800521c:	d978      	bls.n	8005310 <_strtod_l+0x8b8>
 800521e:	696b      	ldr	r3, [r5, #20]
 8005220:	b913      	cbnz	r3, 8005228 <_strtod_l+0x7d0>
 8005222:	692b      	ldr	r3, [r5, #16]
 8005224:	2b01      	cmp	r3, #1
 8005226:	dd73      	ble.n	8005310 <_strtod_l+0x8b8>
 8005228:	4629      	mov	r1, r5
 800522a:	2201      	movs	r2, #1
 800522c:	4620      	mov	r0, r4
 800522e:	f002 fda9 	bl	8007d84 <__lshift>
 8005232:	4659      	mov	r1, fp
 8005234:	4605      	mov	r5, r0
 8005236:	f002 fe11 	bl	8007e5c <__mcmp>
 800523a:	2800      	cmp	r0, #0
 800523c:	dd68      	ble.n	8005310 <_strtod_l+0x8b8>
 800523e:	9904      	ldr	r1, [sp, #16]
 8005240:	4a54      	ldr	r2, [pc, #336]	; (8005394 <_strtod_l+0x93c>)
 8005242:	464b      	mov	r3, r9
 8005244:	2900      	cmp	r1, #0
 8005246:	f000 8084 	beq.w	8005352 <_strtod_l+0x8fa>
 800524a:	ea02 0109 	and.w	r1, r2, r9
 800524e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005252:	dc7e      	bgt.n	8005352 <_strtod_l+0x8fa>
 8005254:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005258:	f77f aeb3 	ble.w	8004fc2 <_strtod_l+0x56a>
 800525c:	4b4e      	ldr	r3, [pc, #312]	; (8005398 <_strtod_l+0x940>)
 800525e:	4640      	mov	r0, r8
 8005260:	4649      	mov	r1, r9
 8005262:	2200      	movs	r2, #0
 8005264:	f7fb f9c8 	bl	80005f8 <__aeabi_dmul>
 8005268:	4b4a      	ldr	r3, [pc, #296]	; (8005394 <_strtod_l+0x93c>)
 800526a:	400b      	ands	r3, r1
 800526c:	4680      	mov	r8, r0
 800526e:	4689      	mov	r9, r1
 8005270:	2b00      	cmp	r3, #0
 8005272:	f47f ae3f 	bne.w	8004ef4 <_strtod_l+0x49c>
 8005276:	2322      	movs	r3, #34	; 0x22
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	e63b      	b.n	8004ef4 <_strtod_l+0x49c>
 800527c:	f04f 32ff 	mov.w	r2, #4294967295
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	ea03 0808 	and.w	r8, r3, r8
 8005288:	e6e8      	b.n	800505c <_strtod_l+0x604>
 800528a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800528e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005292:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005296:	36e2      	adds	r6, #226	; 0xe2
 8005298:	fa01 f306 	lsl.w	r3, r1, r6
 800529c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80052a0:	e748      	b.n	8005134 <_strtod_l+0x6dc>
 80052a2:	2100      	movs	r1, #0
 80052a4:	2301      	movs	r3, #1
 80052a6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80052aa:	e743      	b.n	8005134 <_strtod_l+0x6dc>
 80052ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80052ae:	4632      	mov	r2, r6
 80052b0:	4620      	mov	r0, r4
 80052b2:	f002 fd67 	bl	8007d84 <__lshift>
 80052b6:	9016      	str	r0, [sp, #88]	; 0x58
 80052b8:	2800      	cmp	r0, #0
 80052ba:	f47f af6b 	bne.w	8005194 <_strtod_l+0x73c>
 80052be:	e60f      	b.n	8004ee0 <_strtod_l+0x488>
 80052c0:	46ca      	mov	sl, r9
 80052c2:	d171      	bne.n	80053a8 <_strtod_l+0x950>
 80052c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052ca:	b352      	cbz	r2, 8005322 <_strtod_l+0x8ca>
 80052cc:	4a33      	ldr	r2, [pc, #204]	; (800539c <_strtod_l+0x944>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d12a      	bne.n	8005328 <_strtod_l+0x8d0>
 80052d2:	9b04      	ldr	r3, [sp, #16]
 80052d4:	4641      	mov	r1, r8
 80052d6:	b1fb      	cbz	r3, 8005318 <_strtod_l+0x8c0>
 80052d8:	4b2e      	ldr	r3, [pc, #184]	; (8005394 <_strtod_l+0x93c>)
 80052da:	ea09 0303 	and.w	r3, r9, r3
 80052de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80052e2:	f04f 32ff 	mov.w	r2, #4294967295
 80052e6:	d81a      	bhi.n	800531e <_strtod_l+0x8c6>
 80052e8:	0d1b      	lsrs	r3, r3, #20
 80052ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	4299      	cmp	r1, r3
 80052f4:	d118      	bne.n	8005328 <_strtod_l+0x8d0>
 80052f6:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <_strtod_l+0x948>)
 80052f8:	459a      	cmp	sl, r3
 80052fa:	d102      	bne.n	8005302 <_strtod_l+0x8aa>
 80052fc:	3101      	adds	r1, #1
 80052fe:	f43f adef 	beq.w	8004ee0 <_strtod_l+0x488>
 8005302:	4b24      	ldr	r3, [pc, #144]	; (8005394 <_strtod_l+0x93c>)
 8005304:	ea0a 0303 	and.w	r3, sl, r3
 8005308:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800530c:	f04f 0800 	mov.w	r8, #0
 8005310:	9b04      	ldr	r3, [sp, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1a2      	bne.n	800525c <_strtod_l+0x804>
 8005316:	e5ed      	b.n	8004ef4 <_strtod_l+0x49c>
 8005318:	f04f 33ff 	mov.w	r3, #4294967295
 800531c:	e7e9      	b.n	80052f2 <_strtod_l+0x89a>
 800531e:	4613      	mov	r3, r2
 8005320:	e7e7      	b.n	80052f2 <_strtod_l+0x89a>
 8005322:	ea53 0308 	orrs.w	r3, r3, r8
 8005326:	d08a      	beq.n	800523e <_strtod_l+0x7e6>
 8005328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800532a:	b1e3      	cbz	r3, 8005366 <_strtod_l+0x90e>
 800532c:	ea13 0f0a 	tst.w	r3, sl
 8005330:	d0ee      	beq.n	8005310 <_strtod_l+0x8b8>
 8005332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005334:	9a04      	ldr	r2, [sp, #16]
 8005336:	4640      	mov	r0, r8
 8005338:	4649      	mov	r1, r9
 800533a:	b1c3      	cbz	r3, 800536e <_strtod_l+0x916>
 800533c:	f7ff fb70 	bl	8004a20 <sulp>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	ec51 0b18 	vmov	r0, r1, d8
 8005348:	f7fa ffa0 	bl	800028c <__adddf3>
 800534c:	4680      	mov	r8, r0
 800534e:	4689      	mov	r9, r1
 8005350:	e7de      	b.n	8005310 <_strtod_l+0x8b8>
 8005352:	4013      	ands	r3, r2
 8005354:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005358:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800535c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005360:	f04f 38ff 	mov.w	r8, #4294967295
 8005364:	e7d4      	b.n	8005310 <_strtod_l+0x8b8>
 8005366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005368:	ea13 0f08 	tst.w	r3, r8
 800536c:	e7e0      	b.n	8005330 <_strtod_l+0x8d8>
 800536e:	f7ff fb57 	bl	8004a20 <sulp>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	ec51 0b18 	vmov	r0, r1, d8
 800537a:	f7fa ff85 	bl	8000288 <__aeabi_dsub>
 800537e:	2200      	movs	r2, #0
 8005380:	2300      	movs	r3, #0
 8005382:	4680      	mov	r8, r0
 8005384:	4689      	mov	r9, r1
 8005386:	f7fb fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800538a:	2800      	cmp	r0, #0
 800538c:	d0c0      	beq.n	8005310 <_strtod_l+0x8b8>
 800538e:	e618      	b.n	8004fc2 <_strtod_l+0x56a>
 8005390:	fffffc02 	.word	0xfffffc02
 8005394:	7ff00000 	.word	0x7ff00000
 8005398:	39500000 	.word	0x39500000
 800539c:	000fffff 	.word	0x000fffff
 80053a0:	7fefffff 	.word	0x7fefffff
 80053a4:	08009d58 	.word	0x08009d58
 80053a8:	4659      	mov	r1, fp
 80053aa:	4628      	mov	r0, r5
 80053ac:	f002 fec6 	bl	800813c <__ratio>
 80053b0:	ec57 6b10 	vmov	r6, r7, d0
 80053b4:	ee10 0a10 	vmov	r0, s0
 80053b8:	2200      	movs	r2, #0
 80053ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053be:	4639      	mov	r1, r7
 80053c0:	f7fb fb96 	bl	8000af0 <__aeabi_dcmple>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d071      	beq.n	80054ac <_strtod_l+0xa54>
 80053c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d17c      	bne.n	80054c8 <_strtod_l+0xa70>
 80053ce:	f1b8 0f00 	cmp.w	r8, #0
 80053d2:	d15a      	bne.n	800548a <_strtod_l+0xa32>
 80053d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d15d      	bne.n	8005498 <_strtod_l+0xa40>
 80053dc:	4b90      	ldr	r3, [pc, #576]	; (8005620 <_strtod_l+0xbc8>)
 80053de:	2200      	movs	r2, #0
 80053e0:	4630      	mov	r0, r6
 80053e2:	4639      	mov	r1, r7
 80053e4:	f7fb fb7a 	bl	8000adc <__aeabi_dcmplt>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d15c      	bne.n	80054a6 <_strtod_l+0xa4e>
 80053ec:	4630      	mov	r0, r6
 80053ee:	4639      	mov	r1, r7
 80053f0:	4b8c      	ldr	r3, [pc, #560]	; (8005624 <_strtod_l+0xbcc>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	f7fb f900 	bl	80005f8 <__aeabi_dmul>
 80053f8:	4606      	mov	r6, r0
 80053fa:	460f      	mov	r7, r1
 80053fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005400:	9606      	str	r6, [sp, #24]
 8005402:	9307      	str	r3, [sp, #28]
 8005404:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005408:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800540c:	4b86      	ldr	r3, [pc, #536]	; (8005628 <_strtod_l+0xbd0>)
 800540e:	ea0a 0303 	and.w	r3, sl, r3
 8005412:	930d      	str	r3, [sp, #52]	; 0x34
 8005414:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005416:	4b85      	ldr	r3, [pc, #532]	; (800562c <_strtod_l+0xbd4>)
 8005418:	429a      	cmp	r2, r3
 800541a:	f040 8090 	bne.w	800553e <_strtod_l+0xae6>
 800541e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8005422:	ec49 8b10 	vmov	d0, r8, r9
 8005426:	f002 fdbf 	bl	8007fa8 <__ulp>
 800542a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800542e:	ec51 0b10 	vmov	r0, r1, d0
 8005432:	f7fb f8e1 	bl	80005f8 <__aeabi_dmul>
 8005436:	4642      	mov	r2, r8
 8005438:	464b      	mov	r3, r9
 800543a:	f7fa ff27 	bl	800028c <__adddf3>
 800543e:	460b      	mov	r3, r1
 8005440:	4979      	ldr	r1, [pc, #484]	; (8005628 <_strtod_l+0xbd0>)
 8005442:	4a7b      	ldr	r2, [pc, #492]	; (8005630 <_strtod_l+0xbd8>)
 8005444:	4019      	ands	r1, r3
 8005446:	4291      	cmp	r1, r2
 8005448:	4680      	mov	r8, r0
 800544a:	d944      	bls.n	80054d6 <_strtod_l+0xa7e>
 800544c:	ee18 2a90 	vmov	r2, s17
 8005450:	4b78      	ldr	r3, [pc, #480]	; (8005634 <_strtod_l+0xbdc>)
 8005452:	429a      	cmp	r2, r3
 8005454:	d104      	bne.n	8005460 <_strtod_l+0xa08>
 8005456:	ee18 3a10 	vmov	r3, s16
 800545a:	3301      	adds	r3, #1
 800545c:	f43f ad40 	beq.w	8004ee0 <_strtod_l+0x488>
 8005460:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8005634 <_strtod_l+0xbdc>
 8005464:	f04f 38ff 	mov.w	r8, #4294967295
 8005468:	9916      	ldr	r1, [sp, #88]	; 0x58
 800546a:	4620      	mov	r0, r4
 800546c:	f002 fa70 	bl	8007950 <_Bfree>
 8005470:	9905      	ldr	r1, [sp, #20]
 8005472:	4620      	mov	r0, r4
 8005474:	f002 fa6c 	bl	8007950 <_Bfree>
 8005478:	4659      	mov	r1, fp
 800547a:	4620      	mov	r0, r4
 800547c:	f002 fa68 	bl	8007950 <_Bfree>
 8005480:	4629      	mov	r1, r5
 8005482:	4620      	mov	r0, r4
 8005484:	f002 fa64 	bl	8007950 <_Bfree>
 8005488:	e609      	b.n	800509e <_strtod_l+0x646>
 800548a:	f1b8 0f01 	cmp.w	r8, #1
 800548e:	d103      	bne.n	8005498 <_strtod_l+0xa40>
 8005490:	f1b9 0f00 	cmp.w	r9, #0
 8005494:	f43f ad95 	beq.w	8004fc2 <_strtod_l+0x56a>
 8005498:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80055f0 <_strtod_l+0xb98>
 800549c:	4f60      	ldr	r7, [pc, #384]	; (8005620 <_strtod_l+0xbc8>)
 800549e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80054a2:	2600      	movs	r6, #0
 80054a4:	e7ae      	b.n	8005404 <_strtod_l+0x9ac>
 80054a6:	4f5f      	ldr	r7, [pc, #380]	; (8005624 <_strtod_l+0xbcc>)
 80054a8:	2600      	movs	r6, #0
 80054aa:	e7a7      	b.n	80053fc <_strtod_l+0x9a4>
 80054ac:	4b5d      	ldr	r3, [pc, #372]	; (8005624 <_strtod_l+0xbcc>)
 80054ae:	4630      	mov	r0, r6
 80054b0:	4639      	mov	r1, r7
 80054b2:	2200      	movs	r2, #0
 80054b4:	f7fb f8a0 	bl	80005f8 <__aeabi_dmul>
 80054b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ba:	4606      	mov	r6, r0
 80054bc:	460f      	mov	r7, r1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d09c      	beq.n	80053fc <_strtod_l+0x9a4>
 80054c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80054c6:	e79d      	b.n	8005404 <_strtod_l+0x9ac>
 80054c8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80055f8 <_strtod_l+0xba0>
 80054cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80054d0:	ec57 6b17 	vmov	r6, r7, d7
 80054d4:	e796      	b.n	8005404 <_strtod_l+0x9ac>
 80054d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80054da:	9b04      	ldr	r3, [sp, #16]
 80054dc:	46ca      	mov	sl, r9
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1c2      	bne.n	8005468 <_strtod_l+0xa10>
 80054e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80054e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054e8:	0d1b      	lsrs	r3, r3, #20
 80054ea:	051b      	lsls	r3, r3, #20
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d1bb      	bne.n	8005468 <_strtod_l+0xa10>
 80054f0:	4630      	mov	r0, r6
 80054f2:	4639      	mov	r1, r7
 80054f4:	f7fb fbe0 	bl	8000cb8 <__aeabi_d2lz>
 80054f8:	f7fb f850 	bl	800059c <__aeabi_l2d>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4630      	mov	r0, r6
 8005502:	4639      	mov	r1, r7
 8005504:	f7fa fec0 	bl	8000288 <__aeabi_dsub>
 8005508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800550a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800550e:	ea43 0308 	orr.w	r3, r3, r8
 8005512:	4313      	orrs	r3, r2
 8005514:	4606      	mov	r6, r0
 8005516:	460f      	mov	r7, r1
 8005518:	d054      	beq.n	80055c4 <_strtod_l+0xb6c>
 800551a:	a339      	add	r3, pc, #228	; (adr r3, 8005600 <_strtod_l+0xba8>)
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f7fb fadc 	bl	8000adc <__aeabi_dcmplt>
 8005524:	2800      	cmp	r0, #0
 8005526:	f47f ace5 	bne.w	8004ef4 <_strtod_l+0x49c>
 800552a:	a337      	add	r3, pc, #220	; (adr r3, 8005608 <_strtod_l+0xbb0>)
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	4630      	mov	r0, r6
 8005532:	4639      	mov	r1, r7
 8005534:	f7fb faf0 	bl	8000b18 <__aeabi_dcmpgt>
 8005538:	2800      	cmp	r0, #0
 800553a:	d095      	beq.n	8005468 <_strtod_l+0xa10>
 800553c:	e4da      	b.n	8004ef4 <_strtod_l+0x49c>
 800553e:	9b04      	ldr	r3, [sp, #16]
 8005540:	b333      	cbz	r3, 8005590 <_strtod_l+0xb38>
 8005542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005544:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005548:	d822      	bhi.n	8005590 <_strtod_l+0xb38>
 800554a:	a331      	add	r3, pc, #196	; (adr r3, 8005610 <_strtod_l+0xbb8>)
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	4630      	mov	r0, r6
 8005552:	4639      	mov	r1, r7
 8005554:	f7fb facc 	bl	8000af0 <__aeabi_dcmple>
 8005558:	b1a0      	cbz	r0, 8005584 <_strtod_l+0xb2c>
 800555a:	4639      	mov	r1, r7
 800555c:	4630      	mov	r0, r6
 800555e:	f7fb fb23 	bl	8000ba8 <__aeabi_d2uiz>
 8005562:	2801      	cmp	r0, #1
 8005564:	bf38      	it	cc
 8005566:	2001      	movcc	r0, #1
 8005568:	f7fa ffcc 	bl	8000504 <__aeabi_ui2d>
 800556c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800556e:	4606      	mov	r6, r0
 8005570:	460f      	mov	r7, r1
 8005572:	bb23      	cbnz	r3, 80055be <_strtod_l+0xb66>
 8005574:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005578:	9010      	str	r0, [sp, #64]	; 0x40
 800557a:	9311      	str	r3, [sp, #68]	; 0x44
 800557c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005580:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005586:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005588:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005590:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005594:	eeb0 0a48 	vmov.f32	s0, s16
 8005598:	eef0 0a68 	vmov.f32	s1, s17
 800559c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80055a0:	f002 fd02 	bl	8007fa8 <__ulp>
 80055a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80055a8:	ec53 2b10 	vmov	r2, r3, d0
 80055ac:	f7fb f824 	bl	80005f8 <__aeabi_dmul>
 80055b0:	ec53 2b18 	vmov	r2, r3, d8
 80055b4:	f7fa fe6a 	bl	800028c <__adddf3>
 80055b8:	4680      	mov	r8, r0
 80055ba:	4689      	mov	r9, r1
 80055bc:	e78d      	b.n	80054da <_strtod_l+0xa82>
 80055be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80055c2:	e7db      	b.n	800557c <_strtod_l+0xb24>
 80055c4:	a314      	add	r3, pc, #80	; (adr r3, 8005618 <_strtod_l+0xbc0>)
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f7fb fa87 	bl	8000adc <__aeabi_dcmplt>
 80055ce:	e7b3      	b.n	8005538 <_strtod_l+0xae0>
 80055d0:	2300      	movs	r3, #0
 80055d2:	930a      	str	r3, [sp, #40]	; 0x28
 80055d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	f7ff ba7c 	b.w	8004ad6 <_strtod_l+0x7e>
 80055de:	2a65      	cmp	r2, #101	; 0x65
 80055e0:	f43f ab75 	beq.w	8004cce <_strtod_l+0x276>
 80055e4:	2a45      	cmp	r2, #69	; 0x45
 80055e6:	f43f ab72 	beq.w	8004cce <_strtod_l+0x276>
 80055ea:	2301      	movs	r3, #1
 80055ec:	f7ff bbaa 	b.w	8004d44 <_strtod_l+0x2ec>
 80055f0:	00000000 	.word	0x00000000
 80055f4:	bff00000 	.word	0xbff00000
 80055f8:	00000000 	.word	0x00000000
 80055fc:	3ff00000 	.word	0x3ff00000
 8005600:	94a03595 	.word	0x94a03595
 8005604:	3fdfffff 	.word	0x3fdfffff
 8005608:	35afe535 	.word	0x35afe535
 800560c:	3fe00000 	.word	0x3fe00000
 8005610:	ffc00000 	.word	0xffc00000
 8005614:	41dfffff 	.word	0x41dfffff
 8005618:	94a03595 	.word	0x94a03595
 800561c:	3fcfffff 	.word	0x3fcfffff
 8005620:	3ff00000 	.word	0x3ff00000
 8005624:	3fe00000 	.word	0x3fe00000
 8005628:	7ff00000 	.word	0x7ff00000
 800562c:	7fe00000 	.word	0x7fe00000
 8005630:	7c9fffff 	.word	0x7c9fffff
 8005634:	7fefffff 	.word	0x7fefffff

08005638 <strtod>:
 8005638:	460a      	mov	r2, r1
 800563a:	4601      	mov	r1, r0
 800563c:	4802      	ldr	r0, [pc, #8]	; (8005648 <strtod+0x10>)
 800563e:	4b03      	ldr	r3, [pc, #12]	; (800564c <strtod+0x14>)
 8005640:	6800      	ldr	r0, [r0, #0]
 8005642:	f7ff ba09 	b.w	8004a58 <_strtod_l>
 8005646:	bf00      	nop
 8005648:	20000210 	.word	0x20000210
 800564c:	20000058 	.word	0x20000058

08005650 <__cvt>:
 8005650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005654:	ec55 4b10 	vmov	r4, r5, d0
 8005658:	2d00      	cmp	r5, #0
 800565a:	460e      	mov	r6, r1
 800565c:	4619      	mov	r1, r3
 800565e:	462b      	mov	r3, r5
 8005660:	bfbb      	ittet	lt
 8005662:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005666:	461d      	movlt	r5, r3
 8005668:	2300      	movge	r3, #0
 800566a:	232d      	movlt	r3, #45	; 0x2d
 800566c:	700b      	strb	r3, [r1, #0]
 800566e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005670:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005674:	4691      	mov	r9, r2
 8005676:	f023 0820 	bic.w	r8, r3, #32
 800567a:	bfbc      	itt	lt
 800567c:	4622      	movlt	r2, r4
 800567e:	4614      	movlt	r4, r2
 8005680:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005684:	d005      	beq.n	8005692 <__cvt+0x42>
 8005686:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800568a:	d100      	bne.n	800568e <__cvt+0x3e>
 800568c:	3601      	adds	r6, #1
 800568e:	2102      	movs	r1, #2
 8005690:	e000      	b.n	8005694 <__cvt+0x44>
 8005692:	2103      	movs	r1, #3
 8005694:	ab03      	add	r3, sp, #12
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	ab02      	add	r3, sp, #8
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	ec45 4b10 	vmov	d0, r4, r5
 80056a0:	4653      	mov	r3, sl
 80056a2:	4632      	mov	r2, r6
 80056a4:	f000 feb8 	bl	8006418 <_dtoa_r>
 80056a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056ac:	4607      	mov	r7, r0
 80056ae:	d102      	bne.n	80056b6 <__cvt+0x66>
 80056b0:	f019 0f01 	tst.w	r9, #1
 80056b4:	d022      	beq.n	80056fc <__cvt+0xac>
 80056b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056ba:	eb07 0906 	add.w	r9, r7, r6
 80056be:	d110      	bne.n	80056e2 <__cvt+0x92>
 80056c0:	783b      	ldrb	r3, [r7, #0]
 80056c2:	2b30      	cmp	r3, #48	; 0x30
 80056c4:	d10a      	bne.n	80056dc <__cvt+0x8c>
 80056c6:	2200      	movs	r2, #0
 80056c8:	2300      	movs	r3, #0
 80056ca:	4620      	mov	r0, r4
 80056cc:	4629      	mov	r1, r5
 80056ce:	f7fb f9fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80056d2:	b918      	cbnz	r0, 80056dc <__cvt+0x8c>
 80056d4:	f1c6 0601 	rsb	r6, r6, #1
 80056d8:	f8ca 6000 	str.w	r6, [sl]
 80056dc:	f8da 3000 	ldr.w	r3, [sl]
 80056e0:	4499      	add	r9, r3
 80056e2:	2200      	movs	r2, #0
 80056e4:	2300      	movs	r3, #0
 80056e6:	4620      	mov	r0, r4
 80056e8:	4629      	mov	r1, r5
 80056ea:	f7fb f9ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80056ee:	b108      	cbz	r0, 80056f4 <__cvt+0xa4>
 80056f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80056f4:	2230      	movs	r2, #48	; 0x30
 80056f6:	9b03      	ldr	r3, [sp, #12]
 80056f8:	454b      	cmp	r3, r9
 80056fa:	d307      	bcc.n	800570c <__cvt+0xbc>
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005700:	1bdb      	subs	r3, r3, r7
 8005702:	4638      	mov	r0, r7
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	b004      	add	sp, #16
 8005708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570c:	1c59      	adds	r1, r3, #1
 800570e:	9103      	str	r1, [sp, #12]
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	e7f0      	b.n	80056f6 <__cvt+0xa6>

08005714 <__exponent>:
 8005714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005716:	4603      	mov	r3, r0
 8005718:	2900      	cmp	r1, #0
 800571a:	bfb8      	it	lt
 800571c:	4249      	neglt	r1, r1
 800571e:	f803 2b02 	strb.w	r2, [r3], #2
 8005722:	bfb4      	ite	lt
 8005724:	222d      	movlt	r2, #45	; 0x2d
 8005726:	222b      	movge	r2, #43	; 0x2b
 8005728:	2909      	cmp	r1, #9
 800572a:	7042      	strb	r2, [r0, #1]
 800572c:	dd2a      	ble.n	8005784 <__exponent+0x70>
 800572e:	f10d 0207 	add.w	r2, sp, #7
 8005732:	4617      	mov	r7, r2
 8005734:	260a      	movs	r6, #10
 8005736:	4694      	mov	ip, r2
 8005738:	fb91 f5f6 	sdiv	r5, r1, r6
 800573c:	fb06 1415 	mls	r4, r6, r5, r1
 8005740:	3430      	adds	r4, #48	; 0x30
 8005742:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005746:	460c      	mov	r4, r1
 8005748:	2c63      	cmp	r4, #99	; 0x63
 800574a:	f102 32ff 	add.w	r2, r2, #4294967295
 800574e:	4629      	mov	r1, r5
 8005750:	dcf1      	bgt.n	8005736 <__exponent+0x22>
 8005752:	3130      	adds	r1, #48	; 0x30
 8005754:	f1ac 0402 	sub.w	r4, ip, #2
 8005758:	f802 1c01 	strb.w	r1, [r2, #-1]
 800575c:	1c41      	adds	r1, r0, #1
 800575e:	4622      	mov	r2, r4
 8005760:	42ba      	cmp	r2, r7
 8005762:	d30a      	bcc.n	800577a <__exponent+0x66>
 8005764:	f10d 0209 	add.w	r2, sp, #9
 8005768:	eba2 020c 	sub.w	r2, r2, ip
 800576c:	42bc      	cmp	r4, r7
 800576e:	bf88      	it	hi
 8005770:	2200      	movhi	r2, #0
 8005772:	4413      	add	r3, r2
 8005774:	1a18      	subs	r0, r3, r0
 8005776:	b003      	add	sp, #12
 8005778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800577a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800577e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005782:	e7ed      	b.n	8005760 <__exponent+0x4c>
 8005784:	2330      	movs	r3, #48	; 0x30
 8005786:	3130      	adds	r1, #48	; 0x30
 8005788:	7083      	strb	r3, [r0, #2]
 800578a:	70c1      	strb	r1, [r0, #3]
 800578c:	1d03      	adds	r3, r0, #4
 800578e:	e7f1      	b.n	8005774 <__exponent+0x60>

08005790 <_printf_float>:
 8005790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005794:	ed2d 8b02 	vpush	{d8}
 8005798:	b08d      	sub	sp, #52	; 0x34
 800579a:	460c      	mov	r4, r1
 800579c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057a0:	4616      	mov	r6, r2
 80057a2:	461f      	mov	r7, r3
 80057a4:	4605      	mov	r5, r0
 80057a6:	f000 fd1f 	bl	80061e8 <_localeconv_r>
 80057aa:	f8d0 a000 	ldr.w	sl, [r0]
 80057ae:	4650      	mov	r0, sl
 80057b0:	f7fa fd5e 	bl	8000270 <strlen>
 80057b4:	2300      	movs	r3, #0
 80057b6:	930a      	str	r3, [sp, #40]	; 0x28
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	9305      	str	r3, [sp, #20]
 80057bc:	f8d8 3000 	ldr.w	r3, [r8]
 80057c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057c4:	3307      	adds	r3, #7
 80057c6:	f023 0307 	bic.w	r3, r3, #7
 80057ca:	f103 0208 	add.w	r2, r3, #8
 80057ce:	f8c8 2000 	str.w	r2, [r8]
 80057d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057da:	9307      	str	r3, [sp, #28]
 80057dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80057e0:	ee08 0a10 	vmov	s16, r0
 80057e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80057e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057ec:	4b9e      	ldr	r3, [pc, #632]	; (8005a68 <_printf_float+0x2d8>)
 80057ee:	f04f 32ff 	mov.w	r2, #4294967295
 80057f2:	f7fb f99b 	bl	8000b2c <__aeabi_dcmpun>
 80057f6:	bb88      	cbnz	r0, 800585c <_printf_float+0xcc>
 80057f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057fc:	4b9a      	ldr	r3, [pc, #616]	; (8005a68 <_printf_float+0x2d8>)
 80057fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005802:	f7fb f975 	bl	8000af0 <__aeabi_dcmple>
 8005806:	bb48      	cbnz	r0, 800585c <_printf_float+0xcc>
 8005808:	2200      	movs	r2, #0
 800580a:	2300      	movs	r3, #0
 800580c:	4640      	mov	r0, r8
 800580e:	4649      	mov	r1, r9
 8005810:	f7fb f964 	bl	8000adc <__aeabi_dcmplt>
 8005814:	b110      	cbz	r0, 800581c <_printf_float+0x8c>
 8005816:	232d      	movs	r3, #45	; 0x2d
 8005818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800581c:	4a93      	ldr	r2, [pc, #588]	; (8005a6c <_printf_float+0x2dc>)
 800581e:	4b94      	ldr	r3, [pc, #592]	; (8005a70 <_printf_float+0x2e0>)
 8005820:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005824:	bf94      	ite	ls
 8005826:	4690      	movls	r8, r2
 8005828:	4698      	movhi	r8, r3
 800582a:	2303      	movs	r3, #3
 800582c:	6123      	str	r3, [r4, #16]
 800582e:	9b05      	ldr	r3, [sp, #20]
 8005830:	f023 0304 	bic.w	r3, r3, #4
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	f04f 0900 	mov.w	r9, #0
 800583a:	9700      	str	r7, [sp, #0]
 800583c:	4633      	mov	r3, r6
 800583e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005840:	4621      	mov	r1, r4
 8005842:	4628      	mov	r0, r5
 8005844:	f000 f9da 	bl	8005bfc <_printf_common>
 8005848:	3001      	adds	r0, #1
 800584a:	f040 8090 	bne.w	800596e <_printf_float+0x1de>
 800584e:	f04f 30ff 	mov.w	r0, #4294967295
 8005852:	b00d      	add	sp, #52	; 0x34
 8005854:	ecbd 8b02 	vpop	{d8}
 8005858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585c:	4642      	mov	r2, r8
 800585e:	464b      	mov	r3, r9
 8005860:	4640      	mov	r0, r8
 8005862:	4649      	mov	r1, r9
 8005864:	f7fb f962 	bl	8000b2c <__aeabi_dcmpun>
 8005868:	b140      	cbz	r0, 800587c <_printf_float+0xec>
 800586a:	464b      	mov	r3, r9
 800586c:	2b00      	cmp	r3, #0
 800586e:	bfbc      	itt	lt
 8005870:	232d      	movlt	r3, #45	; 0x2d
 8005872:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005876:	4a7f      	ldr	r2, [pc, #508]	; (8005a74 <_printf_float+0x2e4>)
 8005878:	4b7f      	ldr	r3, [pc, #508]	; (8005a78 <_printf_float+0x2e8>)
 800587a:	e7d1      	b.n	8005820 <_printf_float+0x90>
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005882:	9206      	str	r2, [sp, #24]
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	d13f      	bne.n	8005908 <_printf_float+0x178>
 8005888:	2306      	movs	r3, #6
 800588a:	6063      	str	r3, [r4, #4]
 800588c:	9b05      	ldr	r3, [sp, #20]
 800588e:	6861      	ldr	r1, [r4, #4]
 8005890:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005894:	2300      	movs	r3, #0
 8005896:	9303      	str	r3, [sp, #12]
 8005898:	ab0a      	add	r3, sp, #40	; 0x28
 800589a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800589e:	ab09      	add	r3, sp, #36	; 0x24
 80058a0:	ec49 8b10 	vmov	d0, r8, r9
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	6022      	str	r2, [r4, #0]
 80058a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058ac:	4628      	mov	r0, r5
 80058ae:	f7ff fecf 	bl	8005650 <__cvt>
 80058b2:	9b06      	ldr	r3, [sp, #24]
 80058b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058b6:	2b47      	cmp	r3, #71	; 0x47
 80058b8:	4680      	mov	r8, r0
 80058ba:	d108      	bne.n	80058ce <_printf_float+0x13e>
 80058bc:	1cc8      	adds	r0, r1, #3
 80058be:	db02      	blt.n	80058c6 <_printf_float+0x136>
 80058c0:	6863      	ldr	r3, [r4, #4]
 80058c2:	4299      	cmp	r1, r3
 80058c4:	dd41      	ble.n	800594a <_printf_float+0x1ba>
 80058c6:	f1ab 0302 	sub.w	r3, fp, #2
 80058ca:	fa5f fb83 	uxtb.w	fp, r3
 80058ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058d2:	d820      	bhi.n	8005916 <_printf_float+0x186>
 80058d4:	3901      	subs	r1, #1
 80058d6:	465a      	mov	r2, fp
 80058d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058dc:	9109      	str	r1, [sp, #36]	; 0x24
 80058de:	f7ff ff19 	bl	8005714 <__exponent>
 80058e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058e4:	1813      	adds	r3, r2, r0
 80058e6:	2a01      	cmp	r2, #1
 80058e8:	4681      	mov	r9, r0
 80058ea:	6123      	str	r3, [r4, #16]
 80058ec:	dc02      	bgt.n	80058f4 <_printf_float+0x164>
 80058ee:	6822      	ldr	r2, [r4, #0]
 80058f0:	07d2      	lsls	r2, r2, #31
 80058f2:	d501      	bpl.n	80058f8 <_printf_float+0x168>
 80058f4:	3301      	adds	r3, #1
 80058f6:	6123      	str	r3, [r4, #16]
 80058f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d09c      	beq.n	800583a <_printf_float+0xaa>
 8005900:	232d      	movs	r3, #45	; 0x2d
 8005902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005906:	e798      	b.n	800583a <_printf_float+0xaa>
 8005908:	9a06      	ldr	r2, [sp, #24]
 800590a:	2a47      	cmp	r2, #71	; 0x47
 800590c:	d1be      	bne.n	800588c <_printf_float+0xfc>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1bc      	bne.n	800588c <_printf_float+0xfc>
 8005912:	2301      	movs	r3, #1
 8005914:	e7b9      	b.n	800588a <_printf_float+0xfa>
 8005916:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800591a:	d118      	bne.n	800594e <_printf_float+0x1be>
 800591c:	2900      	cmp	r1, #0
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	dd0b      	ble.n	800593a <_printf_float+0x1aa>
 8005922:	6121      	str	r1, [r4, #16]
 8005924:	b913      	cbnz	r3, 800592c <_printf_float+0x19c>
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	07d0      	lsls	r0, r2, #31
 800592a:	d502      	bpl.n	8005932 <_printf_float+0x1a2>
 800592c:	3301      	adds	r3, #1
 800592e:	440b      	add	r3, r1
 8005930:	6123      	str	r3, [r4, #16]
 8005932:	65a1      	str	r1, [r4, #88]	; 0x58
 8005934:	f04f 0900 	mov.w	r9, #0
 8005938:	e7de      	b.n	80058f8 <_printf_float+0x168>
 800593a:	b913      	cbnz	r3, 8005942 <_printf_float+0x1b2>
 800593c:	6822      	ldr	r2, [r4, #0]
 800593e:	07d2      	lsls	r2, r2, #31
 8005940:	d501      	bpl.n	8005946 <_printf_float+0x1b6>
 8005942:	3302      	adds	r3, #2
 8005944:	e7f4      	b.n	8005930 <_printf_float+0x1a0>
 8005946:	2301      	movs	r3, #1
 8005948:	e7f2      	b.n	8005930 <_printf_float+0x1a0>
 800594a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800594e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005950:	4299      	cmp	r1, r3
 8005952:	db05      	blt.n	8005960 <_printf_float+0x1d0>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	6121      	str	r1, [r4, #16]
 8005958:	07d8      	lsls	r0, r3, #31
 800595a:	d5ea      	bpl.n	8005932 <_printf_float+0x1a2>
 800595c:	1c4b      	adds	r3, r1, #1
 800595e:	e7e7      	b.n	8005930 <_printf_float+0x1a0>
 8005960:	2900      	cmp	r1, #0
 8005962:	bfd4      	ite	le
 8005964:	f1c1 0202 	rsble	r2, r1, #2
 8005968:	2201      	movgt	r2, #1
 800596a:	4413      	add	r3, r2
 800596c:	e7e0      	b.n	8005930 <_printf_float+0x1a0>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	055a      	lsls	r2, r3, #21
 8005972:	d407      	bmi.n	8005984 <_printf_float+0x1f4>
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	4642      	mov	r2, r8
 8005978:	4631      	mov	r1, r6
 800597a:	4628      	mov	r0, r5
 800597c:	47b8      	blx	r7
 800597e:	3001      	adds	r0, #1
 8005980:	d12c      	bne.n	80059dc <_printf_float+0x24c>
 8005982:	e764      	b.n	800584e <_printf_float+0xbe>
 8005984:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005988:	f240 80e0 	bls.w	8005b4c <_printf_float+0x3bc>
 800598c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005990:	2200      	movs	r2, #0
 8005992:	2300      	movs	r3, #0
 8005994:	f7fb f898 	bl	8000ac8 <__aeabi_dcmpeq>
 8005998:	2800      	cmp	r0, #0
 800599a:	d034      	beq.n	8005a06 <_printf_float+0x276>
 800599c:	4a37      	ldr	r2, [pc, #220]	; (8005a7c <_printf_float+0x2ec>)
 800599e:	2301      	movs	r3, #1
 80059a0:	4631      	mov	r1, r6
 80059a2:	4628      	mov	r0, r5
 80059a4:	47b8      	blx	r7
 80059a6:	3001      	adds	r0, #1
 80059a8:	f43f af51 	beq.w	800584e <_printf_float+0xbe>
 80059ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059b0:	429a      	cmp	r2, r3
 80059b2:	db02      	blt.n	80059ba <_printf_float+0x22a>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	07d8      	lsls	r0, r3, #31
 80059b8:	d510      	bpl.n	80059dc <_printf_float+0x24c>
 80059ba:	ee18 3a10 	vmov	r3, s16
 80059be:	4652      	mov	r2, sl
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	f43f af41 	beq.w	800584e <_printf_float+0xbe>
 80059cc:	f04f 0800 	mov.w	r8, #0
 80059d0:	f104 091a 	add.w	r9, r4, #26
 80059d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d6:	3b01      	subs	r3, #1
 80059d8:	4543      	cmp	r3, r8
 80059da:	dc09      	bgt.n	80059f0 <_printf_float+0x260>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	079b      	lsls	r3, r3, #30
 80059e0:	f100 8107 	bmi.w	8005bf2 <_printf_float+0x462>
 80059e4:	68e0      	ldr	r0, [r4, #12]
 80059e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e8:	4298      	cmp	r0, r3
 80059ea:	bfb8      	it	lt
 80059ec:	4618      	movlt	r0, r3
 80059ee:	e730      	b.n	8005852 <_printf_float+0xc2>
 80059f0:	2301      	movs	r3, #1
 80059f2:	464a      	mov	r2, r9
 80059f4:	4631      	mov	r1, r6
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b8      	blx	r7
 80059fa:	3001      	adds	r0, #1
 80059fc:	f43f af27 	beq.w	800584e <_printf_float+0xbe>
 8005a00:	f108 0801 	add.w	r8, r8, #1
 8005a04:	e7e6      	b.n	80059d4 <_printf_float+0x244>
 8005a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	dc39      	bgt.n	8005a80 <_printf_float+0x2f0>
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	; (8005a7c <_printf_float+0x2ec>)
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4631      	mov	r1, r6
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	f43f af19 	beq.w	800584e <_printf_float+0xbe>
 8005a1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a20:	4313      	orrs	r3, r2
 8005a22:	d102      	bne.n	8005a2a <_printf_float+0x29a>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	07d9      	lsls	r1, r3, #31
 8005a28:	d5d8      	bpl.n	80059dc <_printf_float+0x24c>
 8005a2a:	ee18 3a10 	vmov	r3, s16
 8005a2e:	4652      	mov	r2, sl
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f af09 	beq.w	800584e <_printf_float+0xbe>
 8005a3c:	f04f 0900 	mov.w	r9, #0
 8005a40:	f104 0a1a 	add.w	sl, r4, #26
 8005a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a46:	425b      	negs	r3, r3
 8005a48:	454b      	cmp	r3, r9
 8005a4a:	dc01      	bgt.n	8005a50 <_printf_float+0x2c0>
 8005a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a4e:	e792      	b.n	8005976 <_printf_float+0x1e6>
 8005a50:	2301      	movs	r3, #1
 8005a52:	4652      	mov	r2, sl
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f43f aef7 	beq.w	800584e <_printf_float+0xbe>
 8005a60:	f109 0901 	add.w	r9, r9, #1
 8005a64:	e7ee      	b.n	8005a44 <_printf_float+0x2b4>
 8005a66:	bf00      	nop
 8005a68:	7fefffff 	.word	0x7fefffff
 8005a6c:	08009d80 	.word	0x08009d80
 8005a70:	08009d84 	.word	0x08009d84
 8005a74:	08009d88 	.word	0x08009d88
 8005a78:	08009d8c 	.word	0x08009d8c
 8005a7c:	08009d90 	.word	0x08009d90
 8005a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a84:	429a      	cmp	r2, r3
 8005a86:	bfa8      	it	ge
 8005a88:	461a      	movge	r2, r3
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	4691      	mov	r9, r2
 8005a8e:	dc37      	bgt.n	8005b00 <_printf_float+0x370>
 8005a90:	f04f 0b00 	mov.w	fp, #0
 8005a94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a98:	f104 021a 	add.w	r2, r4, #26
 8005a9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a9e:	9305      	str	r3, [sp, #20]
 8005aa0:	eba3 0309 	sub.w	r3, r3, r9
 8005aa4:	455b      	cmp	r3, fp
 8005aa6:	dc33      	bgt.n	8005b10 <_printf_float+0x380>
 8005aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aac:	429a      	cmp	r2, r3
 8005aae:	db3b      	blt.n	8005b28 <_printf_float+0x398>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	07da      	lsls	r2, r3, #31
 8005ab4:	d438      	bmi.n	8005b28 <_printf_float+0x398>
 8005ab6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005aba:	eba2 0903 	sub.w	r9, r2, r3
 8005abe:	9b05      	ldr	r3, [sp, #20]
 8005ac0:	1ad2      	subs	r2, r2, r3
 8005ac2:	4591      	cmp	r9, r2
 8005ac4:	bfa8      	it	ge
 8005ac6:	4691      	movge	r9, r2
 8005ac8:	f1b9 0f00 	cmp.w	r9, #0
 8005acc:	dc35      	bgt.n	8005b3a <_printf_float+0x3aa>
 8005ace:	f04f 0800 	mov.w	r8, #0
 8005ad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ad6:	f104 0a1a 	add.w	sl, r4, #26
 8005ada:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	eba3 0309 	sub.w	r3, r3, r9
 8005ae4:	4543      	cmp	r3, r8
 8005ae6:	f77f af79 	ble.w	80059dc <_printf_float+0x24c>
 8005aea:	2301      	movs	r3, #1
 8005aec:	4652      	mov	r2, sl
 8005aee:	4631      	mov	r1, r6
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b8      	blx	r7
 8005af4:	3001      	adds	r0, #1
 8005af6:	f43f aeaa 	beq.w	800584e <_printf_float+0xbe>
 8005afa:	f108 0801 	add.w	r8, r8, #1
 8005afe:	e7ec      	b.n	8005ada <_printf_float+0x34a>
 8005b00:	4613      	mov	r3, r2
 8005b02:	4631      	mov	r1, r6
 8005b04:	4642      	mov	r2, r8
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d1c0      	bne.n	8005a90 <_printf_float+0x300>
 8005b0e:	e69e      	b.n	800584e <_printf_float+0xbe>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	9205      	str	r2, [sp, #20]
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f43f ae97 	beq.w	800584e <_printf_float+0xbe>
 8005b20:	9a05      	ldr	r2, [sp, #20]
 8005b22:	f10b 0b01 	add.w	fp, fp, #1
 8005b26:	e7b9      	b.n	8005a9c <_printf_float+0x30c>
 8005b28:	ee18 3a10 	vmov	r3, s16
 8005b2c:	4652      	mov	r2, sl
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	d1be      	bne.n	8005ab6 <_printf_float+0x326>
 8005b38:	e689      	b.n	800584e <_printf_float+0xbe>
 8005b3a:	9a05      	ldr	r2, [sp, #20]
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	4442      	add	r2, r8
 8005b40:	4631      	mov	r1, r6
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b8      	blx	r7
 8005b46:	3001      	adds	r0, #1
 8005b48:	d1c1      	bne.n	8005ace <_printf_float+0x33e>
 8005b4a:	e680      	b.n	800584e <_printf_float+0xbe>
 8005b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b4e:	2a01      	cmp	r2, #1
 8005b50:	dc01      	bgt.n	8005b56 <_printf_float+0x3c6>
 8005b52:	07db      	lsls	r3, r3, #31
 8005b54:	d53a      	bpl.n	8005bcc <_printf_float+0x43c>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4642      	mov	r2, r8
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b8      	blx	r7
 8005b60:	3001      	adds	r0, #1
 8005b62:	f43f ae74 	beq.w	800584e <_printf_float+0xbe>
 8005b66:	ee18 3a10 	vmov	r3, s16
 8005b6a:	4652      	mov	r2, sl
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4628      	mov	r0, r5
 8005b70:	47b8      	blx	r7
 8005b72:	3001      	adds	r0, #1
 8005b74:	f43f ae6b 	beq.w	800584e <_printf_float+0xbe>
 8005b78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005b84:	f7fa ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b88:	b9d8      	cbnz	r0, 8005bc2 <_printf_float+0x432>
 8005b8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b8e:	f108 0201 	add.w	r2, r8, #1
 8005b92:	4631      	mov	r1, r6
 8005b94:	4628      	mov	r0, r5
 8005b96:	47b8      	blx	r7
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d10e      	bne.n	8005bba <_printf_float+0x42a>
 8005b9c:	e657      	b.n	800584e <_printf_float+0xbe>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	4652      	mov	r2, sl
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	f43f ae50 	beq.w	800584e <_printf_float+0xbe>
 8005bae:	f108 0801 	add.w	r8, r8, #1
 8005bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	4543      	cmp	r3, r8
 8005bb8:	dcf1      	bgt.n	8005b9e <_printf_float+0x40e>
 8005bba:	464b      	mov	r3, r9
 8005bbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bc0:	e6da      	b.n	8005978 <_printf_float+0x1e8>
 8005bc2:	f04f 0800 	mov.w	r8, #0
 8005bc6:	f104 0a1a 	add.w	sl, r4, #26
 8005bca:	e7f2      	b.n	8005bb2 <_printf_float+0x422>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	4642      	mov	r2, r8
 8005bd0:	e7df      	b.n	8005b92 <_printf_float+0x402>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	464a      	mov	r2, r9
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4628      	mov	r0, r5
 8005bda:	47b8      	blx	r7
 8005bdc:	3001      	adds	r0, #1
 8005bde:	f43f ae36 	beq.w	800584e <_printf_float+0xbe>
 8005be2:	f108 0801 	add.w	r8, r8, #1
 8005be6:	68e3      	ldr	r3, [r4, #12]
 8005be8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bea:	1a5b      	subs	r3, r3, r1
 8005bec:	4543      	cmp	r3, r8
 8005bee:	dcf0      	bgt.n	8005bd2 <_printf_float+0x442>
 8005bf0:	e6f8      	b.n	80059e4 <_printf_float+0x254>
 8005bf2:	f04f 0800 	mov.w	r8, #0
 8005bf6:	f104 0919 	add.w	r9, r4, #25
 8005bfa:	e7f4      	b.n	8005be6 <_printf_float+0x456>

08005bfc <_printf_common>:
 8005bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	4616      	mov	r6, r2
 8005c02:	4699      	mov	r9, r3
 8005c04:	688a      	ldr	r2, [r1, #8]
 8005c06:	690b      	ldr	r3, [r1, #16]
 8005c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	bfb8      	it	lt
 8005c10:	4613      	movlt	r3, r2
 8005c12:	6033      	str	r3, [r6, #0]
 8005c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c18:	4607      	mov	r7, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	b10a      	cbz	r2, 8005c22 <_printf_common+0x26>
 8005c1e:	3301      	adds	r3, #1
 8005c20:	6033      	str	r3, [r6, #0]
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	0699      	lsls	r1, r3, #26
 8005c26:	bf42      	ittt	mi
 8005c28:	6833      	ldrmi	r3, [r6, #0]
 8005c2a:	3302      	addmi	r3, #2
 8005c2c:	6033      	strmi	r3, [r6, #0]
 8005c2e:	6825      	ldr	r5, [r4, #0]
 8005c30:	f015 0506 	ands.w	r5, r5, #6
 8005c34:	d106      	bne.n	8005c44 <_printf_common+0x48>
 8005c36:	f104 0a19 	add.w	sl, r4, #25
 8005c3a:	68e3      	ldr	r3, [r4, #12]
 8005c3c:	6832      	ldr	r2, [r6, #0]
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	42ab      	cmp	r3, r5
 8005c42:	dc26      	bgt.n	8005c92 <_printf_common+0x96>
 8005c44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c48:	1e13      	subs	r3, r2, #0
 8005c4a:	6822      	ldr	r2, [r4, #0]
 8005c4c:	bf18      	it	ne
 8005c4e:	2301      	movne	r3, #1
 8005c50:	0692      	lsls	r2, r2, #26
 8005c52:	d42b      	bmi.n	8005cac <_printf_common+0xb0>
 8005c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c58:	4649      	mov	r1, r9
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	47c0      	blx	r8
 8005c5e:	3001      	adds	r0, #1
 8005c60:	d01e      	beq.n	8005ca0 <_printf_common+0xa4>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	6922      	ldr	r2, [r4, #16]
 8005c66:	f003 0306 	and.w	r3, r3, #6
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	bf02      	ittt	eq
 8005c6e:	68e5      	ldreq	r5, [r4, #12]
 8005c70:	6833      	ldreq	r3, [r6, #0]
 8005c72:	1aed      	subeq	r5, r5, r3
 8005c74:	68a3      	ldr	r3, [r4, #8]
 8005c76:	bf0c      	ite	eq
 8005c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c7c:	2500      	movne	r5, #0
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	bfc4      	itt	gt
 8005c82:	1a9b      	subgt	r3, r3, r2
 8005c84:	18ed      	addgt	r5, r5, r3
 8005c86:	2600      	movs	r6, #0
 8005c88:	341a      	adds	r4, #26
 8005c8a:	42b5      	cmp	r5, r6
 8005c8c:	d11a      	bne.n	8005cc4 <_printf_common+0xc8>
 8005c8e:	2000      	movs	r0, #0
 8005c90:	e008      	b.n	8005ca4 <_printf_common+0xa8>
 8005c92:	2301      	movs	r3, #1
 8005c94:	4652      	mov	r2, sl
 8005c96:	4649      	mov	r1, r9
 8005c98:	4638      	mov	r0, r7
 8005c9a:	47c0      	blx	r8
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d103      	bne.n	8005ca8 <_printf_common+0xac>
 8005ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca8:	3501      	adds	r5, #1
 8005caa:	e7c6      	b.n	8005c3a <_printf_common+0x3e>
 8005cac:	18e1      	adds	r1, r4, r3
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	2030      	movs	r0, #48	; 0x30
 8005cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cb6:	4422      	add	r2, r4
 8005cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cc0:	3302      	adds	r3, #2
 8005cc2:	e7c7      	b.n	8005c54 <_printf_common+0x58>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	4649      	mov	r1, r9
 8005cca:	4638      	mov	r0, r7
 8005ccc:	47c0      	blx	r8
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d0e6      	beq.n	8005ca0 <_printf_common+0xa4>
 8005cd2:	3601      	adds	r6, #1
 8005cd4:	e7d9      	b.n	8005c8a <_printf_common+0x8e>
	...

08005cd8 <_printf_i>:
 8005cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cdc:	7e0f      	ldrb	r7, [r1, #24]
 8005cde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ce0:	2f78      	cmp	r7, #120	; 0x78
 8005ce2:	4691      	mov	r9, r2
 8005ce4:	4680      	mov	r8, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	469a      	mov	sl, r3
 8005cea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cee:	d807      	bhi.n	8005d00 <_printf_i+0x28>
 8005cf0:	2f62      	cmp	r7, #98	; 0x62
 8005cf2:	d80a      	bhi.n	8005d0a <_printf_i+0x32>
 8005cf4:	2f00      	cmp	r7, #0
 8005cf6:	f000 80d4 	beq.w	8005ea2 <_printf_i+0x1ca>
 8005cfa:	2f58      	cmp	r7, #88	; 0x58
 8005cfc:	f000 80c0 	beq.w	8005e80 <_printf_i+0x1a8>
 8005d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d08:	e03a      	b.n	8005d80 <_printf_i+0xa8>
 8005d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d0e:	2b15      	cmp	r3, #21
 8005d10:	d8f6      	bhi.n	8005d00 <_printf_i+0x28>
 8005d12:	a101      	add	r1, pc, #4	; (adr r1, 8005d18 <_printf_i+0x40>)
 8005d14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d18:	08005d71 	.word	0x08005d71
 8005d1c:	08005d85 	.word	0x08005d85
 8005d20:	08005d01 	.word	0x08005d01
 8005d24:	08005d01 	.word	0x08005d01
 8005d28:	08005d01 	.word	0x08005d01
 8005d2c:	08005d01 	.word	0x08005d01
 8005d30:	08005d85 	.word	0x08005d85
 8005d34:	08005d01 	.word	0x08005d01
 8005d38:	08005d01 	.word	0x08005d01
 8005d3c:	08005d01 	.word	0x08005d01
 8005d40:	08005d01 	.word	0x08005d01
 8005d44:	08005e89 	.word	0x08005e89
 8005d48:	08005db1 	.word	0x08005db1
 8005d4c:	08005e43 	.word	0x08005e43
 8005d50:	08005d01 	.word	0x08005d01
 8005d54:	08005d01 	.word	0x08005d01
 8005d58:	08005eab 	.word	0x08005eab
 8005d5c:	08005d01 	.word	0x08005d01
 8005d60:	08005db1 	.word	0x08005db1
 8005d64:	08005d01 	.word	0x08005d01
 8005d68:	08005d01 	.word	0x08005d01
 8005d6c:	08005e4b 	.word	0x08005e4b
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	1d1a      	adds	r2, r3, #4
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	602a      	str	r2, [r5, #0]
 8005d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d80:	2301      	movs	r3, #1
 8005d82:	e09f      	b.n	8005ec4 <_printf_i+0x1ec>
 8005d84:	6820      	ldr	r0, [r4, #0]
 8005d86:	682b      	ldr	r3, [r5, #0]
 8005d88:	0607      	lsls	r7, r0, #24
 8005d8a:	f103 0104 	add.w	r1, r3, #4
 8005d8e:	6029      	str	r1, [r5, #0]
 8005d90:	d501      	bpl.n	8005d96 <_printf_i+0xbe>
 8005d92:	681e      	ldr	r6, [r3, #0]
 8005d94:	e003      	b.n	8005d9e <_printf_i+0xc6>
 8005d96:	0646      	lsls	r6, r0, #25
 8005d98:	d5fb      	bpl.n	8005d92 <_printf_i+0xba>
 8005d9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d9e:	2e00      	cmp	r6, #0
 8005da0:	da03      	bge.n	8005daa <_printf_i+0xd2>
 8005da2:	232d      	movs	r3, #45	; 0x2d
 8005da4:	4276      	negs	r6, r6
 8005da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005daa:	485a      	ldr	r0, [pc, #360]	; (8005f14 <_printf_i+0x23c>)
 8005dac:	230a      	movs	r3, #10
 8005dae:	e012      	b.n	8005dd6 <_printf_i+0xfe>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	6820      	ldr	r0, [r4, #0]
 8005db4:	1d19      	adds	r1, r3, #4
 8005db6:	6029      	str	r1, [r5, #0]
 8005db8:	0605      	lsls	r5, r0, #24
 8005dba:	d501      	bpl.n	8005dc0 <_printf_i+0xe8>
 8005dbc:	681e      	ldr	r6, [r3, #0]
 8005dbe:	e002      	b.n	8005dc6 <_printf_i+0xee>
 8005dc0:	0641      	lsls	r1, r0, #25
 8005dc2:	d5fb      	bpl.n	8005dbc <_printf_i+0xe4>
 8005dc4:	881e      	ldrh	r6, [r3, #0]
 8005dc6:	4853      	ldr	r0, [pc, #332]	; (8005f14 <_printf_i+0x23c>)
 8005dc8:	2f6f      	cmp	r7, #111	; 0x6f
 8005dca:	bf0c      	ite	eq
 8005dcc:	2308      	moveq	r3, #8
 8005dce:	230a      	movne	r3, #10
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dd6:	6865      	ldr	r5, [r4, #4]
 8005dd8:	60a5      	str	r5, [r4, #8]
 8005dda:	2d00      	cmp	r5, #0
 8005ddc:	bfa2      	ittt	ge
 8005dde:	6821      	ldrge	r1, [r4, #0]
 8005de0:	f021 0104 	bicge.w	r1, r1, #4
 8005de4:	6021      	strge	r1, [r4, #0]
 8005de6:	b90e      	cbnz	r6, 8005dec <_printf_i+0x114>
 8005de8:	2d00      	cmp	r5, #0
 8005dea:	d04b      	beq.n	8005e84 <_printf_i+0x1ac>
 8005dec:	4615      	mov	r5, r2
 8005dee:	fbb6 f1f3 	udiv	r1, r6, r3
 8005df2:	fb03 6711 	mls	r7, r3, r1, r6
 8005df6:	5dc7      	ldrb	r7, [r0, r7]
 8005df8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dfc:	4637      	mov	r7, r6
 8005dfe:	42bb      	cmp	r3, r7
 8005e00:	460e      	mov	r6, r1
 8005e02:	d9f4      	bls.n	8005dee <_printf_i+0x116>
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d10b      	bne.n	8005e20 <_printf_i+0x148>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	07de      	lsls	r6, r3, #31
 8005e0c:	d508      	bpl.n	8005e20 <_printf_i+0x148>
 8005e0e:	6923      	ldr	r3, [r4, #16]
 8005e10:	6861      	ldr	r1, [r4, #4]
 8005e12:	4299      	cmp	r1, r3
 8005e14:	bfde      	ittt	le
 8005e16:	2330      	movle	r3, #48	; 0x30
 8005e18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e20:	1b52      	subs	r2, r2, r5
 8005e22:	6122      	str	r2, [r4, #16]
 8005e24:	f8cd a000 	str.w	sl, [sp]
 8005e28:	464b      	mov	r3, r9
 8005e2a:	aa03      	add	r2, sp, #12
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	4640      	mov	r0, r8
 8005e30:	f7ff fee4 	bl	8005bfc <_printf_common>
 8005e34:	3001      	adds	r0, #1
 8005e36:	d14a      	bne.n	8005ece <_printf_i+0x1f6>
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3c:	b004      	add	sp, #16
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	f043 0320 	orr.w	r3, r3, #32
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	4833      	ldr	r0, [pc, #204]	; (8005f18 <_printf_i+0x240>)
 8005e4c:	2778      	movs	r7, #120	; 0x78
 8005e4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	6829      	ldr	r1, [r5, #0]
 8005e56:	061f      	lsls	r7, r3, #24
 8005e58:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e5c:	d402      	bmi.n	8005e64 <_printf_i+0x18c>
 8005e5e:	065f      	lsls	r7, r3, #25
 8005e60:	bf48      	it	mi
 8005e62:	b2b6      	uxthmi	r6, r6
 8005e64:	07df      	lsls	r7, r3, #31
 8005e66:	bf48      	it	mi
 8005e68:	f043 0320 	orrmi.w	r3, r3, #32
 8005e6c:	6029      	str	r1, [r5, #0]
 8005e6e:	bf48      	it	mi
 8005e70:	6023      	strmi	r3, [r4, #0]
 8005e72:	b91e      	cbnz	r6, 8005e7c <_printf_i+0x1a4>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	f023 0320 	bic.w	r3, r3, #32
 8005e7a:	6023      	str	r3, [r4, #0]
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	e7a7      	b.n	8005dd0 <_printf_i+0xf8>
 8005e80:	4824      	ldr	r0, [pc, #144]	; (8005f14 <_printf_i+0x23c>)
 8005e82:	e7e4      	b.n	8005e4e <_printf_i+0x176>
 8005e84:	4615      	mov	r5, r2
 8005e86:	e7bd      	b.n	8005e04 <_printf_i+0x12c>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	6826      	ldr	r6, [r4, #0]
 8005e8c:	6961      	ldr	r1, [r4, #20]
 8005e8e:	1d18      	adds	r0, r3, #4
 8005e90:	6028      	str	r0, [r5, #0]
 8005e92:	0635      	lsls	r5, r6, #24
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	d501      	bpl.n	8005e9c <_printf_i+0x1c4>
 8005e98:	6019      	str	r1, [r3, #0]
 8005e9a:	e002      	b.n	8005ea2 <_printf_i+0x1ca>
 8005e9c:	0670      	lsls	r0, r6, #25
 8005e9e:	d5fb      	bpl.n	8005e98 <_printf_i+0x1c0>
 8005ea0:	8019      	strh	r1, [r3, #0]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	6123      	str	r3, [r4, #16]
 8005ea6:	4615      	mov	r5, r2
 8005ea8:	e7bc      	b.n	8005e24 <_printf_i+0x14c>
 8005eaa:	682b      	ldr	r3, [r5, #0]
 8005eac:	1d1a      	adds	r2, r3, #4
 8005eae:	602a      	str	r2, [r5, #0]
 8005eb0:	681d      	ldr	r5, [r3, #0]
 8005eb2:	6862      	ldr	r2, [r4, #4]
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f7fa f98a 	bl	80001d0 <memchr>
 8005ebc:	b108      	cbz	r0, 8005ec2 <_printf_i+0x1ea>
 8005ebe:	1b40      	subs	r0, r0, r5
 8005ec0:	6060      	str	r0, [r4, #4]
 8005ec2:	6863      	ldr	r3, [r4, #4]
 8005ec4:	6123      	str	r3, [r4, #16]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ecc:	e7aa      	b.n	8005e24 <_printf_i+0x14c>
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	47d0      	blx	sl
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d0ad      	beq.n	8005e38 <_printf_i+0x160>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	079b      	lsls	r3, r3, #30
 8005ee0:	d413      	bmi.n	8005f0a <_printf_i+0x232>
 8005ee2:	68e0      	ldr	r0, [r4, #12]
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	4298      	cmp	r0, r3
 8005ee8:	bfb8      	it	lt
 8005eea:	4618      	movlt	r0, r3
 8005eec:	e7a6      	b.n	8005e3c <_printf_i+0x164>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	47d0      	blx	sl
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d09d      	beq.n	8005e38 <_printf_i+0x160>
 8005efc:	3501      	adds	r5, #1
 8005efe:	68e3      	ldr	r3, [r4, #12]
 8005f00:	9903      	ldr	r1, [sp, #12]
 8005f02:	1a5b      	subs	r3, r3, r1
 8005f04:	42ab      	cmp	r3, r5
 8005f06:	dcf2      	bgt.n	8005eee <_printf_i+0x216>
 8005f08:	e7eb      	b.n	8005ee2 <_printf_i+0x20a>
 8005f0a:	2500      	movs	r5, #0
 8005f0c:	f104 0619 	add.w	r6, r4, #25
 8005f10:	e7f5      	b.n	8005efe <_printf_i+0x226>
 8005f12:	bf00      	nop
 8005f14:	08009d92 	.word	0x08009d92
 8005f18:	08009da3 	.word	0x08009da3

08005f1c <std>:
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	b510      	push	{r4, lr}
 8005f20:	4604      	mov	r4, r0
 8005f22:	e9c0 3300 	strd	r3, r3, [r0]
 8005f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f2a:	6083      	str	r3, [r0, #8]
 8005f2c:	8181      	strh	r1, [r0, #12]
 8005f2e:	6643      	str	r3, [r0, #100]	; 0x64
 8005f30:	81c2      	strh	r2, [r0, #14]
 8005f32:	6183      	str	r3, [r0, #24]
 8005f34:	4619      	mov	r1, r3
 8005f36:	2208      	movs	r2, #8
 8005f38:	305c      	adds	r0, #92	; 0x5c
 8005f3a:	f000 f93a 	bl	80061b2 <memset>
 8005f3e:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <std+0x58>)
 8005f40:	6263      	str	r3, [r4, #36]	; 0x24
 8005f42:	4b0d      	ldr	r3, [pc, #52]	; (8005f78 <std+0x5c>)
 8005f44:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f46:	4b0d      	ldr	r3, [pc, #52]	; (8005f7c <std+0x60>)
 8005f48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f4a:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <std+0x64>)
 8005f4c:	6323      	str	r3, [r4, #48]	; 0x30
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <std+0x68>)
 8005f50:	6224      	str	r4, [r4, #32]
 8005f52:	429c      	cmp	r4, r3
 8005f54:	d006      	beq.n	8005f64 <std+0x48>
 8005f56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005f5a:	4294      	cmp	r4, r2
 8005f5c:	d002      	beq.n	8005f64 <std+0x48>
 8005f5e:	33d0      	adds	r3, #208	; 0xd0
 8005f60:	429c      	cmp	r4, r3
 8005f62:	d105      	bne.n	8005f70 <std+0x54>
 8005f64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f6c:	f000 b9b0 	b.w	80062d0 <__retarget_lock_init_recursive>
 8005f70:	bd10      	pop	{r4, pc}
 8005f72:	bf00      	nop
 8005f74:	0800612d 	.word	0x0800612d
 8005f78:	0800614f 	.word	0x0800614f
 8005f7c:	08006187 	.word	0x08006187
 8005f80:	080061ab 	.word	0x080061ab
 8005f84:	200002d8 	.word	0x200002d8

08005f88 <stdio_exit_handler>:
 8005f88:	4a02      	ldr	r2, [pc, #8]	; (8005f94 <stdio_exit_handler+0xc>)
 8005f8a:	4903      	ldr	r1, [pc, #12]	; (8005f98 <stdio_exit_handler+0x10>)
 8005f8c:	4803      	ldr	r0, [pc, #12]	; (8005f9c <stdio_exit_handler+0x14>)
 8005f8e:	f000 b869 	b.w	8006064 <_fwalk_sglue>
 8005f92:	bf00      	nop
 8005f94:	2000004c 	.word	0x2000004c
 8005f98:	08008889 	.word	0x08008889
 8005f9c:	200001c4 	.word	0x200001c4

08005fa0 <cleanup_stdio>:
 8005fa0:	6841      	ldr	r1, [r0, #4]
 8005fa2:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <cleanup_stdio+0x34>)
 8005fa4:	4299      	cmp	r1, r3
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	4604      	mov	r4, r0
 8005faa:	d001      	beq.n	8005fb0 <cleanup_stdio+0x10>
 8005fac:	f002 fc6c 	bl	8008888 <_fflush_r>
 8005fb0:	68a1      	ldr	r1, [r4, #8]
 8005fb2:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <cleanup_stdio+0x38>)
 8005fb4:	4299      	cmp	r1, r3
 8005fb6:	d002      	beq.n	8005fbe <cleanup_stdio+0x1e>
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f002 fc65 	bl	8008888 <_fflush_r>
 8005fbe:	68e1      	ldr	r1, [r4, #12]
 8005fc0:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <cleanup_stdio+0x3c>)
 8005fc2:	4299      	cmp	r1, r3
 8005fc4:	d004      	beq.n	8005fd0 <cleanup_stdio+0x30>
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fcc:	f002 bc5c 	b.w	8008888 <_fflush_r>
 8005fd0:	bd10      	pop	{r4, pc}
 8005fd2:	bf00      	nop
 8005fd4:	200002d8 	.word	0x200002d8
 8005fd8:	20000340 	.word	0x20000340
 8005fdc:	200003a8 	.word	0x200003a8

08005fe0 <global_stdio_init.part.0>:
 8005fe0:	b510      	push	{r4, lr}
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <global_stdio_init.part.0+0x30>)
 8005fe4:	4c0b      	ldr	r4, [pc, #44]	; (8006014 <global_stdio_init.part.0+0x34>)
 8005fe6:	4a0c      	ldr	r2, [pc, #48]	; (8006018 <global_stdio_init.part.0+0x38>)
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	4620      	mov	r0, r4
 8005fec:	2200      	movs	r2, #0
 8005fee:	2104      	movs	r1, #4
 8005ff0:	f7ff ff94 	bl	8005f1c <std>
 8005ff4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	2109      	movs	r1, #9
 8005ffc:	f7ff ff8e 	bl	8005f1c <std>
 8006000:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006004:	2202      	movs	r2, #2
 8006006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800600a:	2112      	movs	r1, #18
 800600c:	f7ff bf86 	b.w	8005f1c <std>
 8006010:	20000410 	.word	0x20000410
 8006014:	200002d8 	.word	0x200002d8
 8006018:	08005f89 	.word	0x08005f89

0800601c <__sfp_lock_acquire>:
 800601c:	4801      	ldr	r0, [pc, #4]	; (8006024 <__sfp_lock_acquire+0x8>)
 800601e:	f000 b958 	b.w	80062d2 <__retarget_lock_acquire_recursive>
 8006022:	bf00      	nop
 8006024:	20000419 	.word	0x20000419

08006028 <__sfp_lock_release>:
 8006028:	4801      	ldr	r0, [pc, #4]	; (8006030 <__sfp_lock_release+0x8>)
 800602a:	f000 b953 	b.w	80062d4 <__retarget_lock_release_recursive>
 800602e:	bf00      	nop
 8006030:	20000419 	.word	0x20000419

08006034 <__sinit>:
 8006034:	b510      	push	{r4, lr}
 8006036:	4604      	mov	r4, r0
 8006038:	f7ff fff0 	bl	800601c <__sfp_lock_acquire>
 800603c:	6a23      	ldr	r3, [r4, #32]
 800603e:	b11b      	cbz	r3, 8006048 <__sinit+0x14>
 8006040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006044:	f7ff bff0 	b.w	8006028 <__sfp_lock_release>
 8006048:	4b04      	ldr	r3, [pc, #16]	; (800605c <__sinit+0x28>)
 800604a:	6223      	str	r3, [r4, #32]
 800604c:	4b04      	ldr	r3, [pc, #16]	; (8006060 <__sinit+0x2c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f5      	bne.n	8006040 <__sinit+0xc>
 8006054:	f7ff ffc4 	bl	8005fe0 <global_stdio_init.part.0>
 8006058:	e7f2      	b.n	8006040 <__sinit+0xc>
 800605a:	bf00      	nop
 800605c:	08005fa1 	.word	0x08005fa1
 8006060:	20000410 	.word	0x20000410

08006064 <_fwalk_sglue>:
 8006064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006068:	4607      	mov	r7, r0
 800606a:	4688      	mov	r8, r1
 800606c:	4614      	mov	r4, r2
 800606e:	2600      	movs	r6, #0
 8006070:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006074:	f1b9 0901 	subs.w	r9, r9, #1
 8006078:	d505      	bpl.n	8006086 <_fwalk_sglue+0x22>
 800607a:	6824      	ldr	r4, [r4, #0]
 800607c:	2c00      	cmp	r4, #0
 800607e:	d1f7      	bne.n	8006070 <_fwalk_sglue+0xc>
 8006080:	4630      	mov	r0, r6
 8006082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006086:	89ab      	ldrh	r3, [r5, #12]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d907      	bls.n	800609c <_fwalk_sglue+0x38>
 800608c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006090:	3301      	adds	r3, #1
 8006092:	d003      	beq.n	800609c <_fwalk_sglue+0x38>
 8006094:	4629      	mov	r1, r5
 8006096:	4638      	mov	r0, r7
 8006098:	47c0      	blx	r8
 800609a:	4306      	orrs	r6, r0
 800609c:	3568      	adds	r5, #104	; 0x68
 800609e:	e7e9      	b.n	8006074 <_fwalk_sglue+0x10>

080060a0 <iprintf>:
 80060a0:	b40f      	push	{r0, r1, r2, r3}
 80060a2:	b507      	push	{r0, r1, r2, lr}
 80060a4:	4906      	ldr	r1, [pc, #24]	; (80060c0 <iprintf+0x20>)
 80060a6:	ab04      	add	r3, sp, #16
 80060a8:	6808      	ldr	r0, [r1, #0]
 80060aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ae:	6881      	ldr	r1, [r0, #8]
 80060b0:	9301      	str	r3, [sp, #4]
 80060b2:	f002 fa49 	bl	8008548 <_vfiprintf_r>
 80060b6:	b003      	add	sp, #12
 80060b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060bc:	b004      	add	sp, #16
 80060be:	4770      	bx	lr
 80060c0:	20000210 	.word	0x20000210

080060c4 <sniprintf>:
 80060c4:	b40c      	push	{r2, r3}
 80060c6:	b530      	push	{r4, r5, lr}
 80060c8:	4b17      	ldr	r3, [pc, #92]	; (8006128 <sniprintf+0x64>)
 80060ca:	1e0c      	subs	r4, r1, #0
 80060cc:	681d      	ldr	r5, [r3, #0]
 80060ce:	b09d      	sub	sp, #116	; 0x74
 80060d0:	da08      	bge.n	80060e4 <sniprintf+0x20>
 80060d2:	238b      	movs	r3, #139	; 0x8b
 80060d4:	602b      	str	r3, [r5, #0]
 80060d6:	f04f 30ff 	mov.w	r0, #4294967295
 80060da:	b01d      	add	sp, #116	; 0x74
 80060dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060e0:	b002      	add	sp, #8
 80060e2:	4770      	bx	lr
 80060e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80060e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80060ec:	bf14      	ite	ne
 80060ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80060f2:	4623      	moveq	r3, r4
 80060f4:	9304      	str	r3, [sp, #16]
 80060f6:	9307      	str	r3, [sp, #28]
 80060f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060fc:	9002      	str	r0, [sp, #8]
 80060fe:	9006      	str	r0, [sp, #24]
 8006100:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006104:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006106:	ab21      	add	r3, sp, #132	; 0x84
 8006108:	a902      	add	r1, sp, #8
 800610a:	4628      	mov	r0, r5
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	f002 f8f3 	bl	80082f8 <_svfiprintf_r>
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	bfbc      	itt	lt
 8006116:	238b      	movlt	r3, #139	; 0x8b
 8006118:	602b      	strlt	r3, [r5, #0]
 800611a:	2c00      	cmp	r4, #0
 800611c:	d0dd      	beq.n	80060da <sniprintf+0x16>
 800611e:	9b02      	ldr	r3, [sp, #8]
 8006120:	2200      	movs	r2, #0
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	e7d9      	b.n	80060da <sniprintf+0x16>
 8006126:	bf00      	nop
 8006128:	20000210 	.word	0x20000210

0800612c <__sread>:
 800612c:	b510      	push	{r4, lr}
 800612e:	460c      	mov	r4, r1
 8006130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006134:	f000 f87e 	bl	8006234 <_read_r>
 8006138:	2800      	cmp	r0, #0
 800613a:	bfab      	itete	ge
 800613c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800613e:	89a3      	ldrhlt	r3, [r4, #12]
 8006140:	181b      	addge	r3, r3, r0
 8006142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006146:	bfac      	ite	ge
 8006148:	6563      	strge	r3, [r4, #84]	; 0x54
 800614a:	81a3      	strhlt	r3, [r4, #12]
 800614c:	bd10      	pop	{r4, pc}

0800614e <__swrite>:
 800614e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006152:	461f      	mov	r7, r3
 8006154:	898b      	ldrh	r3, [r1, #12]
 8006156:	05db      	lsls	r3, r3, #23
 8006158:	4605      	mov	r5, r0
 800615a:	460c      	mov	r4, r1
 800615c:	4616      	mov	r6, r2
 800615e:	d505      	bpl.n	800616c <__swrite+0x1e>
 8006160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006164:	2302      	movs	r3, #2
 8006166:	2200      	movs	r2, #0
 8006168:	f000 f852 	bl	8006210 <_lseek_r>
 800616c:	89a3      	ldrh	r3, [r4, #12]
 800616e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006176:	81a3      	strh	r3, [r4, #12]
 8006178:	4632      	mov	r2, r6
 800617a:	463b      	mov	r3, r7
 800617c:	4628      	mov	r0, r5
 800617e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006182:	f000 b869 	b.w	8006258 <_write_r>

08006186 <__sseek>:
 8006186:	b510      	push	{r4, lr}
 8006188:	460c      	mov	r4, r1
 800618a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800618e:	f000 f83f 	bl	8006210 <_lseek_r>
 8006192:	1c43      	adds	r3, r0, #1
 8006194:	89a3      	ldrh	r3, [r4, #12]
 8006196:	bf15      	itete	ne
 8006198:	6560      	strne	r0, [r4, #84]	; 0x54
 800619a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800619e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061a2:	81a3      	strheq	r3, [r4, #12]
 80061a4:	bf18      	it	ne
 80061a6:	81a3      	strhne	r3, [r4, #12]
 80061a8:	bd10      	pop	{r4, pc}

080061aa <__sclose>:
 80061aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ae:	f000 b81f 	b.w	80061f0 <_close_r>

080061b2 <memset>:
 80061b2:	4402      	add	r2, r0
 80061b4:	4603      	mov	r3, r0
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d100      	bne.n	80061bc <memset+0xa>
 80061ba:	4770      	bx	lr
 80061bc:	f803 1b01 	strb.w	r1, [r3], #1
 80061c0:	e7f9      	b.n	80061b6 <memset+0x4>

080061c2 <strncmp>:
 80061c2:	b510      	push	{r4, lr}
 80061c4:	b16a      	cbz	r2, 80061e2 <strncmp+0x20>
 80061c6:	3901      	subs	r1, #1
 80061c8:	1884      	adds	r4, r0, r2
 80061ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d103      	bne.n	80061de <strncmp+0x1c>
 80061d6:	42a0      	cmp	r0, r4
 80061d8:	d001      	beq.n	80061de <strncmp+0x1c>
 80061da:	2a00      	cmp	r2, #0
 80061dc:	d1f5      	bne.n	80061ca <strncmp+0x8>
 80061de:	1ad0      	subs	r0, r2, r3
 80061e0:	bd10      	pop	{r4, pc}
 80061e2:	4610      	mov	r0, r2
 80061e4:	e7fc      	b.n	80061e0 <strncmp+0x1e>
	...

080061e8 <_localeconv_r>:
 80061e8:	4800      	ldr	r0, [pc, #0]	; (80061ec <_localeconv_r+0x4>)
 80061ea:	4770      	bx	lr
 80061ec:	20000148 	.word	0x20000148

080061f0 <_close_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d06      	ldr	r5, [pc, #24]	; (800620c <_close_r+0x1c>)
 80061f4:	2300      	movs	r3, #0
 80061f6:	4604      	mov	r4, r0
 80061f8:	4608      	mov	r0, r1
 80061fa:	602b      	str	r3, [r5, #0]
 80061fc:	f7fc fa1b 	bl	8002636 <_close>
 8006200:	1c43      	adds	r3, r0, #1
 8006202:	d102      	bne.n	800620a <_close_r+0x1a>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	b103      	cbz	r3, 800620a <_close_r+0x1a>
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	bd38      	pop	{r3, r4, r5, pc}
 800620c:	20000414 	.word	0x20000414

08006210 <_lseek_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4d07      	ldr	r5, [pc, #28]	; (8006230 <_lseek_r+0x20>)
 8006214:	4604      	mov	r4, r0
 8006216:	4608      	mov	r0, r1
 8006218:	4611      	mov	r1, r2
 800621a:	2200      	movs	r2, #0
 800621c:	602a      	str	r2, [r5, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	f7fc fa30 	bl	8002684 <_lseek>
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	d102      	bne.n	800622e <_lseek_r+0x1e>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	b103      	cbz	r3, 800622e <_lseek_r+0x1e>
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	bd38      	pop	{r3, r4, r5, pc}
 8006230:	20000414 	.word	0x20000414

08006234 <_read_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4d07      	ldr	r5, [pc, #28]	; (8006254 <_read_r+0x20>)
 8006238:	4604      	mov	r4, r0
 800623a:	4608      	mov	r0, r1
 800623c:	4611      	mov	r1, r2
 800623e:	2200      	movs	r2, #0
 8006240:	602a      	str	r2, [r5, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	f7fc f9be 	bl	80025c4 <_read>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d102      	bne.n	8006252 <_read_r+0x1e>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	b103      	cbz	r3, 8006252 <_read_r+0x1e>
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	bd38      	pop	{r3, r4, r5, pc}
 8006254:	20000414 	.word	0x20000414

08006258 <_write_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4d07      	ldr	r5, [pc, #28]	; (8006278 <_write_r+0x20>)
 800625c:	4604      	mov	r4, r0
 800625e:	4608      	mov	r0, r1
 8006260:	4611      	mov	r1, r2
 8006262:	2200      	movs	r2, #0
 8006264:	602a      	str	r2, [r5, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	f7fc f9c9 	bl	80025fe <_write>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	d102      	bne.n	8006276 <_write_r+0x1e>
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	b103      	cbz	r3, 8006276 <_write_r+0x1e>
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	20000414 	.word	0x20000414

0800627c <__errno>:
 800627c:	4b01      	ldr	r3, [pc, #4]	; (8006284 <__errno+0x8>)
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000210 	.word	0x20000210

08006288 <__libc_init_array>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	4d0d      	ldr	r5, [pc, #52]	; (80062c0 <__libc_init_array+0x38>)
 800628c:	4c0d      	ldr	r4, [pc, #52]	; (80062c4 <__libc_init_array+0x3c>)
 800628e:	1b64      	subs	r4, r4, r5
 8006290:	10a4      	asrs	r4, r4, #2
 8006292:	2600      	movs	r6, #0
 8006294:	42a6      	cmp	r6, r4
 8006296:	d109      	bne.n	80062ac <__libc_init_array+0x24>
 8006298:	4d0b      	ldr	r5, [pc, #44]	; (80062c8 <__libc_init_array+0x40>)
 800629a:	4c0c      	ldr	r4, [pc, #48]	; (80062cc <__libc_init_array+0x44>)
 800629c:	f003 fc64 	bl	8009b68 <_init>
 80062a0:	1b64      	subs	r4, r4, r5
 80062a2:	10a4      	asrs	r4, r4, #2
 80062a4:	2600      	movs	r6, #0
 80062a6:	42a6      	cmp	r6, r4
 80062a8:	d105      	bne.n	80062b6 <__libc_init_array+0x2e>
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
 80062ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b0:	4798      	blx	r3
 80062b2:	3601      	adds	r6, #1
 80062b4:	e7ee      	b.n	8006294 <__libc_init_array+0xc>
 80062b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ba:	4798      	blx	r3
 80062bc:	3601      	adds	r6, #1
 80062be:	e7f2      	b.n	80062a6 <__libc_init_array+0x1e>
 80062c0:	0800a190 	.word	0x0800a190
 80062c4:	0800a190 	.word	0x0800a190
 80062c8:	0800a190 	.word	0x0800a190
 80062cc:	0800a194 	.word	0x0800a194

080062d0 <__retarget_lock_init_recursive>:
 80062d0:	4770      	bx	lr

080062d2 <__retarget_lock_acquire_recursive>:
 80062d2:	4770      	bx	lr

080062d4 <__retarget_lock_release_recursive>:
 80062d4:	4770      	bx	lr

080062d6 <memcpy>:
 80062d6:	440a      	add	r2, r1
 80062d8:	4291      	cmp	r1, r2
 80062da:	f100 33ff 	add.w	r3, r0, #4294967295
 80062de:	d100      	bne.n	80062e2 <memcpy+0xc>
 80062e0:	4770      	bx	lr
 80062e2:	b510      	push	{r4, lr}
 80062e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ec:	4291      	cmp	r1, r2
 80062ee:	d1f9      	bne.n	80062e4 <memcpy+0xe>
 80062f0:	bd10      	pop	{r4, pc}
 80062f2:	0000      	movs	r0, r0
 80062f4:	0000      	movs	r0, r0
	...

080062f8 <nan>:
 80062f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006300 <nan+0x8>
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	00000000 	.word	0x00000000
 8006304:	7ff80000 	.word	0x7ff80000

08006308 <quorem>:
 8006308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	6903      	ldr	r3, [r0, #16]
 800630e:	690c      	ldr	r4, [r1, #16]
 8006310:	42a3      	cmp	r3, r4
 8006312:	4607      	mov	r7, r0
 8006314:	db7e      	blt.n	8006414 <quorem+0x10c>
 8006316:	3c01      	subs	r4, #1
 8006318:	f101 0814 	add.w	r8, r1, #20
 800631c:	f100 0514 	add.w	r5, r0, #20
 8006320:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800632a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800632e:	3301      	adds	r3, #1
 8006330:	429a      	cmp	r2, r3
 8006332:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006336:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800633a:	fbb2 f6f3 	udiv	r6, r2, r3
 800633e:	d331      	bcc.n	80063a4 <quorem+0x9c>
 8006340:	f04f 0e00 	mov.w	lr, #0
 8006344:	4640      	mov	r0, r8
 8006346:	46ac      	mov	ip, r5
 8006348:	46f2      	mov	sl, lr
 800634a:	f850 2b04 	ldr.w	r2, [r0], #4
 800634e:	b293      	uxth	r3, r2
 8006350:	fb06 e303 	mla	r3, r6, r3, lr
 8006354:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006358:	0c1a      	lsrs	r2, r3, #16
 800635a:	b29b      	uxth	r3, r3
 800635c:	ebaa 0303 	sub.w	r3, sl, r3
 8006360:	f8dc a000 	ldr.w	sl, [ip]
 8006364:	fa13 f38a 	uxtah	r3, r3, sl
 8006368:	fb06 220e 	mla	r2, r6, lr, r2
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	9b00      	ldr	r3, [sp, #0]
 8006370:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006374:	b292      	uxth	r2, r2
 8006376:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800637a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800637e:	f8bd 3000 	ldrh.w	r3, [sp]
 8006382:	4581      	cmp	r9, r0
 8006384:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006388:	f84c 3b04 	str.w	r3, [ip], #4
 800638c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006390:	d2db      	bcs.n	800634a <quorem+0x42>
 8006392:	f855 300b 	ldr.w	r3, [r5, fp]
 8006396:	b92b      	cbnz	r3, 80063a4 <quorem+0x9c>
 8006398:	9b01      	ldr	r3, [sp, #4]
 800639a:	3b04      	subs	r3, #4
 800639c:	429d      	cmp	r5, r3
 800639e:	461a      	mov	r2, r3
 80063a0:	d32c      	bcc.n	80063fc <quorem+0xf4>
 80063a2:	613c      	str	r4, [r7, #16]
 80063a4:	4638      	mov	r0, r7
 80063a6:	f001 fd59 	bl	8007e5c <__mcmp>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	db22      	blt.n	80063f4 <quorem+0xec>
 80063ae:	3601      	adds	r6, #1
 80063b0:	4629      	mov	r1, r5
 80063b2:	2000      	movs	r0, #0
 80063b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80063b8:	f8d1 c000 	ldr.w	ip, [r1]
 80063bc:	b293      	uxth	r3, r2
 80063be:	1ac3      	subs	r3, r0, r3
 80063c0:	0c12      	lsrs	r2, r2, #16
 80063c2:	fa13 f38c 	uxtah	r3, r3, ip
 80063c6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80063ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063d4:	45c1      	cmp	r9, r8
 80063d6:	f841 3b04 	str.w	r3, [r1], #4
 80063da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80063de:	d2e9      	bcs.n	80063b4 <quorem+0xac>
 80063e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063e8:	b922      	cbnz	r2, 80063f4 <quorem+0xec>
 80063ea:	3b04      	subs	r3, #4
 80063ec:	429d      	cmp	r5, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	d30a      	bcc.n	8006408 <quorem+0x100>
 80063f2:	613c      	str	r4, [r7, #16]
 80063f4:	4630      	mov	r0, r6
 80063f6:	b003      	add	sp, #12
 80063f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	3b04      	subs	r3, #4
 8006400:	2a00      	cmp	r2, #0
 8006402:	d1ce      	bne.n	80063a2 <quorem+0x9a>
 8006404:	3c01      	subs	r4, #1
 8006406:	e7c9      	b.n	800639c <quorem+0x94>
 8006408:	6812      	ldr	r2, [r2, #0]
 800640a:	3b04      	subs	r3, #4
 800640c:	2a00      	cmp	r2, #0
 800640e:	d1f0      	bne.n	80063f2 <quorem+0xea>
 8006410:	3c01      	subs	r4, #1
 8006412:	e7eb      	b.n	80063ec <quorem+0xe4>
 8006414:	2000      	movs	r0, #0
 8006416:	e7ee      	b.n	80063f6 <quorem+0xee>

08006418 <_dtoa_r>:
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	ed2d 8b04 	vpush	{d8-d9}
 8006420:	69c5      	ldr	r5, [r0, #28]
 8006422:	b093      	sub	sp, #76	; 0x4c
 8006424:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006428:	ec57 6b10 	vmov	r6, r7, d0
 800642c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006430:	9107      	str	r1, [sp, #28]
 8006432:	4604      	mov	r4, r0
 8006434:	920a      	str	r2, [sp, #40]	; 0x28
 8006436:	930d      	str	r3, [sp, #52]	; 0x34
 8006438:	b975      	cbnz	r5, 8006458 <_dtoa_r+0x40>
 800643a:	2010      	movs	r0, #16
 800643c:	f001 f982 	bl	8007744 <malloc>
 8006440:	4602      	mov	r2, r0
 8006442:	61e0      	str	r0, [r4, #28]
 8006444:	b920      	cbnz	r0, 8006450 <_dtoa_r+0x38>
 8006446:	4bae      	ldr	r3, [pc, #696]	; (8006700 <_dtoa_r+0x2e8>)
 8006448:	21ef      	movs	r1, #239	; 0xef
 800644a:	48ae      	ldr	r0, [pc, #696]	; (8006704 <_dtoa_r+0x2ec>)
 800644c:	f002 fb04 	bl	8008a58 <__assert_func>
 8006450:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006454:	6005      	str	r5, [r0, #0]
 8006456:	60c5      	str	r5, [r0, #12]
 8006458:	69e3      	ldr	r3, [r4, #28]
 800645a:	6819      	ldr	r1, [r3, #0]
 800645c:	b151      	cbz	r1, 8006474 <_dtoa_r+0x5c>
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	604a      	str	r2, [r1, #4]
 8006462:	2301      	movs	r3, #1
 8006464:	4093      	lsls	r3, r2
 8006466:	608b      	str	r3, [r1, #8]
 8006468:	4620      	mov	r0, r4
 800646a:	f001 fa71 	bl	8007950 <_Bfree>
 800646e:	69e3      	ldr	r3, [r4, #28]
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	1e3b      	subs	r3, r7, #0
 8006476:	bfbb      	ittet	lt
 8006478:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800647c:	9303      	strlt	r3, [sp, #12]
 800647e:	2300      	movge	r3, #0
 8006480:	2201      	movlt	r2, #1
 8006482:	bfac      	ite	ge
 8006484:	f8c8 3000 	strge.w	r3, [r8]
 8006488:	f8c8 2000 	strlt.w	r2, [r8]
 800648c:	4b9e      	ldr	r3, [pc, #632]	; (8006708 <_dtoa_r+0x2f0>)
 800648e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006492:	ea33 0308 	bics.w	r3, r3, r8
 8006496:	d11b      	bne.n	80064d0 <_dtoa_r+0xb8>
 8006498:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800649a:	f242 730f 	movw	r3, #9999	; 0x270f
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80064a4:	4333      	orrs	r3, r6
 80064a6:	f000 8593 	beq.w	8006fd0 <_dtoa_r+0xbb8>
 80064aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064ac:	b963      	cbnz	r3, 80064c8 <_dtoa_r+0xb0>
 80064ae:	4b97      	ldr	r3, [pc, #604]	; (800670c <_dtoa_r+0x2f4>)
 80064b0:	e027      	b.n	8006502 <_dtoa_r+0xea>
 80064b2:	4b97      	ldr	r3, [pc, #604]	; (8006710 <_dtoa_r+0x2f8>)
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	9800      	ldr	r0, [sp, #0]
 80064be:	b013      	add	sp, #76	; 0x4c
 80064c0:	ecbd 8b04 	vpop	{d8-d9}
 80064c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c8:	4b90      	ldr	r3, [pc, #576]	; (800670c <_dtoa_r+0x2f4>)
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	3303      	adds	r3, #3
 80064ce:	e7f3      	b.n	80064b8 <_dtoa_r+0xa0>
 80064d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064d4:	2200      	movs	r2, #0
 80064d6:	ec51 0b17 	vmov	r0, r1, d7
 80064da:	eeb0 8a47 	vmov.f32	s16, s14
 80064de:	eef0 8a67 	vmov.f32	s17, s15
 80064e2:	2300      	movs	r3, #0
 80064e4:	f7fa faf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80064e8:	4681      	mov	r9, r0
 80064ea:	b160      	cbz	r0, 8006506 <_dtoa_r+0xee>
 80064ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064ee:	2301      	movs	r3, #1
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8568 	beq.w	8006fca <_dtoa_r+0xbb2>
 80064fa:	4b86      	ldr	r3, [pc, #536]	; (8006714 <_dtoa_r+0x2fc>)
 80064fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	3b01      	subs	r3, #1
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	e7da      	b.n	80064bc <_dtoa_r+0xa4>
 8006506:	aa10      	add	r2, sp, #64	; 0x40
 8006508:	a911      	add	r1, sp, #68	; 0x44
 800650a:	4620      	mov	r0, r4
 800650c:	eeb0 0a48 	vmov.f32	s0, s16
 8006510:	eef0 0a68 	vmov.f32	s1, s17
 8006514:	f001 fdb8 	bl	8008088 <__d2b>
 8006518:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800651c:	4682      	mov	sl, r0
 800651e:	2d00      	cmp	r5, #0
 8006520:	d07f      	beq.n	8006622 <_dtoa_r+0x20a>
 8006522:	ee18 3a90 	vmov	r3, s17
 8006526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800652a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800652e:	ec51 0b18 	vmov	r0, r1, d8
 8006532:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006536:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800653a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800653e:	4619      	mov	r1, r3
 8006540:	2200      	movs	r2, #0
 8006542:	4b75      	ldr	r3, [pc, #468]	; (8006718 <_dtoa_r+0x300>)
 8006544:	f7f9 fea0 	bl	8000288 <__aeabi_dsub>
 8006548:	a367      	add	r3, pc, #412	; (adr r3, 80066e8 <_dtoa_r+0x2d0>)
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f7fa f853 	bl	80005f8 <__aeabi_dmul>
 8006552:	a367      	add	r3, pc, #412	; (adr r3, 80066f0 <_dtoa_r+0x2d8>)
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f7f9 fe98 	bl	800028c <__adddf3>
 800655c:	4606      	mov	r6, r0
 800655e:	4628      	mov	r0, r5
 8006560:	460f      	mov	r7, r1
 8006562:	f7f9 ffdf 	bl	8000524 <__aeabi_i2d>
 8006566:	a364      	add	r3, pc, #400	; (adr r3, 80066f8 <_dtoa_r+0x2e0>)
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	f7fa f844 	bl	80005f8 <__aeabi_dmul>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4630      	mov	r0, r6
 8006576:	4639      	mov	r1, r7
 8006578:	f7f9 fe88 	bl	800028c <__adddf3>
 800657c:	4606      	mov	r6, r0
 800657e:	460f      	mov	r7, r1
 8006580:	f7fa faea 	bl	8000b58 <__aeabi_d2iz>
 8006584:	2200      	movs	r2, #0
 8006586:	4683      	mov	fp, r0
 8006588:	2300      	movs	r3, #0
 800658a:	4630      	mov	r0, r6
 800658c:	4639      	mov	r1, r7
 800658e:	f7fa faa5 	bl	8000adc <__aeabi_dcmplt>
 8006592:	b148      	cbz	r0, 80065a8 <_dtoa_r+0x190>
 8006594:	4658      	mov	r0, fp
 8006596:	f7f9 ffc5 	bl	8000524 <__aeabi_i2d>
 800659a:	4632      	mov	r2, r6
 800659c:	463b      	mov	r3, r7
 800659e:	f7fa fa93 	bl	8000ac8 <__aeabi_dcmpeq>
 80065a2:	b908      	cbnz	r0, 80065a8 <_dtoa_r+0x190>
 80065a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065a8:	f1bb 0f16 	cmp.w	fp, #22
 80065ac:	d857      	bhi.n	800665e <_dtoa_r+0x246>
 80065ae:	4b5b      	ldr	r3, [pc, #364]	; (800671c <_dtoa_r+0x304>)
 80065b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	ec51 0b18 	vmov	r0, r1, d8
 80065bc:	f7fa fa8e 	bl	8000adc <__aeabi_dcmplt>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d04e      	beq.n	8006662 <_dtoa_r+0x24a>
 80065c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065c8:	2300      	movs	r3, #0
 80065ca:	930c      	str	r3, [sp, #48]	; 0x30
 80065cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065ce:	1b5b      	subs	r3, r3, r5
 80065d0:	1e5a      	subs	r2, r3, #1
 80065d2:	bf45      	ittet	mi
 80065d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80065d8:	9305      	strmi	r3, [sp, #20]
 80065da:	2300      	movpl	r3, #0
 80065dc:	2300      	movmi	r3, #0
 80065de:	9206      	str	r2, [sp, #24]
 80065e0:	bf54      	ite	pl
 80065e2:	9305      	strpl	r3, [sp, #20]
 80065e4:	9306      	strmi	r3, [sp, #24]
 80065e6:	f1bb 0f00 	cmp.w	fp, #0
 80065ea:	db3c      	blt.n	8006666 <_dtoa_r+0x24e>
 80065ec:	9b06      	ldr	r3, [sp, #24]
 80065ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80065f2:	445b      	add	r3, fp
 80065f4:	9306      	str	r3, [sp, #24]
 80065f6:	2300      	movs	r3, #0
 80065f8:	9308      	str	r3, [sp, #32]
 80065fa:	9b07      	ldr	r3, [sp, #28]
 80065fc:	2b09      	cmp	r3, #9
 80065fe:	d868      	bhi.n	80066d2 <_dtoa_r+0x2ba>
 8006600:	2b05      	cmp	r3, #5
 8006602:	bfc4      	itt	gt
 8006604:	3b04      	subgt	r3, #4
 8006606:	9307      	strgt	r3, [sp, #28]
 8006608:	9b07      	ldr	r3, [sp, #28]
 800660a:	f1a3 0302 	sub.w	r3, r3, #2
 800660e:	bfcc      	ite	gt
 8006610:	2500      	movgt	r5, #0
 8006612:	2501      	movle	r5, #1
 8006614:	2b03      	cmp	r3, #3
 8006616:	f200 8085 	bhi.w	8006724 <_dtoa_r+0x30c>
 800661a:	e8df f003 	tbb	[pc, r3]
 800661e:	3b2e      	.short	0x3b2e
 8006620:	5839      	.short	0x5839
 8006622:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006626:	441d      	add	r5, r3
 8006628:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800662c:	2b20      	cmp	r3, #32
 800662e:	bfc1      	itttt	gt
 8006630:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006634:	fa08 f803 	lslgt.w	r8, r8, r3
 8006638:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800663c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006640:	bfd6      	itet	le
 8006642:	f1c3 0320 	rsble	r3, r3, #32
 8006646:	ea48 0003 	orrgt.w	r0, r8, r3
 800664a:	fa06 f003 	lslle.w	r0, r6, r3
 800664e:	f7f9 ff59 	bl	8000504 <__aeabi_ui2d>
 8006652:	2201      	movs	r2, #1
 8006654:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006658:	3d01      	subs	r5, #1
 800665a:	920e      	str	r2, [sp, #56]	; 0x38
 800665c:	e76f      	b.n	800653e <_dtoa_r+0x126>
 800665e:	2301      	movs	r3, #1
 8006660:	e7b3      	b.n	80065ca <_dtoa_r+0x1b2>
 8006662:	900c      	str	r0, [sp, #48]	; 0x30
 8006664:	e7b2      	b.n	80065cc <_dtoa_r+0x1b4>
 8006666:	9b05      	ldr	r3, [sp, #20]
 8006668:	eba3 030b 	sub.w	r3, r3, fp
 800666c:	9305      	str	r3, [sp, #20]
 800666e:	f1cb 0300 	rsb	r3, fp, #0
 8006672:	9308      	str	r3, [sp, #32]
 8006674:	2300      	movs	r3, #0
 8006676:	930b      	str	r3, [sp, #44]	; 0x2c
 8006678:	e7bf      	b.n	80065fa <_dtoa_r+0x1e2>
 800667a:	2300      	movs	r3, #0
 800667c:	9309      	str	r3, [sp, #36]	; 0x24
 800667e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006680:	2b00      	cmp	r3, #0
 8006682:	dc52      	bgt.n	800672a <_dtoa_r+0x312>
 8006684:	2301      	movs	r3, #1
 8006686:	9301      	str	r3, [sp, #4]
 8006688:	9304      	str	r3, [sp, #16]
 800668a:	461a      	mov	r2, r3
 800668c:	920a      	str	r2, [sp, #40]	; 0x28
 800668e:	e00b      	b.n	80066a8 <_dtoa_r+0x290>
 8006690:	2301      	movs	r3, #1
 8006692:	e7f3      	b.n	800667c <_dtoa_r+0x264>
 8006694:	2300      	movs	r3, #0
 8006696:	9309      	str	r3, [sp, #36]	; 0x24
 8006698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800669a:	445b      	add	r3, fp
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	3301      	adds	r3, #1
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	9304      	str	r3, [sp, #16]
 80066a4:	bfb8      	it	lt
 80066a6:	2301      	movlt	r3, #1
 80066a8:	69e0      	ldr	r0, [r4, #28]
 80066aa:	2100      	movs	r1, #0
 80066ac:	2204      	movs	r2, #4
 80066ae:	f102 0614 	add.w	r6, r2, #20
 80066b2:	429e      	cmp	r6, r3
 80066b4:	d93d      	bls.n	8006732 <_dtoa_r+0x31a>
 80066b6:	6041      	str	r1, [r0, #4]
 80066b8:	4620      	mov	r0, r4
 80066ba:	f001 f909 	bl	80078d0 <_Balloc>
 80066be:	9000      	str	r0, [sp, #0]
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d139      	bne.n	8006738 <_dtoa_r+0x320>
 80066c4:	4b16      	ldr	r3, [pc, #88]	; (8006720 <_dtoa_r+0x308>)
 80066c6:	4602      	mov	r2, r0
 80066c8:	f240 11af 	movw	r1, #431	; 0x1af
 80066cc:	e6bd      	b.n	800644a <_dtoa_r+0x32>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e7e1      	b.n	8006696 <_dtoa_r+0x27e>
 80066d2:	2501      	movs	r5, #1
 80066d4:	2300      	movs	r3, #0
 80066d6:	9307      	str	r3, [sp, #28]
 80066d8:	9509      	str	r5, [sp, #36]	; 0x24
 80066da:	f04f 33ff 	mov.w	r3, #4294967295
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	9304      	str	r3, [sp, #16]
 80066e2:	2200      	movs	r2, #0
 80066e4:	2312      	movs	r3, #18
 80066e6:	e7d1      	b.n	800668c <_dtoa_r+0x274>
 80066e8:	636f4361 	.word	0x636f4361
 80066ec:	3fd287a7 	.word	0x3fd287a7
 80066f0:	8b60c8b3 	.word	0x8b60c8b3
 80066f4:	3fc68a28 	.word	0x3fc68a28
 80066f8:	509f79fb 	.word	0x509f79fb
 80066fc:	3fd34413 	.word	0x3fd34413
 8006700:	08009dc9 	.word	0x08009dc9
 8006704:	08009de0 	.word	0x08009de0
 8006708:	7ff00000 	.word	0x7ff00000
 800670c:	08009dc5 	.word	0x08009dc5
 8006710:	08009dbc 	.word	0x08009dbc
 8006714:	08009d91 	.word	0x08009d91
 8006718:	3ff80000 	.word	0x3ff80000
 800671c:	08009f30 	.word	0x08009f30
 8006720:	08009e38 	.word	0x08009e38
 8006724:	2301      	movs	r3, #1
 8006726:	9309      	str	r3, [sp, #36]	; 0x24
 8006728:	e7d7      	b.n	80066da <_dtoa_r+0x2c2>
 800672a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800672c:	9301      	str	r3, [sp, #4]
 800672e:	9304      	str	r3, [sp, #16]
 8006730:	e7ba      	b.n	80066a8 <_dtoa_r+0x290>
 8006732:	3101      	adds	r1, #1
 8006734:	0052      	lsls	r2, r2, #1
 8006736:	e7ba      	b.n	80066ae <_dtoa_r+0x296>
 8006738:	69e3      	ldr	r3, [r4, #28]
 800673a:	9a00      	ldr	r2, [sp, #0]
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	2b0e      	cmp	r3, #14
 8006742:	f200 80a8 	bhi.w	8006896 <_dtoa_r+0x47e>
 8006746:	2d00      	cmp	r5, #0
 8006748:	f000 80a5 	beq.w	8006896 <_dtoa_r+0x47e>
 800674c:	f1bb 0f00 	cmp.w	fp, #0
 8006750:	dd38      	ble.n	80067c4 <_dtoa_r+0x3ac>
 8006752:	4bc0      	ldr	r3, [pc, #768]	; (8006a54 <_dtoa_r+0x63c>)
 8006754:	f00b 020f 	and.w	r2, fp, #15
 8006758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800675c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006760:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006764:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006768:	d019      	beq.n	800679e <_dtoa_r+0x386>
 800676a:	4bbb      	ldr	r3, [pc, #748]	; (8006a58 <_dtoa_r+0x640>)
 800676c:	ec51 0b18 	vmov	r0, r1, d8
 8006770:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006774:	f7fa f86a 	bl	800084c <__aeabi_ddiv>
 8006778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800677c:	f008 080f 	and.w	r8, r8, #15
 8006780:	2503      	movs	r5, #3
 8006782:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006a58 <_dtoa_r+0x640>
 8006786:	f1b8 0f00 	cmp.w	r8, #0
 800678a:	d10a      	bne.n	80067a2 <_dtoa_r+0x38a>
 800678c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006790:	4632      	mov	r2, r6
 8006792:	463b      	mov	r3, r7
 8006794:	f7fa f85a 	bl	800084c <__aeabi_ddiv>
 8006798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800679c:	e02b      	b.n	80067f6 <_dtoa_r+0x3de>
 800679e:	2502      	movs	r5, #2
 80067a0:	e7ef      	b.n	8006782 <_dtoa_r+0x36a>
 80067a2:	f018 0f01 	tst.w	r8, #1
 80067a6:	d008      	beq.n	80067ba <_dtoa_r+0x3a2>
 80067a8:	4630      	mov	r0, r6
 80067aa:	4639      	mov	r1, r7
 80067ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80067b0:	f7f9 ff22 	bl	80005f8 <__aeabi_dmul>
 80067b4:	3501      	adds	r5, #1
 80067b6:	4606      	mov	r6, r0
 80067b8:	460f      	mov	r7, r1
 80067ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80067be:	f109 0908 	add.w	r9, r9, #8
 80067c2:	e7e0      	b.n	8006786 <_dtoa_r+0x36e>
 80067c4:	f000 809f 	beq.w	8006906 <_dtoa_r+0x4ee>
 80067c8:	f1cb 0600 	rsb	r6, fp, #0
 80067cc:	4ba1      	ldr	r3, [pc, #644]	; (8006a54 <_dtoa_r+0x63c>)
 80067ce:	4fa2      	ldr	r7, [pc, #648]	; (8006a58 <_dtoa_r+0x640>)
 80067d0:	f006 020f 	and.w	r2, r6, #15
 80067d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	ec51 0b18 	vmov	r0, r1, d8
 80067e0:	f7f9 ff0a 	bl	80005f8 <__aeabi_dmul>
 80067e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067e8:	1136      	asrs	r6, r6, #4
 80067ea:	2300      	movs	r3, #0
 80067ec:	2502      	movs	r5, #2
 80067ee:	2e00      	cmp	r6, #0
 80067f0:	d17e      	bne.n	80068f0 <_dtoa_r+0x4d8>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1d0      	bne.n	8006798 <_dtoa_r+0x380>
 80067f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 8084 	beq.w	800690a <_dtoa_r+0x4f2>
 8006802:	4b96      	ldr	r3, [pc, #600]	; (8006a5c <_dtoa_r+0x644>)
 8006804:	2200      	movs	r2, #0
 8006806:	4640      	mov	r0, r8
 8006808:	4649      	mov	r1, r9
 800680a:	f7fa f967 	bl	8000adc <__aeabi_dcmplt>
 800680e:	2800      	cmp	r0, #0
 8006810:	d07b      	beq.n	800690a <_dtoa_r+0x4f2>
 8006812:	9b04      	ldr	r3, [sp, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d078      	beq.n	800690a <_dtoa_r+0x4f2>
 8006818:	9b01      	ldr	r3, [sp, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	dd39      	ble.n	8006892 <_dtoa_r+0x47a>
 800681e:	4b90      	ldr	r3, [pc, #576]	; (8006a60 <_dtoa_r+0x648>)
 8006820:	2200      	movs	r2, #0
 8006822:	4640      	mov	r0, r8
 8006824:	4649      	mov	r1, r9
 8006826:	f7f9 fee7 	bl	80005f8 <__aeabi_dmul>
 800682a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800682e:	9e01      	ldr	r6, [sp, #4]
 8006830:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006834:	3501      	adds	r5, #1
 8006836:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800683a:	4628      	mov	r0, r5
 800683c:	f7f9 fe72 	bl	8000524 <__aeabi_i2d>
 8006840:	4642      	mov	r2, r8
 8006842:	464b      	mov	r3, r9
 8006844:	f7f9 fed8 	bl	80005f8 <__aeabi_dmul>
 8006848:	4b86      	ldr	r3, [pc, #536]	; (8006a64 <_dtoa_r+0x64c>)
 800684a:	2200      	movs	r2, #0
 800684c:	f7f9 fd1e 	bl	800028c <__adddf3>
 8006850:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006858:	9303      	str	r3, [sp, #12]
 800685a:	2e00      	cmp	r6, #0
 800685c:	d158      	bne.n	8006910 <_dtoa_r+0x4f8>
 800685e:	4b82      	ldr	r3, [pc, #520]	; (8006a68 <_dtoa_r+0x650>)
 8006860:	2200      	movs	r2, #0
 8006862:	4640      	mov	r0, r8
 8006864:	4649      	mov	r1, r9
 8006866:	f7f9 fd0f 	bl	8000288 <__aeabi_dsub>
 800686a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800686e:	4680      	mov	r8, r0
 8006870:	4689      	mov	r9, r1
 8006872:	f7fa f951 	bl	8000b18 <__aeabi_dcmpgt>
 8006876:	2800      	cmp	r0, #0
 8006878:	f040 8296 	bne.w	8006da8 <_dtoa_r+0x990>
 800687c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006880:	4640      	mov	r0, r8
 8006882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006886:	4649      	mov	r1, r9
 8006888:	f7fa f928 	bl	8000adc <__aeabi_dcmplt>
 800688c:	2800      	cmp	r0, #0
 800688e:	f040 8289 	bne.w	8006da4 <_dtoa_r+0x98c>
 8006892:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006896:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006898:	2b00      	cmp	r3, #0
 800689a:	f2c0 814e 	blt.w	8006b3a <_dtoa_r+0x722>
 800689e:	f1bb 0f0e 	cmp.w	fp, #14
 80068a2:	f300 814a 	bgt.w	8006b3a <_dtoa_r+0x722>
 80068a6:	4b6b      	ldr	r3, [pc, #428]	; (8006a54 <_dtoa_r+0x63c>)
 80068a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80068ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f280 80dc 	bge.w	8006a70 <_dtoa_r+0x658>
 80068b8:	9b04      	ldr	r3, [sp, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f300 80d8 	bgt.w	8006a70 <_dtoa_r+0x658>
 80068c0:	f040 826f 	bne.w	8006da2 <_dtoa_r+0x98a>
 80068c4:	4b68      	ldr	r3, [pc, #416]	; (8006a68 <_dtoa_r+0x650>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	4640      	mov	r0, r8
 80068ca:	4649      	mov	r1, r9
 80068cc:	f7f9 fe94 	bl	80005f8 <__aeabi_dmul>
 80068d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068d4:	f7fa f916 	bl	8000b04 <__aeabi_dcmpge>
 80068d8:	9e04      	ldr	r6, [sp, #16]
 80068da:	4637      	mov	r7, r6
 80068dc:	2800      	cmp	r0, #0
 80068de:	f040 8245 	bne.w	8006d6c <_dtoa_r+0x954>
 80068e2:	9d00      	ldr	r5, [sp, #0]
 80068e4:	2331      	movs	r3, #49	; 0x31
 80068e6:	f805 3b01 	strb.w	r3, [r5], #1
 80068ea:	f10b 0b01 	add.w	fp, fp, #1
 80068ee:	e241      	b.n	8006d74 <_dtoa_r+0x95c>
 80068f0:	07f2      	lsls	r2, r6, #31
 80068f2:	d505      	bpl.n	8006900 <_dtoa_r+0x4e8>
 80068f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068f8:	f7f9 fe7e 	bl	80005f8 <__aeabi_dmul>
 80068fc:	3501      	adds	r5, #1
 80068fe:	2301      	movs	r3, #1
 8006900:	1076      	asrs	r6, r6, #1
 8006902:	3708      	adds	r7, #8
 8006904:	e773      	b.n	80067ee <_dtoa_r+0x3d6>
 8006906:	2502      	movs	r5, #2
 8006908:	e775      	b.n	80067f6 <_dtoa_r+0x3de>
 800690a:	9e04      	ldr	r6, [sp, #16]
 800690c:	465f      	mov	r7, fp
 800690e:	e792      	b.n	8006836 <_dtoa_r+0x41e>
 8006910:	9900      	ldr	r1, [sp, #0]
 8006912:	4b50      	ldr	r3, [pc, #320]	; (8006a54 <_dtoa_r+0x63c>)
 8006914:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006918:	4431      	add	r1, r6
 800691a:	9102      	str	r1, [sp, #8]
 800691c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800691e:	eeb0 9a47 	vmov.f32	s18, s14
 8006922:	eef0 9a67 	vmov.f32	s19, s15
 8006926:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800692a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800692e:	2900      	cmp	r1, #0
 8006930:	d044      	beq.n	80069bc <_dtoa_r+0x5a4>
 8006932:	494e      	ldr	r1, [pc, #312]	; (8006a6c <_dtoa_r+0x654>)
 8006934:	2000      	movs	r0, #0
 8006936:	f7f9 ff89 	bl	800084c <__aeabi_ddiv>
 800693a:	ec53 2b19 	vmov	r2, r3, d9
 800693e:	f7f9 fca3 	bl	8000288 <__aeabi_dsub>
 8006942:	9d00      	ldr	r5, [sp, #0]
 8006944:	ec41 0b19 	vmov	d9, r0, r1
 8006948:	4649      	mov	r1, r9
 800694a:	4640      	mov	r0, r8
 800694c:	f7fa f904 	bl	8000b58 <__aeabi_d2iz>
 8006950:	4606      	mov	r6, r0
 8006952:	f7f9 fde7 	bl	8000524 <__aeabi_i2d>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4640      	mov	r0, r8
 800695c:	4649      	mov	r1, r9
 800695e:	f7f9 fc93 	bl	8000288 <__aeabi_dsub>
 8006962:	3630      	adds	r6, #48	; 0x30
 8006964:	f805 6b01 	strb.w	r6, [r5], #1
 8006968:	ec53 2b19 	vmov	r2, r3, d9
 800696c:	4680      	mov	r8, r0
 800696e:	4689      	mov	r9, r1
 8006970:	f7fa f8b4 	bl	8000adc <__aeabi_dcmplt>
 8006974:	2800      	cmp	r0, #0
 8006976:	d164      	bne.n	8006a42 <_dtoa_r+0x62a>
 8006978:	4642      	mov	r2, r8
 800697a:	464b      	mov	r3, r9
 800697c:	4937      	ldr	r1, [pc, #220]	; (8006a5c <_dtoa_r+0x644>)
 800697e:	2000      	movs	r0, #0
 8006980:	f7f9 fc82 	bl	8000288 <__aeabi_dsub>
 8006984:	ec53 2b19 	vmov	r2, r3, d9
 8006988:	f7fa f8a8 	bl	8000adc <__aeabi_dcmplt>
 800698c:	2800      	cmp	r0, #0
 800698e:	f040 80b6 	bne.w	8006afe <_dtoa_r+0x6e6>
 8006992:	9b02      	ldr	r3, [sp, #8]
 8006994:	429d      	cmp	r5, r3
 8006996:	f43f af7c 	beq.w	8006892 <_dtoa_r+0x47a>
 800699a:	4b31      	ldr	r3, [pc, #196]	; (8006a60 <_dtoa_r+0x648>)
 800699c:	ec51 0b19 	vmov	r0, r1, d9
 80069a0:	2200      	movs	r2, #0
 80069a2:	f7f9 fe29 	bl	80005f8 <__aeabi_dmul>
 80069a6:	4b2e      	ldr	r3, [pc, #184]	; (8006a60 <_dtoa_r+0x648>)
 80069a8:	ec41 0b19 	vmov	d9, r0, r1
 80069ac:	2200      	movs	r2, #0
 80069ae:	4640      	mov	r0, r8
 80069b0:	4649      	mov	r1, r9
 80069b2:	f7f9 fe21 	bl	80005f8 <__aeabi_dmul>
 80069b6:	4680      	mov	r8, r0
 80069b8:	4689      	mov	r9, r1
 80069ba:	e7c5      	b.n	8006948 <_dtoa_r+0x530>
 80069bc:	ec51 0b17 	vmov	r0, r1, d7
 80069c0:	f7f9 fe1a 	bl	80005f8 <__aeabi_dmul>
 80069c4:	9b02      	ldr	r3, [sp, #8]
 80069c6:	9d00      	ldr	r5, [sp, #0]
 80069c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80069ca:	ec41 0b19 	vmov	d9, r0, r1
 80069ce:	4649      	mov	r1, r9
 80069d0:	4640      	mov	r0, r8
 80069d2:	f7fa f8c1 	bl	8000b58 <__aeabi_d2iz>
 80069d6:	4606      	mov	r6, r0
 80069d8:	f7f9 fda4 	bl	8000524 <__aeabi_i2d>
 80069dc:	3630      	adds	r6, #48	; 0x30
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4640      	mov	r0, r8
 80069e4:	4649      	mov	r1, r9
 80069e6:	f7f9 fc4f 	bl	8000288 <__aeabi_dsub>
 80069ea:	f805 6b01 	strb.w	r6, [r5], #1
 80069ee:	9b02      	ldr	r3, [sp, #8]
 80069f0:	429d      	cmp	r5, r3
 80069f2:	4680      	mov	r8, r0
 80069f4:	4689      	mov	r9, r1
 80069f6:	f04f 0200 	mov.w	r2, #0
 80069fa:	d124      	bne.n	8006a46 <_dtoa_r+0x62e>
 80069fc:	4b1b      	ldr	r3, [pc, #108]	; (8006a6c <_dtoa_r+0x654>)
 80069fe:	ec51 0b19 	vmov	r0, r1, d9
 8006a02:	f7f9 fc43 	bl	800028c <__adddf3>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	f7fa f883 	bl	8000b18 <__aeabi_dcmpgt>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d173      	bne.n	8006afe <_dtoa_r+0x6e6>
 8006a16:	ec53 2b19 	vmov	r2, r3, d9
 8006a1a:	4914      	ldr	r1, [pc, #80]	; (8006a6c <_dtoa_r+0x654>)
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	f7f9 fc33 	bl	8000288 <__aeabi_dsub>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	4640      	mov	r0, r8
 8006a28:	4649      	mov	r1, r9
 8006a2a:	f7fa f857 	bl	8000adc <__aeabi_dcmplt>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f43f af2f 	beq.w	8006892 <_dtoa_r+0x47a>
 8006a34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a36:	1e6b      	subs	r3, r5, #1
 8006a38:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a3e:	2b30      	cmp	r3, #48	; 0x30
 8006a40:	d0f8      	beq.n	8006a34 <_dtoa_r+0x61c>
 8006a42:	46bb      	mov	fp, r7
 8006a44:	e04a      	b.n	8006adc <_dtoa_r+0x6c4>
 8006a46:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <_dtoa_r+0x648>)
 8006a48:	f7f9 fdd6 	bl	80005f8 <__aeabi_dmul>
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	4689      	mov	r9, r1
 8006a50:	e7bd      	b.n	80069ce <_dtoa_r+0x5b6>
 8006a52:	bf00      	nop
 8006a54:	08009f30 	.word	0x08009f30
 8006a58:	08009f08 	.word	0x08009f08
 8006a5c:	3ff00000 	.word	0x3ff00000
 8006a60:	40240000 	.word	0x40240000
 8006a64:	401c0000 	.word	0x401c0000
 8006a68:	40140000 	.word	0x40140000
 8006a6c:	3fe00000 	.word	0x3fe00000
 8006a70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a74:	9d00      	ldr	r5, [sp, #0]
 8006a76:	4642      	mov	r2, r8
 8006a78:	464b      	mov	r3, r9
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	4639      	mov	r1, r7
 8006a7e:	f7f9 fee5 	bl	800084c <__aeabi_ddiv>
 8006a82:	f7fa f869 	bl	8000b58 <__aeabi_d2iz>
 8006a86:	9001      	str	r0, [sp, #4]
 8006a88:	f7f9 fd4c 	bl	8000524 <__aeabi_i2d>
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	464b      	mov	r3, r9
 8006a90:	f7f9 fdb2 	bl	80005f8 <__aeabi_dmul>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4630      	mov	r0, r6
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	f7f9 fbf4 	bl	8000288 <__aeabi_dsub>
 8006aa0:	9e01      	ldr	r6, [sp, #4]
 8006aa2:	9f04      	ldr	r7, [sp, #16]
 8006aa4:	3630      	adds	r6, #48	; 0x30
 8006aa6:	f805 6b01 	strb.w	r6, [r5], #1
 8006aaa:	9e00      	ldr	r6, [sp, #0]
 8006aac:	1bae      	subs	r6, r5, r6
 8006aae:	42b7      	cmp	r7, r6
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	d134      	bne.n	8006b20 <_dtoa_r+0x708>
 8006ab6:	f7f9 fbe9 	bl	800028c <__adddf3>
 8006aba:	4642      	mov	r2, r8
 8006abc:	464b      	mov	r3, r9
 8006abe:	4606      	mov	r6, r0
 8006ac0:	460f      	mov	r7, r1
 8006ac2:	f7fa f829 	bl	8000b18 <__aeabi_dcmpgt>
 8006ac6:	b9c8      	cbnz	r0, 8006afc <_dtoa_r+0x6e4>
 8006ac8:	4642      	mov	r2, r8
 8006aca:	464b      	mov	r3, r9
 8006acc:	4630      	mov	r0, r6
 8006ace:	4639      	mov	r1, r7
 8006ad0:	f7f9 fffa 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ad4:	b110      	cbz	r0, 8006adc <_dtoa_r+0x6c4>
 8006ad6:	9b01      	ldr	r3, [sp, #4]
 8006ad8:	07db      	lsls	r3, r3, #31
 8006ada:	d40f      	bmi.n	8006afc <_dtoa_r+0x6e4>
 8006adc:	4651      	mov	r1, sl
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f000 ff36 	bl	8007950 <_Bfree>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ae8:	702b      	strb	r3, [r5, #0]
 8006aea:	f10b 0301 	add.w	r3, fp, #1
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f43f ace2 	beq.w	80064bc <_dtoa_r+0xa4>
 8006af8:	601d      	str	r5, [r3, #0]
 8006afa:	e4df      	b.n	80064bc <_dtoa_r+0xa4>
 8006afc:	465f      	mov	r7, fp
 8006afe:	462b      	mov	r3, r5
 8006b00:	461d      	mov	r5, r3
 8006b02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b06:	2a39      	cmp	r2, #57	; 0x39
 8006b08:	d106      	bne.n	8006b18 <_dtoa_r+0x700>
 8006b0a:	9a00      	ldr	r2, [sp, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d1f7      	bne.n	8006b00 <_dtoa_r+0x6e8>
 8006b10:	9900      	ldr	r1, [sp, #0]
 8006b12:	2230      	movs	r2, #48	; 0x30
 8006b14:	3701      	adds	r7, #1
 8006b16:	700a      	strb	r2, [r1, #0]
 8006b18:	781a      	ldrb	r2, [r3, #0]
 8006b1a:	3201      	adds	r2, #1
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	e790      	b.n	8006a42 <_dtoa_r+0x62a>
 8006b20:	4ba3      	ldr	r3, [pc, #652]	; (8006db0 <_dtoa_r+0x998>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	f7f9 fd68 	bl	80005f8 <__aeabi_dmul>
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	460f      	mov	r7, r1
 8006b30:	f7f9 ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d09e      	beq.n	8006a76 <_dtoa_r+0x65e>
 8006b38:	e7d0      	b.n	8006adc <_dtoa_r+0x6c4>
 8006b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b3c:	2a00      	cmp	r2, #0
 8006b3e:	f000 80ca 	beq.w	8006cd6 <_dtoa_r+0x8be>
 8006b42:	9a07      	ldr	r2, [sp, #28]
 8006b44:	2a01      	cmp	r2, #1
 8006b46:	f300 80ad 	bgt.w	8006ca4 <_dtoa_r+0x88c>
 8006b4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b4c:	2a00      	cmp	r2, #0
 8006b4e:	f000 80a5 	beq.w	8006c9c <_dtoa_r+0x884>
 8006b52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b56:	9e08      	ldr	r6, [sp, #32]
 8006b58:	9d05      	ldr	r5, [sp, #20]
 8006b5a:	9a05      	ldr	r2, [sp, #20]
 8006b5c:	441a      	add	r2, r3
 8006b5e:	9205      	str	r2, [sp, #20]
 8006b60:	9a06      	ldr	r2, [sp, #24]
 8006b62:	2101      	movs	r1, #1
 8006b64:	441a      	add	r2, r3
 8006b66:	4620      	mov	r0, r4
 8006b68:	9206      	str	r2, [sp, #24]
 8006b6a:	f000 fff1 	bl	8007b50 <__i2b>
 8006b6e:	4607      	mov	r7, r0
 8006b70:	b165      	cbz	r5, 8006b8c <_dtoa_r+0x774>
 8006b72:	9b06      	ldr	r3, [sp, #24]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dd09      	ble.n	8006b8c <_dtoa_r+0x774>
 8006b78:	42ab      	cmp	r3, r5
 8006b7a:	9a05      	ldr	r2, [sp, #20]
 8006b7c:	bfa8      	it	ge
 8006b7e:	462b      	movge	r3, r5
 8006b80:	1ad2      	subs	r2, r2, r3
 8006b82:	9205      	str	r2, [sp, #20]
 8006b84:	9a06      	ldr	r2, [sp, #24]
 8006b86:	1aed      	subs	r5, r5, r3
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	9306      	str	r3, [sp, #24]
 8006b8c:	9b08      	ldr	r3, [sp, #32]
 8006b8e:	b1f3      	cbz	r3, 8006bce <_dtoa_r+0x7b6>
 8006b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 80a3 	beq.w	8006cde <_dtoa_r+0x8c6>
 8006b98:	2e00      	cmp	r6, #0
 8006b9a:	dd10      	ble.n	8006bbe <_dtoa_r+0x7a6>
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	4632      	mov	r2, r6
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f001 f895 	bl	8007cd0 <__pow5mult>
 8006ba6:	4652      	mov	r2, sl
 8006ba8:	4601      	mov	r1, r0
 8006baa:	4607      	mov	r7, r0
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 ffe5 	bl	8007b7c <__multiply>
 8006bb2:	4651      	mov	r1, sl
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 feca 	bl	8007950 <_Bfree>
 8006bbc:	46c2      	mov	sl, r8
 8006bbe:	9b08      	ldr	r3, [sp, #32]
 8006bc0:	1b9a      	subs	r2, r3, r6
 8006bc2:	d004      	beq.n	8006bce <_dtoa_r+0x7b6>
 8006bc4:	4651      	mov	r1, sl
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f001 f882 	bl	8007cd0 <__pow5mult>
 8006bcc:	4682      	mov	sl, r0
 8006bce:	2101      	movs	r1, #1
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 ffbd 	bl	8007b50 <__i2b>
 8006bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	4606      	mov	r6, r0
 8006bdc:	f340 8081 	ble.w	8006ce2 <_dtoa_r+0x8ca>
 8006be0:	461a      	mov	r2, r3
 8006be2:	4601      	mov	r1, r0
 8006be4:	4620      	mov	r0, r4
 8006be6:	f001 f873 	bl	8007cd0 <__pow5mult>
 8006bea:	9b07      	ldr	r3, [sp, #28]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	4606      	mov	r6, r0
 8006bf0:	dd7a      	ble.n	8006ce8 <_dtoa_r+0x8d0>
 8006bf2:	f04f 0800 	mov.w	r8, #0
 8006bf6:	6933      	ldr	r3, [r6, #16]
 8006bf8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006bfc:	6918      	ldr	r0, [r3, #16]
 8006bfe:	f000 ff59 	bl	8007ab4 <__hi0bits>
 8006c02:	f1c0 0020 	rsb	r0, r0, #32
 8006c06:	9b06      	ldr	r3, [sp, #24]
 8006c08:	4418      	add	r0, r3
 8006c0a:	f010 001f 	ands.w	r0, r0, #31
 8006c0e:	f000 8094 	beq.w	8006d3a <_dtoa_r+0x922>
 8006c12:	f1c0 0320 	rsb	r3, r0, #32
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	f340 8085 	ble.w	8006d26 <_dtoa_r+0x90e>
 8006c1c:	9b05      	ldr	r3, [sp, #20]
 8006c1e:	f1c0 001c 	rsb	r0, r0, #28
 8006c22:	4403      	add	r3, r0
 8006c24:	9305      	str	r3, [sp, #20]
 8006c26:	9b06      	ldr	r3, [sp, #24]
 8006c28:	4403      	add	r3, r0
 8006c2a:	4405      	add	r5, r0
 8006c2c:	9306      	str	r3, [sp, #24]
 8006c2e:	9b05      	ldr	r3, [sp, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	dd05      	ble.n	8006c40 <_dtoa_r+0x828>
 8006c34:	4651      	mov	r1, sl
 8006c36:	461a      	mov	r2, r3
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f001 f8a3 	bl	8007d84 <__lshift>
 8006c3e:	4682      	mov	sl, r0
 8006c40:	9b06      	ldr	r3, [sp, #24]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	dd05      	ble.n	8006c52 <_dtoa_r+0x83a>
 8006c46:	4631      	mov	r1, r6
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f001 f89a 	bl	8007d84 <__lshift>
 8006c50:	4606      	mov	r6, r0
 8006c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d072      	beq.n	8006d3e <_dtoa_r+0x926>
 8006c58:	4631      	mov	r1, r6
 8006c5a:	4650      	mov	r0, sl
 8006c5c:	f001 f8fe 	bl	8007e5c <__mcmp>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	da6c      	bge.n	8006d3e <_dtoa_r+0x926>
 8006c64:	2300      	movs	r3, #0
 8006c66:	4651      	mov	r1, sl
 8006c68:	220a      	movs	r2, #10
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 fe92 	bl	8007994 <__multadd>
 8006c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c76:	4682      	mov	sl, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 81b0 	beq.w	8006fde <_dtoa_r+0xbc6>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	4639      	mov	r1, r7
 8006c82:	220a      	movs	r2, #10
 8006c84:	4620      	mov	r0, r4
 8006c86:	f000 fe85 	bl	8007994 <__multadd>
 8006c8a:	9b01      	ldr	r3, [sp, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	4607      	mov	r7, r0
 8006c90:	f300 8096 	bgt.w	8006dc0 <_dtoa_r+0x9a8>
 8006c94:	9b07      	ldr	r3, [sp, #28]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	dc59      	bgt.n	8006d4e <_dtoa_r+0x936>
 8006c9a:	e091      	b.n	8006dc0 <_dtoa_r+0x9a8>
 8006c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ca2:	e758      	b.n	8006b56 <_dtoa_r+0x73e>
 8006ca4:	9b04      	ldr	r3, [sp, #16]
 8006ca6:	1e5e      	subs	r6, r3, #1
 8006ca8:	9b08      	ldr	r3, [sp, #32]
 8006caa:	42b3      	cmp	r3, r6
 8006cac:	bfbf      	itttt	lt
 8006cae:	9b08      	ldrlt	r3, [sp, #32]
 8006cb0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006cb2:	9608      	strlt	r6, [sp, #32]
 8006cb4:	1af3      	sublt	r3, r6, r3
 8006cb6:	bfb4      	ite	lt
 8006cb8:	18d2      	addlt	r2, r2, r3
 8006cba:	1b9e      	subge	r6, r3, r6
 8006cbc:	9b04      	ldr	r3, [sp, #16]
 8006cbe:	bfbc      	itt	lt
 8006cc0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006cc2:	2600      	movlt	r6, #0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bfb7      	itett	lt
 8006cc8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006ccc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006cd0:	1a9d      	sublt	r5, r3, r2
 8006cd2:	2300      	movlt	r3, #0
 8006cd4:	e741      	b.n	8006b5a <_dtoa_r+0x742>
 8006cd6:	9e08      	ldr	r6, [sp, #32]
 8006cd8:	9d05      	ldr	r5, [sp, #20]
 8006cda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006cdc:	e748      	b.n	8006b70 <_dtoa_r+0x758>
 8006cde:	9a08      	ldr	r2, [sp, #32]
 8006ce0:	e770      	b.n	8006bc4 <_dtoa_r+0x7ac>
 8006ce2:	9b07      	ldr	r3, [sp, #28]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	dc19      	bgt.n	8006d1c <_dtoa_r+0x904>
 8006ce8:	9b02      	ldr	r3, [sp, #8]
 8006cea:	b9bb      	cbnz	r3, 8006d1c <_dtoa_r+0x904>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cf2:	b99b      	cbnz	r3, 8006d1c <_dtoa_r+0x904>
 8006cf4:	9b03      	ldr	r3, [sp, #12]
 8006cf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cfa:	0d1b      	lsrs	r3, r3, #20
 8006cfc:	051b      	lsls	r3, r3, #20
 8006cfe:	b183      	cbz	r3, 8006d22 <_dtoa_r+0x90a>
 8006d00:	9b05      	ldr	r3, [sp, #20]
 8006d02:	3301      	adds	r3, #1
 8006d04:	9305      	str	r3, [sp, #20]
 8006d06:	9b06      	ldr	r3, [sp, #24]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	9306      	str	r3, [sp, #24]
 8006d0c:	f04f 0801 	mov.w	r8, #1
 8006d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f47f af6f 	bne.w	8006bf6 <_dtoa_r+0x7de>
 8006d18:	2001      	movs	r0, #1
 8006d1a:	e774      	b.n	8006c06 <_dtoa_r+0x7ee>
 8006d1c:	f04f 0800 	mov.w	r8, #0
 8006d20:	e7f6      	b.n	8006d10 <_dtoa_r+0x8f8>
 8006d22:	4698      	mov	r8, r3
 8006d24:	e7f4      	b.n	8006d10 <_dtoa_r+0x8f8>
 8006d26:	d082      	beq.n	8006c2e <_dtoa_r+0x816>
 8006d28:	9a05      	ldr	r2, [sp, #20]
 8006d2a:	331c      	adds	r3, #28
 8006d2c:	441a      	add	r2, r3
 8006d2e:	9205      	str	r2, [sp, #20]
 8006d30:	9a06      	ldr	r2, [sp, #24]
 8006d32:	441a      	add	r2, r3
 8006d34:	441d      	add	r5, r3
 8006d36:	9206      	str	r2, [sp, #24]
 8006d38:	e779      	b.n	8006c2e <_dtoa_r+0x816>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	e7f4      	b.n	8006d28 <_dtoa_r+0x910>
 8006d3e:	9b04      	ldr	r3, [sp, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	dc37      	bgt.n	8006db4 <_dtoa_r+0x99c>
 8006d44:	9b07      	ldr	r3, [sp, #28]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	dd34      	ble.n	8006db4 <_dtoa_r+0x99c>
 8006d4a:	9b04      	ldr	r3, [sp, #16]
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	b963      	cbnz	r3, 8006d6c <_dtoa_r+0x954>
 8006d52:	4631      	mov	r1, r6
 8006d54:	2205      	movs	r2, #5
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 fe1c 	bl	8007994 <__multadd>
 8006d5c:	4601      	mov	r1, r0
 8006d5e:	4606      	mov	r6, r0
 8006d60:	4650      	mov	r0, sl
 8006d62:	f001 f87b 	bl	8007e5c <__mcmp>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	f73f adbb 	bgt.w	80068e2 <_dtoa_r+0x4ca>
 8006d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d6e:	9d00      	ldr	r5, [sp, #0]
 8006d70:	ea6f 0b03 	mvn.w	fp, r3
 8006d74:	f04f 0800 	mov.w	r8, #0
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f000 fde8 	bl	8007950 <_Bfree>
 8006d80:	2f00      	cmp	r7, #0
 8006d82:	f43f aeab 	beq.w	8006adc <_dtoa_r+0x6c4>
 8006d86:	f1b8 0f00 	cmp.w	r8, #0
 8006d8a:	d005      	beq.n	8006d98 <_dtoa_r+0x980>
 8006d8c:	45b8      	cmp	r8, r7
 8006d8e:	d003      	beq.n	8006d98 <_dtoa_r+0x980>
 8006d90:	4641      	mov	r1, r8
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 fddc 	bl	8007950 <_Bfree>
 8006d98:	4639      	mov	r1, r7
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 fdd8 	bl	8007950 <_Bfree>
 8006da0:	e69c      	b.n	8006adc <_dtoa_r+0x6c4>
 8006da2:	2600      	movs	r6, #0
 8006da4:	4637      	mov	r7, r6
 8006da6:	e7e1      	b.n	8006d6c <_dtoa_r+0x954>
 8006da8:	46bb      	mov	fp, r7
 8006daa:	4637      	mov	r7, r6
 8006dac:	e599      	b.n	80068e2 <_dtoa_r+0x4ca>
 8006dae:	bf00      	nop
 8006db0:	40240000 	.word	0x40240000
 8006db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 80c8 	beq.w	8006f4c <_dtoa_r+0xb34>
 8006dbc:	9b04      	ldr	r3, [sp, #16]
 8006dbe:	9301      	str	r3, [sp, #4]
 8006dc0:	2d00      	cmp	r5, #0
 8006dc2:	dd05      	ble.n	8006dd0 <_dtoa_r+0x9b8>
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	462a      	mov	r2, r5
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 ffdb 	bl	8007d84 <__lshift>
 8006dce:	4607      	mov	r7, r0
 8006dd0:	f1b8 0f00 	cmp.w	r8, #0
 8006dd4:	d05b      	beq.n	8006e8e <_dtoa_r+0xa76>
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 fd79 	bl	80078d0 <_Balloc>
 8006dde:	4605      	mov	r5, r0
 8006de0:	b928      	cbnz	r0, 8006dee <_dtoa_r+0x9d6>
 8006de2:	4b83      	ldr	r3, [pc, #524]	; (8006ff0 <_dtoa_r+0xbd8>)
 8006de4:	4602      	mov	r2, r0
 8006de6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006dea:	f7ff bb2e 	b.w	800644a <_dtoa_r+0x32>
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	3202      	adds	r2, #2
 8006df2:	0092      	lsls	r2, r2, #2
 8006df4:	f107 010c 	add.w	r1, r7, #12
 8006df8:	300c      	adds	r0, #12
 8006dfa:	f7ff fa6c 	bl	80062d6 <memcpy>
 8006dfe:	2201      	movs	r2, #1
 8006e00:	4629      	mov	r1, r5
 8006e02:	4620      	mov	r0, r4
 8006e04:	f000 ffbe 	bl	8007d84 <__lshift>
 8006e08:	9b00      	ldr	r3, [sp, #0]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e12:	4413      	add	r3, r2
 8006e14:	9308      	str	r3, [sp, #32]
 8006e16:	9b02      	ldr	r3, [sp, #8]
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	46b8      	mov	r8, r7
 8006e1e:	9306      	str	r3, [sp, #24]
 8006e20:	4607      	mov	r7, r0
 8006e22:	9b04      	ldr	r3, [sp, #16]
 8006e24:	4631      	mov	r1, r6
 8006e26:	3b01      	subs	r3, #1
 8006e28:	4650      	mov	r0, sl
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	f7ff fa6c 	bl	8006308 <quorem>
 8006e30:	4641      	mov	r1, r8
 8006e32:	9002      	str	r0, [sp, #8]
 8006e34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e38:	4650      	mov	r0, sl
 8006e3a:	f001 f80f 	bl	8007e5c <__mcmp>
 8006e3e:	463a      	mov	r2, r7
 8006e40:	9005      	str	r0, [sp, #20]
 8006e42:	4631      	mov	r1, r6
 8006e44:	4620      	mov	r0, r4
 8006e46:	f001 f825 	bl	8007e94 <__mdiff>
 8006e4a:	68c2      	ldr	r2, [r0, #12]
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	bb02      	cbnz	r2, 8006e92 <_dtoa_r+0xa7a>
 8006e50:	4601      	mov	r1, r0
 8006e52:	4650      	mov	r0, sl
 8006e54:	f001 f802 	bl	8007e5c <__mcmp>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006e60:	f000 fd76 	bl	8007950 <_Bfree>
 8006e64:	9b07      	ldr	r3, [sp, #28]
 8006e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e68:	9d04      	ldr	r5, [sp, #16]
 8006e6a:	ea43 0102 	orr.w	r1, r3, r2
 8006e6e:	9b06      	ldr	r3, [sp, #24]
 8006e70:	4319      	orrs	r1, r3
 8006e72:	d110      	bne.n	8006e96 <_dtoa_r+0xa7e>
 8006e74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e78:	d029      	beq.n	8006ece <_dtoa_r+0xab6>
 8006e7a:	9b05      	ldr	r3, [sp, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	dd02      	ble.n	8006e86 <_dtoa_r+0xa6e>
 8006e80:	9b02      	ldr	r3, [sp, #8]
 8006e82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006e86:	9b01      	ldr	r3, [sp, #4]
 8006e88:	f883 9000 	strb.w	r9, [r3]
 8006e8c:	e774      	b.n	8006d78 <_dtoa_r+0x960>
 8006e8e:	4638      	mov	r0, r7
 8006e90:	e7ba      	b.n	8006e08 <_dtoa_r+0x9f0>
 8006e92:	2201      	movs	r2, #1
 8006e94:	e7e1      	b.n	8006e5a <_dtoa_r+0xa42>
 8006e96:	9b05      	ldr	r3, [sp, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	db04      	blt.n	8006ea6 <_dtoa_r+0xa8e>
 8006e9c:	9907      	ldr	r1, [sp, #28]
 8006e9e:	430b      	orrs	r3, r1
 8006ea0:	9906      	ldr	r1, [sp, #24]
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	d120      	bne.n	8006ee8 <_dtoa_r+0xad0>
 8006ea6:	2a00      	cmp	r2, #0
 8006ea8:	dded      	ble.n	8006e86 <_dtoa_r+0xa6e>
 8006eaa:	4651      	mov	r1, sl
 8006eac:	2201      	movs	r2, #1
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f000 ff68 	bl	8007d84 <__lshift>
 8006eb4:	4631      	mov	r1, r6
 8006eb6:	4682      	mov	sl, r0
 8006eb8:	f000 ffd0 	bl	8007e5c <__mcmp>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	dc03      	bgt.n	8006ec8 <_dtoa_r+0xab0>
 8006ec0:	d1e1      	bne.n	8006e86 <_dtoa_r+0xa6e>
 8006ec2:	f019 0f01 	tst.w	r9, #1
 8006ec6:	d0de      	beq.n	8006e86 <_dtoa_r+0xa6e>
 8006ec8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ecc:	d1d8      	bne.n	8006e80 <_dtoa_r+0xa68>
 8006ece:	9a01      	ldr	r2, [sp, #4]
 8006ed0:	2339      	movs	r3, #57	; 0x39
 8006ed2:	7013      	strb	r3, [r2, #0]
 8006ed4:	462b      	mov	r3, r5
 8006ed6:	461d      	mov	r5, r3
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ede:	2a39      	cmp	r2, #57	; 0x39
 8006ee0:	d06c      	beq.n	8006fbc <_dtoa_r+0xba4>
 8006ee2:	3201      	adds	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	e747      	b.n	8006d78 <_dtoa_r+0x960>
 8006ee8:	2a00      	cmp	r2, #0
 8006eea:	dd07      	ble.n	8006efc <_dtoa_r+0xae4>
 8006eec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ef0:	d0ed      	beq.n	8006ece <_dtoa_r+0xab6>
 8006ef2:	9a01      	ldr	r2, [sp, #4]
 8006ef4:	f109 0301 	add.w	r3, r9, #1
 8006ef8:	7013      	strb	r3, [r2, #0]
 8006efa:	e73d      	b.n	8006d78 <_dtoa_r+0x960>
 8006efc:	9b04      	ldr	r3, [sp, #16]
 8006efe:	9a08      	ldr	r2, [sp, #32]
 8006f00:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d043      	beq.n	8006f90 <_dtoa_r+0xb78>
 8006f08:	4651      	mov	r1, sl
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	220a      	movs	r2, #10
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 fd40 	bl	8007994 <__multadd>
 8006f14:	45b8      	cmp	r8, r7
 8006f16:	4682      	mov	sl, r0
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	f04f 020a 	mov.w	r2, #10
 8006f20:	4641      	mov	r1, r8
 8006f22:	4620      	mov	r0, r4
 8006f24:	d107      	bne.n	8006f36 <_dtoa_r+0xb1e>
 8006f26:	f000 fd35 	bl	8007994 <__multadd>
 8006f2a:	4680      	mov	r8, r0
 8006f2c:	4607      	mov	r7, r0
 8006f2e:	9b04      	ldr	r3, [sp, #16]
 8006f30:	3301      	adds	r3, #1
 8006f32:	9304      	str	r3, [sp, #16]
 8006f34:	e775      	b.n	8006e22 <_dtoa_r+0xa0a>
 8006f36:	f000 fd2d 	bl	8007994 <__multadd>
 8006f3a:	4639      	mov	r1, r7
 8006f3c:	4680      	mov	r8, r0
 8006f3e:	2300      	movs	r3, #0
 8006f40:	220a      	movs	r2, #10
 8006f42:	4620      	mov	r0, r4
 8006f44:	f000 fd26 	bl	8007994 <__multadd>
 8006f48:	4607      	mov	r7, r0
 8006f4a:	e7f0      	b.n	8006f2e <_dtoa_r+0xb16>
 8006f4c:	9b04      	ldr	r3, [sp, #16]
 8006f4e:	9301      	str	r3, [sp, #4]
 8006f50:	9d00      	ldr	r5, [sp, #0]
 8006f52:	4631      	mov	r1, r6
 8006f54:	4650      	mov	r0, sl
 8006f56:	f7ff f9d7 	bl	8006308 <quorem>
 8006f5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f5e:	9b00      	ldr	r3, [sp, #0]
 8006f60:	f805 9b01 	strb.w	r9, [r5], #1
 8006f64:	1aea      	subs	r2, r5, r3
 8006f66:	9b01      	ldr	r3, [sp, #4]
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	dd07      	ble.n	8006f7c <_dtoa_r+0xb64>
 8006f6c:	4651      	mov	r1, sl
 8006f6e:	2300      	movs	r3, #0
 8006f70:	220a      	movs	r2, #10
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 fd0e 	bl	8007994 <__multadd>
 8006f78:	4682      	mov	sl, r0
 8006f7a:	e7ea      	b.n	8006f52 <_dtoa_r+0xb3a>
 8006f7c:	9b01      	ldr	r3, [sp, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bfc8      	it	gt
 8006f82:	461d      	movgt	r5, r3
 8006f84:	9b00      	ldr	r3, [sp, #0]
 8006f86:	bfd8      	it	le
 8006f88:	2501      	movle	r5, #1
 8006f8a:	441d      	add	r5, r3
 8006f8c:	f04f 0800 	mov.w	r8, #0
 8006f90:	4651      	mov	r1, sl
 8006f92:	2201      	movs	r2, #1
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 fef5 	bl	8007d84 <__lshift>
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4682      	mov	sl, r0
 8006f9e:	f000 ff5d 	bl	8007e5c <__mcmp>
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	dc96      	bgt.n	8006ed4 <_dtoa_r+0xabc>
 8006fa6:	d102      	bne.n	8006fae <_dtoa_r+0xb96>
 8006fa8:	f019 0f01 	tst.w	r9, #1
 8006fac:	d192      	bne.n	8006ed4 <_dtoa_r+0xabc>
 8006fae:	462b      	mov	r3, r5
 8006fb0:	461d      	mov	r5, r3
 8006fb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fb6:	2a30      	cmp	r2, #48	; 0x30
 8006fb8:	d0fa      	beq.n	8006fb0 <_dtoa_r+0xb98>
 8006fba:	e6dd      	b.n	8006d78 <_dtoa_r+0x960>
 8006fbc:	9a00      	ldr	r2, [sp, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d189      	bne.n	8006ed6 <_dtoa_r+0xabe>
 8006fc2:	f10b 0b01 	add.w	fp, fp, #1
 8006fc6:	2331      	movs	r3, #49	; 0x31
 8006fc8:	e796      	b.n	8006ef8 <_dtoa_r+0xae0>
 8006fca:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <_dtoa_r+0xbdc>)
 8006fcc:	f7ff ba99 	b.w	8006502 <_dtoa_r+0xea>
 8006fd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f47f aa6d 	bne.w	80064b2 <_dtoa_r+0x9a>
 8006fd8:	4b07      	ldr	r3, [pc, #28]	; (8006ff8 <_dtoa_r+0xbe0>)
 8006fda:	f7ff ba92 	b.w	8006502 <_dtoa_r+0xea>
 8006fde:	9b01      	ldr	r3, [sp, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	dcb5      	bgt.n	8006f50 <_dtoa_r+0xb38>
 8006fe4:	9b07      	ldr	r3, [sp, #28]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	f73f aeb1 	bgt.w	8006d4e <_dtoa_r+0x936>
 8006fec:	e7b0      	b.n	8006f50 <_dtoa_r+0xb38>
 8006fee:	bf00      	nop
 8006ff0:	08009e38 	.word	0x08009e38
 8006ff4:	08009d90 	.word	0x08009d90
 8006ff8:	08009dbc 	.word	0x08009dbc

08006ffc <_free_r>:
 8006ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ffe:	2900      	cmp	r1, #0
 8007000:	d044      	beq.n	800708c <_free_r+0x90>
 8007002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007006:	9001      	str	r0, [sp, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	f1a1 0404 	sub.w	r4, r1, #4
 800700e:	bfb8      	it	lt
 8007010:	18e4      	addlt	r4, r4, r3
 8007012:	f000 fc51 	bl	80078b8 <__malloc_lock>
 8007016:	4a1e      	ldr	r2, [pc, #120]	; (8007090 <_free_r+0x94>)
 8007018:	9801      	ldr	r0, [sp, #4]
 800701a:	6813      	ldr	r3, [r2, #0]
 800701c:	b933      	cbnz	r3, 800702c <_free_r+0x30>
 800701e:	6063      	str	r3, [r4, #4]
 8007020:	6014      	str	r4, [r2, #0]
 8007022:	b003      	add	sp, #12
 8007024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007028:	f000 bc4c 	b.w	80078c4 <__malloc_unlock>
 800702c:	42a3      	cmp	r3, r4
 800702e:	d908      	bls.n	8007042 <_free_r+0x46>
 8007030:	6825      	ldr	r5, [r4, #0]
 8007032:	1961      	adds	r1, r4, r5
 8007034:	428b      	cmp	r3, r1
 8007036:	bf01      	itttt	eq
 8007038:	6819      	ldreq	r1, [r3, #0]
 800703a:	685b      	ldreq	r3, [r3, #4]
 800703c:	1949      	addeq	r1, r1, r5
 800703e:	6021      	streq	r1, [r4, #0]
 8007040:	e7ed      	b.n	800701e <_free_r+0x22>
 8007042:	461a      	mov	r2, r3
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	b10b      	cbz	r3, 800704c <_free_r+0x50>
 8007048:	42a3      	cmp	r3, r4
 800704a:	d9fa      	bls.n	8007042 <_free_r+0x46>
 800704c:	6811      	ldr	r1, [r2, #0]
 800704e:	1855      	adds	r5, r2, r1
 8007050:	42a5      	cmp	r5, r4
 8007052:	d10b      	bne.n	800706c <_free_r+0x70>
 8007054:	6824      	ldr	r4, [r4, #0]
 8007056:	4421      	add	r1, r4
 8007058:	1854      	adds	r4, r2, r1
 800705a:	42a3      	cmp	r3, r4
 800705c:	6011      	str	r1, [r2, #0]
 800705e:	d1e0      	bne.n	8007022 <_free_r+0x26>
 8007060:	681c      	ldr	r4, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	6053      	str	r3, [r2, #4]
 8007066:	440c      	add	r4, r1
 8007068:	6014      	str	r4, [r2, #0]
 800706a:	e7da      	b.n	8007022 <_free_r+0x26>
 800706c:	d902      	bls.n	8007074 <_free_r+0x78>
 800706e:	230c      	movs	r3, #12
 8007070:	6003      	str	r3, [r0, #0]
 8007072:	e7d6      	b.n	8007022 <_free_r+0x26>
 8007074:	6825      	ldr	r5, [r4, #0]
 8007076:	1961      	adds	r1, r4, r5
 8007078:	428b      	cmp	r3, r1
 800707a:	bf04      	itt	eq
 800707c:	6819      	ldreq	r1, [r3, #0]
 800707e:	685b      	ldreq	r3, [r3, #4]
 8007080:	6063      	str	r3, [r4, #4]
 8007082:	bf04      	itt	eq
 8007084:	1949      	addeq	r1, r1, r5
 8007086:	6021      	streq	r1, [r4, #0]
 8007088:	6054      	str	r4, [r2, #4]
 800708a:	e7ca      	b.n	8007022 <_free_r+0x26>
 800708c:	b003      	add	sp, #12
 800708e:	bd30      	pop	{r4, r5, pc}
 8007090:	2000041c 	.word	0x2000041c

08007094 <rshift>:
 8007094:	6903      	ldr	r3, [r0, #16]
 8007096:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800709a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800709e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80070a2:	f100 0414 	add.w	r4, r0, #20
 80070a6:	dd45      	ble.n	8007134 <rshift+0xa0>
 80070a8:	f011 011f 	ands.w	r1, r1, #31
 80070ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80070b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80070b4:	d10c      	bne.n	80070d0 <rshift+0x3c>
 80070b6:	f100 0710 	add.w	r7, r0, #16
 80070ba:	4629      	mov	r1, r5
 80070bc:	42b1      	cmp	r1, r6
 80070be:	d334      	bcc.n	800712a <rshift+0x96>
 80070c0:	1a9b      	subs	r3, r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	1eea      	subs	r2, r5, #3
 80070c6:	4296      	cmp	r6, r2
 80070c8:	bf38      	it	cc
 80070ca:	2300      	movcc	r3, #0
 80070cc:	4423      	add	r3, r4
 80070ce:	e015      	b.n	80070fc <rshift+0x68>
 80070d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80070d4:	f1c1 0820 	rsb	r8, r1, #32
 80070d8:	40cf      	lsrs	r7, r1
 80070da:	f105 0e04 	add.w	lr, r5, #4
 80070de:	46a1      	mov	r9, r4
 80070e0:	4576      	cmp	r6, lr
 80070e2:	46f4      	mov	ip, lr
 80070e4:	d815      	bhi.n	8007112 <rshift+0x7e>
 80070e6:	1a9a      	subs	r2, r3, r2
 80070e8:	0092      	lsls	r2, r2, #2
 80070ea:	3a04      	subs	r2, #4
 80070ec:	3501      	adds	r5, #1
 80070ee:	42ae      	cmp	r6, r5
 80070f0:	bf38      	it	cc
 80070f2:	2200      	movcc	r2, #0
 80070f4:	18a3      	adds	r3, r4, r2
 80070f6:	50a7      	str	r7, [r4, r2]
 80070f8:	b107      	cbz	r7, 80070fc <rshift+0x68>
 80070fa:	3304      	adds	r3, #4
 80070fc:	1b1a      	subs	r2, r3, r4
 80070fe:	42a3      	cmp	r3, r4
 8007100:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007104:	bf08      	it	eq
 8007106:	2300      	moveq	r3, #0
 8007108:	6102      	str	r2, [r0, #16]
 800710a:	bf08      	it	eq
 800710c:	6143      	streq	r3, [r0, #20]
 800710e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007112:	f8dc c000 	ldr.w	ip, [ip]
 8007116:	fa0c fc08 	lsl.w	ip, ip, r8
 800711a:	ea4c 0707 	orr.w	r7, ip, r7
 800711e:	f849 7b04 	str.w	r7, [r9], #4
 8007122:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007126:	40cf      	lsrs	r7, r1
 8007128:	e7da      	b.n	80070e0 <rshift+0x4c>
 800712a:	f851 cb04 	ldr.w	ip, [r1], #4
 800712e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007132:	e7c3      	b.n	80070bc <rshift+0x28>
 8007134:	4623      	mov	r3, r4
 8007136:	e7e1      	b.n	80070fc <rshift+0x68>

08007138 <__hexdig_fun>:
 8007138:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800713c:	2b09      	cmp	r3, #9
 800713e:	d802      	bhi.n	8007146 <__hexdig_fun+0xe>
 8007140:	3820      	subs	r0, #32
 8007142:	b2c0      	uxtb	r0, r0
 8007144:	4770      	bx	lr
 8007146:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800714a:	2b05      	cmp	r3, #5
 800714c:	d801      	bhi.n	8007152 <__hexdig_fun+0x1a>
 800714e:	3847      	subs	r0, #71	; 0x47
 8007150:	e7f7      	b.n	8007142 <__hexdig_fun+0xa>
 8007152:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007156:	2b05      	cmp	r3, #5
 8007158:	d801      	bhi.n	800715e <__hexdig_fun+0x26>
 800715a:	3827      	subs	r0, #39	; 0x27
 800715c:	e7f1      	b.n	8007142 <__hexdig_fun+0xa>
 800715e:	2000      	movs	r0, #0
 8007160:	4770      	bx	lr
	...

08007164 <__gethex>:
 8007164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007168:	4617      	mov	r7, r2
 800716a:	680a      	ldr	r2, [r1, #0]
 800716c:	b085      	sub	sp, #20
 800716e:	f102 0b02 	add.w	fp, r2, #2
 8007172:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007176:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800717a:	4681      	mov	r9, r0
 800717c:	468a      	mov	sl, r1
 800717e:	9302      	str	r3, [sp, #8]
 8007180:	32fe      	adds	r2, #254	; 0xfe
 8007182:	eb02 030b 	add.w	r3, r2, fp
 8007186:	46d8      	mov	r8, fp
 8007188:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800718c:	9301      	str	r3, [sp, #4]
 800718e:	2830      	cmp	r0, #48	; 0x30
 8007190:	d0f7      	beq.n	8007182 <__gethex+0x1e>
 8007192:	f7ff ffd1 	bl	8007138 <__hexdig_fun>
 8007196:	4604      	mov	r4, r0
 8007198:	2800      	cmp	r0, #0
 800719a:	d138      	bne.n	800720e <__gethex+0xaa>
 800719c:	49a7      	ldr	r1, [pc, #668]	; (800743c <__gethex+0x2d8>)
 800719e:	2201      	movs	r2, #1
 80071a0:	4640      	mov	r0, r8
 80071a2:	f7ff f80e 	bl	80061c2 <strncmp>
 80071a6:	4606      	mov	r6, r0
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d169      	bne.n	8007280 <__gethex+0x11c>
 80071ac:	f898 0001 	ldrb.w	r0, [r8, #1]
 80071b0:	465d      	mov	r5, fp
 80071b2:	f7ff ffc1 	bl	8007138 <__hexdig_fun>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d064      	beq.n	8007284 <__gethex+0x120>
 80071ba:	465a      	mov	r2, fp
 80071bc:	7810      	ldrb	r0, [r2, #0]
 80071be:	2830      	cmp	r0, #48	; 0x30
 80071c0:	4690      	mov	r8, r2
 80071c2:	f102 0201 	add.w	r2, r2, #1
 80071c6:	d0f9      	beq.n	80071bc <__gethex+0x58>
 80071c8:	f7ff ffb6 	bl	8007138 <__hexdig_fun>
 80071cc:	2301      	movs	r3, #1
 80071ce:	fab0 f480 	clz	r4, r0
 80071d2:	0964      	lsrs	r4, r4, #5
 80071d4:	465e      	mov	r6, fp
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	4642      	mov	r2, r8
 80071da:	4615      	mov	r5, r2
 80071dc:	3201      	adds	r2, #1
 80071de:	7828      	ldrb	r0, [r5, #0]
 80071e0:	f7ff ffaa 	bl	8007138 <__hexdig_fun>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d1f8      	bne.n	80071da <__gethex+0x76>
 80071e8:	4994      	ldr	r1, [pc, #592]	; (800743c <__gethex+0x2d8>)
 80071ea:	2201      	movs	r2, #1
 80071ec:	4628      	mov	r0, r5
 80071ee:	f7fe ffe8 	bl	80061c2 <strncmp>
 80071f2:	b978      	cbnz	r0, 8007214 <__gethex+0xb0>
 80071f4:	b946      	cbnz	r6, 8007208 <__gethex+0xa4>
 80071f6:	1c6e      	adds	r6, r5, #1
 80071f8:	4632      	mov	r2, r6
 80071fa:	4615      	mov	r5, r2
 80071fc:	3201      	adds	r2, #1
 80071fe:	7828      	ldrb	r0, [r5, #0]
 8007200:	f7ff ff9a 	bl	8007138 <__hexdig_fun>
 8007204:	2800      	cmp	r0, #0
 8007206:	d1f8      	bne.n	80071fa <__gethex+0x96>
 8007208:	1b73      	subs	r3, r6, r5
 800720a:	009e      	lsls	r6, r3, #2
 800720c:	e004      	b.n	8007218 <__gethex+0xb4>
 800720e:	2400      	movs	r4, #0
 8007210:	4626      	mov	r6, r4
 8007212:	e7e1      	b.n	80071d8 <__gethex+0x74>
 8007214:	2e00      	cmp	r6, #0
 8007216:	d1f7      	bne.n	8007208 <__gethex+0xa4>
 8007218:	782b      	ldrb	r3, [r5, #0]
 800721a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800721e:	2b50      	cmp	r3, #80	; 0x50
 8007220:	d13d      	bne.n	800729e <__gethex+0x13a>
 8007222:	786b      	ldrb	r3, [r5, #1]
 8007224:	2b2b      	cmp	r3, #43	; 0x2b
 8007226:	d02f      	beq.n	8007288 <__gethex+0x124>
 8007228:	2b2d      	cmp	r3, #45	; 0x2d
 800722a:	d031      	beq.n	8007290 <__gethex+0x12c>
 800722c:	1c69      	adds	r1, r5, #1
 800722e:	f04f 0b00 	mov.w	fp, #0
 8007232:	7808      	ldrb	r0, [r1, #0]
 8007234:	f7ff ff80 	bl	8007138 <__hexdig_fun>
 8007238:	1e42      	subs	r2, r0, #1
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	2a18      	cmp	r2, #24
 800723e:	d82e      	bhi.n	800729e <__gethex+0x13a>
 8007240:	f1a0 0210 	sub.w	r2, r0, #16
 8007244:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007248:	f7ff ff76 	bl	8007138 <__hexdig_fun>
 800724c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007250:	fa5f fc8c 	uxtb.w	ip, ip
 8007254:	f1bc 0f18 	cmp.w	ip, #24
 8007258:	d91d      	bls.n	8007296 <__gethex+0x132>
 800725a:	f1bb 0f00 	cmp.w	fp, #0
 800725e:	d000      	beq.n	8007262 <__gethex+0xfe>
 8007260:	4252      	negs	r2, r2
 8007262:	4416      	add	r6, r2
 8007264:	f8ca 1000 	str.w	r1, [sl]
 8007268:	b1dc      	cbz	r4, 80072a2 <__gethex+0x13e>
 800726a:	9b01      	ldr	r3, [sp, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	bf14      	ite	ne
 8007270:	f04f 0800 	movne.w	r8, #0
 8007274:	f04f 0806 	moveq.w	r8, #6
 8007278:	4640      	mov	r0, r8
 800727a:	b005      	add	sp, #20
 800727c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007280:	4645      	mov	r5, r8
 8007282:	4626      	mov	r6, r4
 8007284:	2401      	movs	r4, #1
 8007286:	e7c7      	b.n	8007218 <__gethex+0xb4>
 8007288:	f04f 0b00 	mov.w	fp, #0
 800728c:	1ca9      	adds	r1, r5, #2
 800728e:	e7d0      	b.n	8007232 <__gethex+0xce>
 8007290:	f04f 0b01 	mov.w	fp, #1
 8007294:	e7fa      	b.n	800728c <__gethex+0x128>
 8007296:	230a      	movs	r3, #10
 8007298:	fb03 0002 	mla	r0, r3, r2, r0
 800729c:	e7d0      	b.n	8007240 <__gethex+0xdc>
 800729e:	4629      	mov	r1, r5
 80072a0:	e7e0      	b.n	8007264 <__gethex+0x100>
 80072a2:	eba5 0308 	sub.w	r3, r5, r8
 80072a6:	3b01      	subs	r3, #1
 80072a8:	4621      	mov	r1, r4
 80072aa:	2b07      	cmp	r3, #7
 80072ac:	dc0a      	bgt.n	80072c4 <__gethex+0x160>
 80072ae:	4648      	mov	r0, r9
 80072b0:	f000 fb0e 	bl	80078d0 <_Balloc>
 80072b4:	4604      	mov	r4, r0
 80072b6:	b940      	cbnz	r0, 80072ca <__gethex+0x166>
 80072b8:	4b61      	ldr	r3, [pc, #388]	; (8007440 <__gethex+0x2dc>)
 80072ba:	4602      	mov	r2, r0
 80072bc:	21e4      	movs	r1, #228	; 0xe4
 80072be:	4861      	ldr	r0, [pc, #388]	; (8007444 <__gethex+0x2e0>)
 80072c0:	f001 fbca 	bl	8008a58 <__assert_func>
 80072c4:	3101      	adds	r1, #1
 80072c6:	105b      	asrs	r3, r3, #1
 80072c8:	e7ef      	b.n	80072aa <__gethex+0x146>
 80072ca:	f100 0a14 	add.w	sl, r0, #20
 80072ce:	2300      	movs	r3, #0
 80072d0:	495a      	ldr	r1, [pc, #360]	; (800743c <__gethex+0x2d8>)
 80072d2:	f8cd a004 	str.w	sl, [sp, #4]
 80072d6:	469b      	mov	fp, r3
 80072d8:	45a8      	cmp	r8, r5
 80072da:	d342      	bcc.n	8007362 <__gethex+0x1fe>
 80072dc:	9801      	ldr	r0, [sp, #4]
 80072de:	f840 bb04 	str.w	fp, [r0], #4
 80072e2:	eba0 000a 	sub.w	r0, r0, sl
 80072e6:	1080      	asrs	r0, r0, #2
 80072e8:	6120      	str	r0, [r4, #16]
 80072ea:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80072ee:	4658      	mov	r0, fp
 80072f0:	f000 fbe0 	bl	8007ab4 <__hi0bits>
 80072f4:	683d      	ldr	r5, [r7, #0]
 80072f6:	eba8 0000 	sub.w	r0, r8, r0
 80072fa:	42a8      	cmp	r0, r5
 80072fc:	dd59      	ble.n	80073b2 <__gethex+0x24e>
 80072fe:	eba0 0805 	sub.w	r8, r0, r5
 8007302:	4641      	mov	r1, r8
 8007304:	4620      	mov	r0, r4
 8007306:	f000 ff6f 	bl	80081e8 <__any_on>
 800730a:	4683      	mov	fp, r0
 800730c:	b1b8      	cbz	r0, 800733e <__gethex+0x1da>
 800730e:	f108 33ff 	add.w	r3, r8, #4294967295
 8007312:	1159      	asrs	r1, r3, #5
 8007314:	f003 021f 	and.w	r2, r3, #31
 8007318:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800731c:	f04f 0b01 	mov.w	fp, #1
 8007320:	fa0b f202 	lsl.w	r2, fp, r2
 8007324:	420a      	tst	r2, r1
 8007326:	d00a      	beq.n	800733e <__gethex+0x1da>
 8007328:	455b      	cmp	r3, fp
 800732a:	dd06      	ble.n	800733a <__gethex+0x1d6>
 800732c:	f1a8 0102 	sub.w	r1, r8, #2
 8007330:	4620      	mov	r0, r4
 8007332:	f000 ff59 	bl	80081e8 <__any_on>
 8007336:	2800      	cmp	r0, #0
 8007338:	d138      	bne.n	80073ac <__gethex+0x248>
 800733a:	f04f 0b02 	mov.w	fp, #2
 800733e:	4641      	mov	r1, r8
 8007340:	4620      	mov	r0, r4
 8007342:	f7ff fea7 	bl	8007094 <rshift>
 8007346:	4446      	add	r6, r8
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	42b3      	cmp	r3, r6
 800734c:	da41      	bge.n	80073d2 <__gethex+0x26e>
 800734e:	4621      	mov	r1, r4
 8007350:	4648      	mov	r0, r9
 8007352:	f000 fafd 	bl	8007950 <_Bfree>
 8007356:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007358:	2300      	movs	r3, #0
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007360:	e78a      	b.n	8007278 <__gethex+0x114>
 8007362:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007366:	2a2e      	cmp	r2, #46	; 0x2e
 8007368:	d014      	beq.n	8007394 <__gethex+0x230>
 800736a:	2b20      	cmp	r3, #32
 800736c:	d106      	bne.n	800737c <__gethex+0x218>
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	f843 bb04 	str.w	fp, [r3], #4
 8007374:	f04f 0b00 	mov.w	fp, #0
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	465b      	mov	r3, fp
 800737c:	7828      	ldrb	r0, [r5, #0]
 800737e:	9303      	str	r3, [sp, #12]
 8007380:	f7ff feda 	bl	8007138 <__hexdig_fun>
 8007384:	9b03      	ldr	r3, [sp, #12]
 8007386:	f000 000f 	and.w	r0, r0, #15
 800738a:	4098      	lsls	r0, r3
 800738c:	ea4b 0b00 	orr.w	fp, fp, r0
 8007390:	3304      	adds	r3, #4
 8007392:	e7a1      	b.n	80072d8 <__gethex+0x174>
 8007394:	45a8      	cmp	r8, r5
 8007396:	d8e8      	bhi.n	800736a <__gethex+0x206>
 8007398:	2201      	movs	r2, #1
 800739a:	4628      	mov	r0, r5
 800739c:	9303      	str	r3, [sp, #12]
 800739e:	f7fe ff10 	bl	80061c2 <strncmp>
 80073a2:	4926      	ldr	r1, [pc, #152]	; (800743c <__gethex+0x2d8>)
 80073a4:	9b03      	ldr	r3, [sp, #12]
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d1df      	bne.n	800736a <__gethex+0x206>
 80073aa:	e795      	b.n	80072d8 <__gethex+0x174>
 80073ac:	f04f 0b03 	mov.w	fp, #3
 80073b0:	e7c5      	b.n	800733e <__gethex+0x1da>
 80073b2:	da0b      	bge.n	80073cc <__gethex+0x268>
 80073b4:	eba5 0800 	sub.w	r8, r5, r0
 80073b8:	4621      	mov	r1, r4
 80073ba:	4642      	mov	r2, r8
 80073bc:	4648      	mov	r0, r9
 80073be:	f000 fce1 	bl	8007d84 <__lshift>
 80073c2:	eba6 0608 	sub.w	r6, r6, r8
 80073c6:	4604      	mov	r4, r0
 80073c8:	f100 0a14 	add.w	sl, r0, #20
 80073cc:	f04f 0b00 	mov.w	fp, #0
 80073d0:	e7ba      	b.n	8007348 <__gethex+0x1e4>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	42b3      	cmp	r3, r6
 80073d6:	dd73      	ble.n	80074c0 <__gethex+0x35c>
 80073d8:	1b9e      	subs	r6, r3, r6
 80073da:	42b5      	cmp	r5, r6
 80073dc:	dc34      	bgt.n	8007448 <__gethex+0x2e4>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d023      	beq.n	800742c <__gethex+0x2c8>
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	d025      	beq.n	8007434 <__gethex+0x2d0>
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d115      	bne.n	8007418 <__gethex+0x2b4>
 80073ec:	42b5      	cmp	r5, r6
 80073ee:	d113      	bne.n	8007418 <__gethex+0x2b4>
 80073f0:	2d01      	cmp	r5, #1
 80073f2:	d10b      	bne.n	800740c <__gethex+0x2a8>
 80073f4:	9a02      	ldr	r2, [sp, #8]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	2301      	movs	r3, #1
 80073fc:	6123      	str	r3, [r4, #16]
 80073fe:	f8ca 3000 	str.w	r3, [sl]
 8007402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007404:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007408:	601c      	str	r4, [r3, #0]
 800740a:	e735      	b.n	8007278 <__gethex+0x114>
 800740c:	1e69      	subs	r1, r5, #1
 800740e:	4620      	mov	r0, r4
 8007410:	f000 feea 	bl	80081e8 <__any_on>
 8007414:	2800      	cmp	r0, #0
 8007416:	d1ed      	bne.n	80073f4 <__gethex+0x290>
 8007418:	4621      	mov	r1, r4
 800741a:	4648      	mov	r0, r9
 800741c:	f000 fa98 	bl	8007950 <_Bfree>
 8007420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007422:	2300      	movs	r3, #0
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	f04f 0850 	mov.w	r8, #80	; 0x50
 800742a:	e725      	b.n	8007278 <__gethex+0x114>
 800742c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1f2      	bne.n	8007418 <__gethex+0x2b4>
 8007432:	e7df      	b.n	80073f4 <__gethex+0x290>
 8007434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1dc      	bne.n	80073f4 <__gethex+0x290>
 800743a:	e7ed      	b.n	8007418 <__gethex+0x2b4>
 800743c:	08009d2c 	.word	0x08009d2c
 8007440:	08009e38 	.word	0x08009e38
 8007444:	08009e49 	.word	0x08009e49
 8007448:	f106 38ff 	add.w	r8, r6, #4294967295
 800744c:	f1bb 0f00 	cmp.w	fp, #0
 8007450:	d133      	bne.n	80074ba <__gethex+0x356>
 8007452:	f1b8 0f00 	cmp.w	r8, #0
 8007456:	d004      	beq.n	8007462 <__gethex+0x2fe>
 8007458:	4641      	mov	r1, r8
 800745a:	4620      	mov	r0, r4
 800745c:	f000 fec4 	bl	80081e8 <__any_on>
 8007460:	4683      	mov	fp, r0
 8007462:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007466:	2301      	movs	r3, #1
 8007468:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800746c:	f008 081f 	and.w	r8, r8, #31
 8007470:	fa03 f308 	lsl.w	r3, r3, r8
 8007474:	4213      	tst	r3, r2
 8007476:	4631      	mov	r1, r6
 8007478:	4620      	mov	r0, r4
 800747a:	bf18      	it	ne
 800747c:	f04b 0b02 	orrne.w	fp, fp, #2
 8007480:	1bad      	subs	r5, r5, r6
 8007482:	f7ff fe07 	bl	8007094 <rshift>
 8007486:	687e      	ldr	r6, [r7, #4]
 8007488:	f04f 0802 	mov.w	r8, #2
 800748c:	f1bb 0f00 	cmp.w	fp, #0
 8007490:	d04a      	beq.n	8007528 <__gethex+0x3c4>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2b02      	cmp	r3, #2
 8007496:	d016      	beq.n	80074c6 <__gethex+0x362>
 8007498:	2b03      	cmp	r3, #3
 800749a:	d018      	beq.n	80074ce <__gethex+0x36a>
 800749c:	2b01      	cmp	r3, #1
 800749e:	d109      	bne.n	80074b4 <__gethex+0x350>
 80074a0:	f01b 0f02 	tst.w	fp, #2
 80074a4:	d006      	beq.n	80074b4 <__gethex+0x350>
 80074a6:	f8da 3000 	ldr.w	r3, [sl]
 80074aa:	ea4b 0b03 	orr.w	fp, fp, r3
 80074ae:	f01b 0f01 	tst.w	fp, #1
 80074b2:	d10f      	bne.n	80074d4 <__gethex+0x370>
 80074b4:	f048 0810 	orr.w	r8, r8, #16
 80074b8:	e036      	b.n	8007528 <__gethex+0x3c4>
 80074ba:	f04f 0b01 	mov.w	fp, #1
 80074be:	e7d0      	b.n	8007462 <__gethex+0x2fe>
 80074c0:	f04f 0801 	mov.w	r8, #1
 80074c4:	e7e2      	b.n	800748c <__gethex+0x328>
 80074c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074c8:	f1c3 0301 	rsb	r3, r3, #1
 80074cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80074ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0ef      	beq.n	80074b4 <__gethex+0x350>
 80074d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80074d8:	f104 0214 	add.w	r2, r4, #20
 80074dc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80074e0:	9301      	str	r3, [sp, #4]
 80074e2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80074e6:	2300      	movs	r3, #0
 80074e8:	4694      	mov	ip, r2
 80074ea:	f852 1b04 	ldr.w	r1, [r2], #4
 80074ee:	f1b1 3fff 	cmp.w	r1, #4294967295
 80074f2:	d01e      	beq.n	8007532 <__gethex+0x3ce>
 80074f4:	3101      	adds	r1, #1
 80074f6:	f8cc 1000 	str.w	r1, [ip]
 80074fa:	f1b8 0f02 	cmp.w	r8, #2
 80074fe:	f104 0214 	add.w	r2, r4, #20
 8007502:	d13d      	bne.n	8007580 <__gethex+0x41c>
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	3b01      	subs	r3, #1
 8007508:	42ab      	cmp	r3, r5
 800750a:	d10b      	bne.n	8007524 <__gethex+0x3c0>
 800750c:	1169      	asrs	r1, r5, #5
 800750e:	2301      	movs	r3, #1
 8007510:	f005 051f 	and.w	r5, r5, #31
 8007514:	fa03 f505 	lsl.w	r5, r3, r5
 8007518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800751c:	421d      	tst	r5, r3
 800751e:	bf18      	it	ne
 8007520:	f04f 0801 	movne.w	r8, #1
 8007524:	f048 0820 	orr.w	r8, r8, #32
 8007528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800752a:	601c      	str	r4, [r3, #0]
 800752c:	9b02      	ldr	r3, [sp, #8]
 800752e:	601e      	str	r6, [r3, #0]
 8007530:	e6a2      	b.n	8007278 <__gethex+0x114>
 8007532:	4290      	cmp	r0, r2
 8007534:	f842 3c04 	str.w	r3, [r2, #-4]
 8007538:	d8d6      	bhi.n	80074e8 <__gethex+0x384>
 800753a:	68a2      	ldr	r2, [r4, #8]
 800753c:	4593      	cmp	fp, r2
 800753e:	db17      	blt.n	8007570 <__gethex+0x40c>
 8007540:	6861      	ldr	r1, [r4, #4]
 8007542:	4648      	mov	r0, r9
 8007544:	3101      	adds	r1, #1
 8007546:	f000 f9c3 	bl	80078d0 <_Balloc>
 800754a:	4682      	mov	sl, r0
 800754c:	b918      	cbnz	r0, 8007556 <__gethex+0x3f2>
 800754e:	4b1b      	ldr	r3, [pc, #108]	; (80075bc <__gethex+0x458>)
 8007550:	4602      	mov	r2, r0
 8007552:	2184      	movs	r1, #132	; 0x84
 8007554:	e6b3      	b.n	80072be <__gethex+0x15a>
 8007556:	6922      	ldr	r2, [r4, #16]
 8007558:	3202      	adds	r2, #2
 800755a:	f104 010c 	add.w	r1, r4, #12
 800755e:	0092      	lsls	r2, r2, #2
 8007560:	300c      	adds	r0, #12
 8007562:	f7fe feb8 	bl	80062d6 <memcpy>
 8007566:	4621      	mov	r1, r4
 8007568:	4648      	mov	r0, r9
 800756a:	f000 f9f1 	bl	8007950 <_Bfree>
 800756e:	4654      	mov	r4, sl
 8007570:	6922      	ldr	r2, [r4, #16]
 8007572:	1c51      	adds	r1, r2, #1
 8007574:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007578:	6121      	str	r1, [r4, #16]
 800757a:	2101      	movs	r1, #1
 800757c:	6151      	str	r1, [r2, #20]
 800757e:	e7bc      	b.n	80074fa <__gethex+0x396>
 8007580:	6921      	ldr	r1, [r4, #16]
 8007582:	4559      	cmp	r1, fp
 8007584:	dd0b      	ble.n	800759e <__gethex+0x43a>
 8007586:	2101      	movs	r1, #1
 8007588:	4620      	mov	r0, r4
 800758a:	f7ff fd83 	bl	8007094 <rshift>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	3601      	adds	r6, #1
 8007592:	42b3      	cmp	r3, r6
 8007594:	f6ff aedb 	blt.w	800734e <__gethex+0x1ea>
 8007598:	f04f 0801 	mov.w	r8, #1
 800759c:	e7c2      	b.n	8007524 <__gethex+0x3c0>
 800759e:	f015 051f 	ands.w	r5, r5, #31
 80075a2:	d0f9      	beq.n	8007598 <__gethex+0x434>
 80075a4:	9b01      	ldr	r3, [sp, #4]
 80075a6:	441a      	add	r2, r3
 80075a8:	f1c5 0520 	rsb	r5, r5, #32
 80075ac:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80075b0:	f000 fa80 	bl	8007ab4 <__hi0bits>
 80075b4:	42a8      	cmp	r0, r5
 80075b6:	dbe6      	blt.n	8007586 <__gethex+0x422>
 80075b8:	e7ee      	b.n	8007598 <__gethex+0x434>
 80075ba:	bf00      	nop
 80075bc:	08009e38 	.word	0x08009e38

080075c0 <L_shift>:
 80075c0:	f1c2 0208 	rsb	r2, r2, #8
 80075c4:	0092      	lsls	r2, r2, #2
 80075c6:	b570      	push	{r4, r5, r6, lr}
 80075c8:	f1c2 0620 	rsb	r6, r2, #32
 80075cc:	6843      	ldr	r3, [r0, #4]
 80075ce:	6804      	ldr	r4, [r0, #0]
 80075d0:	fa03 f506 	lsl.w	r5, r3, r6
 80075d4:	432c      	orrs	r4, r5
 80075d6:	40d3      	lsrs	r3, r2
 80075d8:	6004      	str	r4, [r0, #0]
 80075da:	f840 3f04 	str.w	r3, [r0, #4]!
 80075de:	4288      	cmp	r0, r1
 80075e0:	d3f4      	bcc.n	80075cc <L_shift+0xc>
 80075e2:	bd70      	pop	{r4, r5, r6, pc}

080075e4 <__match>:
 80075e4:	b530      	push	{r4, r5, lr}
 80075e6:	6803      	ldr	r3, [r0, #0]
 80075e8:	3301      	adds	r3, #1
 80075ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ee:	b914      	cbnz	r4, 80075f6 <__match+0x12>
 80075f0:	6003      	str	r3, [r0, #0]
 80075f2:	2001      	movs	r0, #1
 80075f4:	bd30      	pop	{r4, r5, pc}
 80075f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80075fe:	2d19      	cmp	r5, #25
 8007600:	bf98      	it	ls
 8007602:	3220      	addls	r2, #32
 8007604:	42a2      	cmp	r2, r4
 8007606:	d0f0      	beq.n	80075ea <__match+0x6>
 8007608:	2000      	movs	r0, #0
 800760a:	e7f3      	b.n	80075f4 <__match+0x10>

0800760c <__hexnan>:
 800760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007610:	680b      	ldr	r3, [r1, #0]
 8007612:	6801      	ldr	r1, [r0, #0]
 8007614:	115e      	asrs	r6, r3, #5
 8007616:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800761a:	f013 031f 	ands.w	r3, r3, #31
 800761e:	b087      	sub	sp, #28
 8007620:	bf18      	it	ne
 8007622:	3604      	addne	r6, #4
 8007624:	2500      	movs	r5, #0
 8007626:	1f37      	subs	r7, r6, #4
 8007628:	4682      	mov	sl, r0
 800762a:	4690      	mov	r8, r2
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007632:	46b9      	mov	r9, r7
 8007634:	463c      	mov	r4, r7
 8007636:	9502      	str	r5, [sp, #8]
 8007638:	46ab      	mov	fp, r5
 800763a:	784a      	ldrb	r2, [r1, #1]
 800763c:	1c4b      	adds	r3, r1, #1
 800763e:	9303      	str	r3, [sp, #12]
 8007640:	b342      	cbz	r2, 8007694 <__hexnan+0x88>
 8007642:	4610      	mov	r0, r2
 8007644:	9105      	str	r1, [sp, #20]
 8007646:	9204      	str	r2, [sp, #16]
 8007648:	f7ff fd76 	bl	8007138 <__hexdig_fun>
 800764c:	2800      	cmp	r0, #0
 800764e:	d14f      	bne.n	80076f0 <__hexnan+0xe4>
 8007650:	9a04      	ldr	r2, [sp, #16]
 8007652:	9905      	ldr	r1, [sp, #20]
 8007654:	2a20      	cmp	r2, #32
 8007656:	d818      	bhi.n	800768a <__hexnan+0x7e>
 8007658:	9b02      	ldr	r3, [sp, #8]
 800765a:	459b      	cmp	fp, r3
 800765c:	dd13      	ble.n	8007686 <__hexnan+0x7a>
 800765e:	454c      	cmp	r4, r9
 8007660:	d206      	bcs.n	8007670 <__hexnan+0x64>
 8007662:	2d07      	cmp	r5, #7
 8007664:	dc04      	bgt.n	8007670 <__hexnan+0x64>
 8007666:	462a      	mov	r2, r5
 8007668:	4649      	mov	r1, r9
 800766a:	4620      	mov	r0, r4
 800766c:	f7ff ffa8 	bl	80075c0 <L_shift>
 8007670:	4544      	cmp	r4, r8
 8007672:	d950      	bls.n	8007716 <__hexnan+0x10a>
 8007674:	2300      	movs	r3, #0
 8007676:	f1a4 0904 	sub.w	r9, r4, #4
 800767a:	f844 3c04 	str.w	r3, [r4, #-4]
 800767e:	f8cd b008 	str.w	fp, [sp, #8]
 8007682:	464c      	mov	r4, r9
 8007684:	461d      	mov	r5, r3
 8007686:	9903      	ldr	r1, [sp, #12]
 8007688:	e7d7      	b.n	800763a <__hexnan+0x2e>
 800768a:	2a29      	cmp	r2, #41	; 0x29
 800768c:	d155      	bne.n	800773a <__hexnan+0x12e>
 800768e:	3102      	adds	r1, #2
 8007690:	f8ca 1000 	str.w	r1, [sl]
 8007694:	f1bb 0f00 	cmp.w	fp, #0
 8007698:	d04f      	beq.n	800773a <__hexnan+0x12e>
 800769a:	454c      	cmp	r4, r9
 800769c:	d206      	bcs.n	80076ac <__hexnan+0xa0>
 800769e:	2d07      	cmp	r5, #7
 80076a0:	dc04      	bgt.n	80076ac <__hexnan+0xa0>
 80076a2:	462a      	mov	r2, r5
 80076a4:	4649      	mov	r1, r9
 80076a6:	4620      	mov	r0, r4
 80076a8:	f7ff ff8a 	bl	80075c0 <L_shift>
 80076ac:	4544      	cmp	r4, r8
 80076ae:	d934      	bls.n	800771a <__hexnan+0x10e>
 80076b0:	f1a8 0204 	sub.w	r2, r8, #4
 80076b4:	4623      	mov	r3, r4
 80076b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80076ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80076be:	429f      	cmp	r7, r3
 80076c0:	d2f9      	bcs.n	80076b6 <__hexnan+0xaa>
 80076c2:	1b3b      	subs	r3, r7, r4
 80076c4:	f023 0303 	bic.w	r3, r3, #3
 80076c8:	3304      	adds	r3, #4
 80076ca:	3e03      	subs	r6, #3
 80076cc:	3401      	adds	r4, #1
 80076ce:	42a6      	cmp	r6, r4
 80076d0:	bf38      	it	cc
 80076d2:	2304      	movcc	r3, #4
 80076d4:	4443      	add	r3, r8
 80076d6:	2200      	movs	r2, #0
 80076d8:	f843 2b04 	str.w	r2, [r3], #4
 80076dc:	429f      	cmp	r7, r3
 80076de:	d2fb      	bcs.n	80076d8 <__hexnan+0xcc>
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	b91b      	cbnz	r3, 80076ec <__hexnan+0xe0>
 80076e4:	4547      	cmp	r7, r8
 80076e6:	d126      	bne.n	8007736 <__hexnan+0x12a>
 80076e8:	2301      	movs	r3, #1
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	2005      	movs	r0, #5
 80076ee:	e025      	b.n	800773c <__hexnan+0x130>
 80076f0:	3501      	adds	r5, #1
 80076f2:	2d08      	cmp	r5, #8
 80076f4:	f10b 0b01 	add.w	fp, fp, #1
 80076f8:	dd06      	ble.n	8007708 <__hexnan+0xfc>
 80076fa:	4544      	cmp	r4, r8
 80076fc:	d9c3      	bls.n	8007686 <__hexnan+0x7a>
 80076fe:	2300      	movs	r3, #0
 8007700:	f844 3c04 	str.w	r3, [r4, #-4]
 8007704:	2501      	movs	r5, #1
 8007706:	3c04      	subs	r4, #4
 8007708:	6822      	ldr	r2, [r4, #0]
 800770a:	f000 000f 	and.w	r0, r0, #15
 800770e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007712:	6020      	str	r0, [r4, #0]
 8007714:	e7b7      	b.n	8007686 <__hexnan+0x7a>
 8007716:	2508      	movs	r5, #8
 8007718:	e7b5      	b.n	8007686 <__hexnan+0x7a>
 800771a:	9b01      	ldr	r3, [sp, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d0df      	beq.n	80076e0 <__hexnan+0xd4>
 8007720:	f1c3 0320 	rsb	r3, r3, #32
 8007724:	f04f 32ff 	mov.w	r2, #4294967295
 8007728:	40da      	lsrs	r2, r3
 800772a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800772e:	4013      	ands	r3, r2
 8007730:	f846 3c04 	str.w	r3, [r6, #-4]
 8007734:	e7d4      	b.n	80076e0 <__hexnan+0xd4>
 8007736:	3f04      	subs	r7, #4
 8007738:	e7d2      	b.n	80076e0 <__hexnan+0xd4>
 800773a:	2004      	movs	r0, #4
 800773c:	b007      	add	sp, #28
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007744 <malloc>:
 8007744:	4b02      	ldr	r3, [pc, #8]	; (8007750 <malloc+0xc>)
 8007746:	4601      	mov	r1, r0
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	f000 b823 	b.w	8007794 <_malloc_r>
 800774e:	bf00      	nop
 8007750:	20000210 	.word	0x20000210

08007754 <sbrk_aligned>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	4e0e      	ldr	r6, [pc, #56]	; (8007790 <sbrk_aligned+0x3c>)
 8007758:	460c      	mov	r4, r1
 800775a:	6831      	ldr	r1, [r6, #0]
 800775c:	4605      	mov	r5, r0
 800775e:	b911      	cbnz	r1, 8007766 <sbrk_aligned+0x12>
 8007760:	f001 f96a 	bl	8008a38 <_sbrk_r>
 8007764:	6030      	str	r0, [r6, #0]
 8007766:	4621      	mov	r1, r4
 8007768:	4628      	mov	r0, r5
 800776a:	f001 f965 	bl	8008a38 <_sbrk_r>
 800776e:	1c43      	adds	r3, r0, #1
 8007770:	d00a      	beq.n	8007788 <sbrk_aligned+0x34>
 8007772:	1cc4      	adds	r4, r0, #3
 8007774:	f024 0403 	bic.w	r4, r4, #3
 8007778:	42a0      	cmp	r0, r4
 800777a:	d007      	beq.n	800778c <sbrk_aligned+0x38>
 800777c:	1a21      	subs	r1, r4, r0
 800777e:	4628      	mov	r0, r5
 8007780:	f001 f95a 	bl	8008a38 <_sbrk_r>
 8007784:	3001      	adds	r0, #1
 8007786:	d101      	bne.n	800778c <sbrk_aligned+0x38>
 8007788:	f04f 34ff 	mov.w	r4, #4294967295
 800778c:	4620      	mov	r0, r4
 800778e:	bd70      	pop	{r4, r5, r6, pc}
 8007790:	20000420 	.word	0x20000420

08007794 <_malloc_r>:
 8007794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007798:	1ccd      	adds	r5, r1, #3
 800779a:	f025 0503 	bic.w	r5, r5, #3
 800779e:	3508      	adds	r5, #8
 80077a0:	2d0c      	cmp	r5, #12
 80077a2:	bf38      	it	cc
 80077a4:	250c      	movcc	r5, #12
 80077a6:	2d00      	cmp	r5, #0
 80077a8:	4607      	mov	r7, r0
 80077aa:	db01      	blt.n	80077b0 <_malloc_r+0x1c>
 80077ac:	42a9      	cmp	r1, r5
 80077ae:	d905      	bls.n	80077bc <_malloc_r+0x28>
 80077b0:	230c      	movs	r3, #12
 80077b2:	603b      	str	r3, [r7, #0]
 80077b4:	2600      	movs	r6, #0
 80077b6:	4630      	mov	r0, r6
 80077b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007890 <_malloc_r+0xfc>
 80077c0:	f000 f87a 	bl	80078b8 <__malloc_lock>
 80077c4:	f8d8 3000 	ldr.w	r3, [r8]
 80077c8:	461c      	mov	r4, r3
 80077ca:	bb5c      	cbnz	r4, 8007824 <_malloc_r+0x90>
 80077cc:	4629      	mov	r1, r5
 80077ce:	4638      	mov	r0, r7
 80077d0:	f7ff ffc0 	bl	8007754 <sbrk_aligned>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	4604      	mov	r4, r0
 80077d8:	d155      	bne.n	8007886 <_malloc_r+0xf2>
 80077da:	f8d8 4000 	ldr.w	r4, [r8]
 80077de:	4626      	mov	r6, r4
 80077e0:	2e00      	cmp	r6, #0
 80077e2:	d145      	bne.n	8007870 <_malloc_r+0xdc>
 80077e4:	2c00      	cmp	r4, #0
 80077e6:	d048      	beq.n	800787a <_malloc_r+0xe6>
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	4631      	mov	r1, r6
 80077ec:	4638      	mov	r0, r7
 80077ee:	eb04 0903 	add.w	r9, r4, r3
 80077f2:	f001 f921 	bl	8008a38 <_sbrk_r>
 80077f6:	4581      	cmp	r9, r0
 80077f8:	d13f      	bne.n	800787a <_malloc_r+0xe6>
 80077fa:	6821      	ldr	r1, [r4, #0]
 80077fc:	1a6d      	subs	r5, r5, r1
 80077fe:	4629      	mov	r1, r5
 8007800:	4638      	mov	r0, r7
 8007802:	f7ff ffa7 	bl	8007754 <sbrk_aligned>
 8007806:	3001      	adds	r0, #1
 8007808:	d037      	beq.n	800787a <_malloc_r+0xe6>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	442b      	add	r3, r5
 800780e:	6023      	str	r3, [r4, #0]
 8007810:	f8d8 3000 	ldr.w	r3, [r8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d038      	beq.n	800788a <_malloc_r+0xf6>
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	42a2      	cmp	r2, r4
 800781c:	d12b      	bne.n	8007876 <_malloc_r+0xe2>
 800781e:	2200      	movs	r2, #0
 8007820:	605a      	str	r2, [r3, #4]
 8007822:	e00f      	b.n	8007844 <_malloc_r+0xb0>
 8007824:	6822      	ldr	r2, [r4, #0]
 8007826:	1b52      	subs	r2, r2, r5
 8007828:	d41f      	bmi.n	800786a <_malloc_r+0xd6>
 800782a:	2a0b      	cmp	r2, #11
 800782c:	d917      	bls.n	800785e <_malloc_r+0xca>
 800782e:	1961      	adds	r1, r4, r5
 8007830:	42a3      	cmp	r3, r4
 8007832:	6025      	str	r5, [r4, #0]
 8007834:	bf18      	it	ne
 8007836:	6059      	strne	r1, [r3, #4]
 8007838:	6863      	ldr	r3, [r4, #4]
 800783a:	bf08      	it	eq
 800783c:	f8c8 1000 	streq.w	r1, [r8]
 8007840:	5162      	str	r2, [r4, r5]
 8007842:	604b      	str	r3, [r1, #4]
 8007844:	4638      	mov	r0, r7
 8007846:	f104 060b 	add.w	r6, r4, #11
 800784a:	f000 f83b 	bl	80078c4 <__malloc_unlock>
 800784e:	f026 0607 	bic.w	r6, r6, #7
 8007852:	1d23      	adds	r3, r4, #4
 8007854:	1af2      	subs	r2, r6, r3
 8007856:	d0ae      	beq.n	80077b6 <_malloc_r+0x22>
 8007858:	1b9b      	subs	r3, r3, r6
 800785a:	50a3      	str	r3, [r4, r2]
 800785c:	e7ab      	b.n	80077b6 <_malloc_r+0x22>
 800785e:	42a3      	cmp	r3, r4
 8007860:	6862      	ldr	r2, [r4, #4]
 8007862:	d1dd      	bne.n	8007820 <_malloc_r+0x8c>
 8007864:	f8c8 2000 	str.w	r2, [r8]
 8007868:	e7ec      	b.n	8007844 <_malloc_r+0xb0>
 800786a:	4623      	mov	r3, r4
 800786c:	6864      	ldr	r4, [r4, #4]
 800786e:	e7ac      	b.n	80077ca <_malloc_r+0x36>
 8007870:	4634      	mov	r4, r6
 8007872:	6876      	ldr	r6, [r6, #4]
 8007874:	e7b4      	b.n	80077e0 <_malloc_r+0x4c>
 8007876:	4613      	mov	r3, r2
 8007878:	e7cc      	b.n	8007814 <_malloc_r+0x80>
 800787a:	230c      	movs	r3, #12
 800787c:	603b      	str	r3, [r7, #0]
 800787e:	4638      	mov	r0, r7
 8007880:	f000 f820 	bl	80078c4 <__malloc_unlock>
 8007884:	e797      	b.n	80077b6 <_malloc_r+0x22>
 8007886:	6025      	str	r5, [r4, #0]
 8007888:	e7dc      	b.n	8007844 <_malloc_r+0xb0>
 800788a:	605b      	str	r3, [r3, #4]
 800788c:	deff      	udf	#255	; 0xff
 800788e:	bf00      	nop
 8007890:	2000041c 	.word	0x2000041c

08007894 <__ascii_mbtowc>:
 8007894:	b082      	sub	sp, #8
 8007896:	b901      	cbnz	r1, 800789a <__ascii_mbtowc+0x6>
 8007898:	a901      	add	r1, sp, #4
 800789a:	b142      	cbz	r2, 80078ae <__ascii_mbtowc+0x1a>
 800789c:	b14b      	cbz	r3, 80078b2 <__ascii_mbtowc+0x1e>
 800789e:	7813      	ldrb	r3, [r2, #0]
 80078a0:	600b      	str	r3, [r1, #0]
 80078a2:	7812      	ldrb	r2, [r2, #0]
 80078a4:	1e10      	subs	r0, r2, #0
 80078a6:	bf18      	it	ne
 80078a8:	2001      	movne	r0, #1
 80078aa:	b002      	add	sp, #8
 80078ac:	4770      	bx	lr
 80078ae:	4610      	mov	r0, r2
 80078b0:	e7fb      	b.n	80078aa <__ascii_mbtowc+0x16>
 80078b2:	f06f 0001 	mvn.w	r0, #1
 80078b6:	e7f8      	b.n	80078aa <__ascii_mbtowc+0x16>

080078b8 <__malloc_lock>:
 80078b8:	4801      	ldr	r0, [pc, #4]	; (80078c0 <__malloc_lock+0x8>)
 80078ba:	f7fe bd0a 	b.w	80062d2 <__retarget_lock_acquire_recursive>
 80078be:	bf00      	nop
 80078c0:	20000418 	.word	0x20000418

080078c4 <__malloc_unlock>:
 80078c4:	4801      	ldr	r0, [pc, #4]	; (80078cc <__malloc_unlock+0x8>)
 80078c6:	f7fe bd05 	b.w	80062d4 <__retarget_lock_release_recursive>
 80078ca:	bf00      	nop
 80078cc:	20000418 	.word	0x20000418

080078d0 <_Balloc>:
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	69c6      	ldr	r6, [r0, #28]
 80078d4:	4604      	mov	r4, r0
 80078d6:	460d      	mov	r5, r1
 80078d8:	b976      	cbnz	r6, 80078f8 <_Balloc+0x28>
 80078da:	2010      	movs	r0, #16
 80078dc:	f7ff ff32 	bl	8007744 <malloc>
 80078e0:	4602      	mov	r2, r0
 80078e2:	61e0      	str	r0, [r4, #28]
 80078e4:	b920      	cbnz	r0, 80078f0 <_Balloc+0x20>
 80078e6:	4b18      	ldr	r3, [pc, #96]	; (8007948 <_Balloc+0x78>)
 80078e8:	4818      	ldr	r0, [pc, #96]	; (800794c <_Balloc+0x7c>)
 80078ea:	216b      	movs	r1, #107	; 0x6b
 80078ec:	f001 f8b4 	bl	8008a58 <__assert_func>
 80078f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078f4:	6006      	str	r6, [r0, #0]
 80078f6:	60c6      	str	r6, [r0, #12]
 80078f8:	69e6      	ldr	r6, [r4, #28]
 80078fa:	68f3      	ldr	r3, [r6, #12]
 80078fc:	b183      	cbz	r3, 8007920 <_Balloc+0x50>
 80078fe:	69e3      	ldr	r3, [r4, #28]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007906:	b9b8      	cbnz	r0, 8007938 <_Balloc+0x68>
 8007908:	2101      	movs	r1, #1
 800790a:	fa01 f605 	lsl.w	r6, r1, r5
 800790e:	1d72      	adds	r2, r6, #5
 8007910:	0092      	lsls	r2, r2, #2
 8007912:	4620      	mov	r0, r4
 8007914:	f001 f8be 	bl	8008a94 <_calloc_r>
 8007918:	b160      	cbz	r0, 8007934 <_Balloc+0x64>
 800791a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800791e:	e00e      	b.n	800793e <_Balloc+0x6e>
 8007920:	2221      	movs	r2, #33	; 0x21
 8007922:	2104      	movs	r1, #4
 8007924:	4620      	mov	r0, r4
 8007926:	f001 f8b5 	bl	8008a94 <_calloc_r>
 800792a:	69e3      	ldr	r3, [r4, #28]
 800792c:	60f0      	str	r0, [r6, #12]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e4      	bne.n	80078fe <_Balloc+0x2e>
 8007934:	2000      	movs	r0, #0
 8007936:	bd70      	pop	{r4, r5, r6, pc}
 8007938:	6802      	ldr	r2, [r0, #0]
 800793a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800793e:	2300      	movs	r3, #0
 8007940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007944:	e7f7      	b.n	8007936 <_Balloc+0x66>
 8007946:	bf00      	nop
 8007948:	08009dc9 	.word	0x08009dc9
 800794c:	08009ea9 	.word	0x08009ea9

08007950 <_Bfree>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	69c6      	ldr	r6, [r0, #28]
 8007954:	4605      	mov	r5, r0
 8007956:	460c      	mov	r4, r1
 8007958:	b976      	cbnz	r6, 8007978 <_Bfree+0x28>
 800795a:	2010      	movs	r0, #16
 800795c:	f7ff fef2 	bl	8007744 <malloc>
 8007960:	4602      	mov	r2, r0
 8007962:	61e8      	str	r0, [r5, #28]
 8007964:	b920      	cbnz	r0, 8007970 <_Bfree+0x20>
 8007966:	4b09      	ldr	r3, [pc, #36]	; (800798c <_Bfree+0x3c>)
 8007968:	4809      	ldr	r0, [pc, #36]	; (8007990 <_Bfree+0x40>)
 800796a:	218f      	movs	r1, #143	; 0x8f
 800796c:	f001 f874 	bl	8008a58 <__assert_func>
 8007970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007974:	6006      	str	r6, [r0, #0]
 8007976:	60c6      	str	r6, [r0, #12]
 8007978:	b13c      	cbz	r4, 800798a <_Bfree+0x3a>
 800797a:	69eb      	ldr	r3, [r5, #28]
 800797c:	6862      	ldr	r2, [r4, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007984:	6021      	str	r1, [r4, #0]
 8007986:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800798a:	bd70      	pop	{r4, r5, r6, pc}
 800798c:	08009dc9 	.word	0x08009dc9
 8007990:	08009ea9 	.word	0x08009ea9

08007994 <__multadd>:
 8007994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007998:	690d      	ldr	r5, [r1, #16]
 800799a:	4607      	mov	r7, r0
 800799c:	460c      	mov	r4, r1
 800799e:	461e      	mov	r6, r3
 80079a0:	f101 0c14 	add.w	ip, r1, #20
 80079a4:	2000      	movs	r0, #0
 80079a6:	f8dc 3000 	ldr.w	r3, [ip]
 80079aa:	b299      	uxth	r1, r3
 80079ac:	fb02 6101 	mla	r1, r2, r1, r6
 80079b0:	0c1e      	lsrs	r6, r3, #16
 80079b2:	0c0b      	lsrs	r3, r1, #16
 80079b4:	fb02 3306 	mla	r3, r2, r6, r3
 80079b8:	b289      	uxth	r1, r1
 80079ba:	3001      	adds	r0, #1
 80079bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079c0:	4285      	cmp	r5, r0
 80079c2:	f84c 1b04 	str.w	r1, [ip], #4
 80079c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079ca:	dcec      	bgt.n	80079a6 <__multadd+0x12>
 80079cc:	b30e      	cbz	r6, 8007a12 <__multadd+0x7e>
 80079ce:	68a3      	ldr	r3, [r4, #8]
 80079d0:	42ab      	cmp	r3, r5
 80079d2:	dc19      	bgt.n	8007a08 <__multadd+0x74>
 80079d4:	6861      	ldr	r1, [r4, #4]
 80079d6:	4638      	mov	r0, r7
 80079d8:	3101      	adds	r1, #1
 80079da:	f7ff ff79 	bl	80078d0 <_Balloc>
 80079de:	4680      	mov	r8, r0
 80079e0:	b928      	cbnz	r0, 80079ee <__multadd+0x5a>
 80079e2:	4602      	mov	r2, r0
 80079e4:	4b0c      	ldr	r3, [pc, #48]	; (8007a18 <__multadd+0x84>)
 80079e6:	480d      	ldr	r0, [pc, #52]	; (8007a1c <__multadd+0x88>)
 80079e8:	21ba      	movs	r1, #186	; 0xba
 80079ea:	f001 f835 	bl	8008a58 <__assert_func>
 80079ee:	6922      	ldr	r2, [r4, #16]
 80079f0:	3202      	adds	r2, #2
 80079f2:	f104 010c 	add.w	r1, r4, #12
 80079f6:	0092      	lsls	r2, r2, #2
 80079f8:	300c      	adds	r0, #12
 80079fa:	f7fe fc6c 	bl	80062d6 <memcpy>
 80079fe:	4621      	mov	r1, r4
 8007a00:	4638      	mov	r0, r7
 8007a02:	f7ff ffa5 	bl	8007950 <_Bfree>
 8007a06:	4644      	mov	r4, r8
 8007a08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	615e      	str	r6, [r3, #20]
 8007a10:	6125      	str	r5, [r4, #16]
 8007a12:	4620      	mov	r0, r4
 8007a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a18:	08009e38 	.word	0x08009e38
 8007a1c:	08009ea9 	.word	0x08009ea9

08007a20 <__s2b>:
 8007a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a24:	460c      	mov	r4, r1
 8007a26:	4615      	mov	r5, r2
 8007a28:	461f      	mov	r7, r3
 8007a2a:	2209      	movs	r2, #9
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	4606      	mov	r6, r0
 8007a30:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a34:	2100      	movs	r1, #0
 8007a36:	2201      	movs	r2, #1
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	db09      	blt.n	8007a50 <__s2b+0x30>
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f7ff ff47 	bl	80078d0 <_Balloc>
 8007a42:	b940      	cbnz	r0, 8007a56 <__s2b+0x36>
 8007a44:	4602      	mov	r2, r0
 8007a46:	4b19      	ldr	r3, [pc, #100]	; (8007aac <__s2b+0x8c>)
 8007a48:	4819      	ldr	r0, [pc, #100]	; (8007ab0 <__s2b+0x90>)
 8007a4a:	21d3      	movs	r1, #211	; 0xd3
 8007a4c:	f001 f804 	bl	8008a58 <__assert_func>
 8007a50:	0052      	lsls	r2, r2, #1
 8007a52:	3101      	adds	r1, #1
 8007a54:	e7f0      	b.n	8007a38 <__s2b+0x18>
 8007a56:	9b08      	ldr	r3, [sp, #32]
 8007a58:	6143      	str	r3, [r0, #20]
 8007a5a:	2d09      	cmp	r5, #9
 8007a5c:	f04f 0301 	mov.w	r3, #1
 8007a60:	6103      	str	r3, [r0, #16]
 8007a62:	dd16      	ble.n	8007a92 <__s2b+0x72>
 8007a64:	f104 0909 	add.w	r9, r4, #9
 8007a68:	46c8      	mov	r8, r9
 8007a6a:	442c      	add	r4, r5
 8007a6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007a70:	4601      	mov	r1, r0
 8007a72:	3b30      	subs	r3, #48	; 0x30
 8007a74:	220a      	movs	r2, #10
 8007a76:	4630      	mov	r0, r6
 8007a78:	f7ff ff8c 	bl	8007994 <__multadd>
 8007a7c:	45a0      	cmp	r8, r4
 8007a7e:	d1f5      	bne.n	8007a6c <__s2b+0x4c>
 8007a80:	f1a5 0408 	sub.w	r4, r5, #8
 8007a84:	444c      	add	r4, r9
 8007a86:	1b2d      	subs	r5, r5, r4
 8007a88:	1963      	adds	r3, r4, r5
 8007a8a:	42bb      	cmp	r3, r7
 8007a8c:	db04      	blt.n	8007a98 <__s2b+0x78>
 8007a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a92:	340a      	adds	r4, #10
 8007a94:	2509      	movs	r5, #9
 8007a96:	e7f6      	b.n	8007a86 <__s2b+0x66>
 8007a98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a9c:	4601      	mov	r1, r0
 8007a9e:	3b30      	subs	r3, #48	; 0x30
 8007aa0:	220a      	movs	r2, #10
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f7ff ff76 	bl	8007994 <__multadd>
 8007aa8:	e7ee      	b.n	8007a88 <__s2b+0x68>
 8007aaa:	bf00      	nop
 8007aac:	08009e38 	.word	0x08009e38
 8007ab0:	08009ea9 	.word	0x08009ea9

08007ab4 <__hi0bits>:
 8007ab4:	0c03      	lsrs	r3, r0, #16
 8007ab6:	041b      	lsls	r3, r3, #16
 8007ab8:	b9d3      	cbnz	r3, 8007af0 <__hi0bits+0x3c>
 8007aba:	0400      	lsls	r0, r0, #16
 8007abc:	2310      	movs	r3, #16
 8007abe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ac2:	bf04      	itt	eq
 8007ac4:	0200      	lsleq	r0, r0, #8
 8007ac6:	3308      	addeq	r3, #8
 8007ac8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007acc:	bf04      	itt	eq
 8007ace:	0100      	lsleq	r0, r0, #4
 8007ad0:	3304      	addeq	r3, #4
 8007ad2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ad6:	bf04      	itt	eq
 8007ad8:	0080      	lsleq	r0, r0, #2
 8007ada:	3302      	addeq	r3, #2
 8007adc:	2800      	cmp	r0, #0
 8007ade:	db05      	blt.n	8007aec <__hi0bits+0x38>
 8007ae0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ae4:	f103 0301 	add.w	r3, r3, #1
 8007ae8:	bf08      	it	eq
 8007aea:	2320      	moveq	r3, #32
 8007aec:	4618      	mov	r0, r3
 8007aee:	4770      	bx	lr
 8007af0:	2300      	movs	r3, #0
 8007af2:	e7e4      	b.n	8007abe <__hi0bits+0xa>

08007af4 <__lo0bits>:
 8007af4:	6803      	ldr	r3, [r0, #0]
 8007af6:	f013 0207 	ands.w	r2, r3, #7
 8007afa:	d00c      	beq.n	8007b16 <__lo0bits+0x22>
 8007afc:	07d9      	lsls	r1, r3, #31
 8007afe:	d422      	bmi.n	8007b46 <__lo0bits+0x52>
 8007b00:	079a      	lsls	r2, r3, #30
 8007b02:	bf49      	itett	mi
 8007b04:	085b      	lsrmi	r3, r3, #1
 8007b06:	089b      	lsrpl	r3, r3, #2
 8007b08:	6003      	strmi	r3, [r0, #0]
 8007b0a:	2201      	movmi	r2, #1
 8007b0c:	bf5c      	itt	pl
 8007b0e:	6003      	strpl	r3, [r0, #0]
 8007b10:	2202      	movpl	r2, #2
 8007b12:	4610      	mov	r0, r2
 8007b14:	4770      	bx	lr
 8007b16:	b299      	uxth	r1, r3
 8007b18:	b909      	cbnz	r1, 8007b1e <__lo0bits+0x2a>
 8007b1a:	0c1b      	lsrs	r3, r3, #16
 8007b1c:	2210      	movs	r2, #16
 8007b1e:	b2d9      	uxtb	r1, r3
 8007b20:	b909      	cbnz	r1, 8007b26 <__lo0bits+0x32>
 8007b22:	3208      	adds	r2, #8
 8007b24:	0a1b      	lsrs	r3, r3, #8
 8007b26:	0719      	lsls	r1, r3, #28
 8007b28:	bf04      	itt	eq
 8007b2a:	091b      	lsreq	r3, r3, #4
 8007b2c:	3204      	addeq	r2, #4
 8007b2e:	0799      	lsls	r1, r3, #30
 8007b30:	bf04      	itt	eq
 8007b32:	089b      	lsreq	r3, r3, #2
 8007b34:	3202      	addeq	r2, #2
 8007b36:	07d9      	lsls	r1, r3, #31
 8007b38:	d403      	bmi.n	8007b42 <__lo0bits+0x4e>
 8007b3a:	085b      	lsrs	r3, r3, #1
 8007b3c:	f102 0201 	add.w	r2, r2, #1
 8007b40:	d003      	beq.n	8007b4a <__lo0bits+0x56>
 8007b42:	6003      	str	r3, [r0, #0]
 8007b44:	e7e5      	b.n	8007b12 <__lo0bits+0x1e>
 8007b46:	2200      	movs	r2, #0
 8007b48:	e7e3      	b.n	8007b12 <__lo0bits+0x1e>
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	e7e1      	b.n	8007b12 <__lo0bits+0x1e>
	...

08007b50 <__i2b>:
 8007b50:	b510      	push	{r4, lr}
 8007b52:	460c      	mov	r4, r1
 8007b54:	2101      	movs	r1, #1
 8007b56:	f7ff febb 	bl	80078d0 <_Balloc>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	b928      	cbnz	r0, 8007b6a <__i2b+0x1a>
 8007b5e:	4b05      	ldr	r3, [pc, #20]	; (8007b74 <__i2b+0x24>)
 8007b60:	4805      	ldr	r0, [pc, #20]	; (8007b78 <__i2b+0x28>)
 8007b62:	f240 1145 	movw	r1, #325	; 0x145
 8007b66:	f000 ff77 	bl	8008a58 <__assert_func>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	6144      	str	r4, [r0, #20]
 8007b6e:	6103      	str	r3, [r0, #16]
 8007b70:	bd10      	pop	{r4, pc}
 8007b72:	bf00      	nop
 8007b74:	08009e38 	.word	0x08009e38
 8007b78:	08009ea9 	.word	0x08009ea9

08007b7c <__multiply>:
 8007b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b80:	4691      	mov	r9, r2
 8007b82:	690a      	ldr	r2, [r1, #16]
 8007b84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	bfb8      	it	lt
 8007b8c:	460b      	movlt	r3, r1
 8007b8e:	460c      	mov	r4, r1
 8007b90:	bfbc      	itt	lt
 8007b92:	464c      	movlt	r4, r9
 8007b94:	4699      	movlt	r9, r3
 8007b96:	6927      	ldr	r7, [r4, #16]
 8007b98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b9c:	68a3      	ldr	r3, [r4, #8]
 8007b9e:	6861      	ldr	r1, [r4, #4]
 8007ba0:	eb07 060a 	add.w	r6, r7, sl
 8007ba4:	42b3      	cmp	r3, r6
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	bfb8      	it	lt
 8007baa:	3101      	addlt	r1, #1
 8007bac:	f7ff fe90 	bl	80078d0 <_Balloc>
 8007bb0:	b930      	cbnz	r0, 8007bc0 <__multiply+0x44>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	4b44      	ldr	r3, [pc, #272]	; (8007cc8 <__multiply+0x14c>)
 8007bb6:	4845      	ldr	r0, [pc, #276]	; (8007ccc <__multiply+0x150>)
 8007bb8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007bbc:	f000 ff4c 	bl	8008a58 <__assert_func>
 8007bc0:	f100 0514 	add.w	r5, r0, #20
 8007bc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bc8:	462b      	mov	r3, r5
 8007bca:	2200      	movs	r2, #0
 8007bcc:	4543      	cmp	r3, r8
 8007bce:	d321      	bcc.n	8007c14 <__multiply+0x98>
 8007bd0:	f104 0314 	add.w	r3, r4, #20
 8007bd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007bd8:	f109 0314 	add.w	r3, r9, #20
 8007bdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007be0:	9202      	str	r2, [sp, #8]
 8007be2:	1b3a      	subs	r2, r7, r4
 8007be4:	3a15      	subs	r2, #21
 8007be6:	f022 0203 	bic.w	r2, r2, #3
 8007bea:	3204      	adds	r2, #4
 8007bec:	f104 0115 	add.w	r1, r4, #21
 8007bf0:	428f      	cmp	r7, r1
 8007bf2:	bf38      	it	cc
 8007bf4:	2204      	movcc	r2, #4
 8007bf6:	9201      	str	r2, [sp, #4]
 8007bf8:	9a02      	ldr	r2, [sp, #8]
 8007bfa:	9303      	str	r3, [sp, #12]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d80c      	bhi.n	8007c1a <__multiply+0x9e>
 8007c00:	2e00      	cmp	r6, #0
 8007c02:	dd03      	ble.n	8007c0c <__multiply+0x90>
 8007c04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d05b      	beq.n	8007cc4 <__multiply+0x148>
 8007c0c:	6106      	str	r6, [r0, #16]
 8007c0e:	b005      	add	sp, #20
 8007c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c14:	f843 2b04 	str.w	r2, [r3], #4
 8007c18:	e7d8      	b.n	8007bcc <__multiply+0x50>
 8007c1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c1e:	f1ba 0f00 	cmp.w	sl, #0
 8007c22:	d024      	beq.n	8007c6e <__multiply+0xf2>
 8007c24:	f104 0e14 	add.w	lr, r4, #20
 8007c28:	46a9      	mov	r9, r5
 8007c2a:	f04f 0c00 	mov.w	ip, #0
 8007c2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c32:	f8d9 1000 	ldr.w	r1, [r9]
 8007c36:	fa1f fb82 	uxth.w	fp, r2
 8007c3a:	b289      	uxth	r1, r1
 8007c3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c44:	f8d9 2000 	ldr.w	r2, [r9]
 8007c48:	4461      	add	r1, ip
 8007c4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c56:	b289      	uxth	r1, r1
 8007c58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c5c:	4577      	cmp	r7, lr
 8007c5e:	f849 1b04 	str.w	r1, [r9], #4
 8007c62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c66:	d8e2      	bhi.n	8007c2e <__multiply+0xb2>
 8007c68:	9a01      	ldr	r2, [sp, #4]
 8007c6a:	f845 c002 	str.w	ip, [r5, r2]
 8007c6e:	9a03      	ldr	r2, [sp, #12]
 8007c70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c74:	3304      	adds	r3, #4
 8007c76:	f1b9 0f00 	cmp.w	r9, #0
 8007c7a:	d021      	beq.n	8007cc0 <__multiply+0x144>
 8007c7c:	6829      	ldr	r1, [r5, #0]
 8007c7e:	f104 0c14 	add.w	ip, r4, #20
 8007c82:	46ae      	mov	lr, r5
 8007c84:	f04f 0a00 	mov.w	sl, #0
 8007c88:	f8bc b000 	ldrh.w	fp, [ip]
 8007c8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c90:	fb09 220b 	mla	r2, r9, fp, r2
 8007c94:	4452      	add	r2, sl
 8007c96:	b289      	uxth	r1, r1
 8007c98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c9c:	f84e 1b04 	str.w	r1, [lr], #4
 8007ca0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ca4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ca8:	f8be 1000 	ldrh.w	r1, [lr]
 8007cac:	fb09 110a 	mla	r1, r9, sl, r1
 8007cb0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007cb4:	4567      	cmp	r7, ip
 8007cb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cba:	d8e5      	bhi.n	8007c88 <__multiply+0x10c>
 8007cbc:	9a01      	ldr	r2, [sp, #4]
 8007cbe:	50a9      	str	r1, [r5, r2]
 8007cc0:	3504      	adds	r5, #4
 8007cc2:	e799      	b.n	8007bf8 <__multiply+0x7c>
 8007cc4:	3e01      	subs	r6, #1
 8007cc6:	e79b      	b.n	8007c00 <__multiply+0x84>
 8007cc8:	08009e38 	.word	0x08009e38
 8007ccc:	08009ea9 	.word	0x08009ea9

08007cd0 <__pow5mult>:
 8007cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd4:	4615      	mov	r5, r2
 8007cd6:	f012 0203 	ands.w	r2, r2, #3
 8007cda:	4606      	mov	r6, r0
 8007cdc:	460f      	mov	r7, r1
 8007cde:	d007      	beq.n	8007cf0 <__pow5mult+0x20>
 8007ce0:	4c25      	ldr	r4, [pc, #148]	; (8007d78 <__pow5mult+0xa8>)
 8007ce2:	3a01      	subs	r2, #1
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cea:	f7ff fe53 	bl	8007994 <__multadd>
 8007cee:	4607      	mov	r7, r0
 8007cf0:	10ad      	asrs	r5, r5, #2
 8007cf2:	d03d      	beq.n	8007d70 <__pow5mult+0xa0>
 8007cf4:	69f4      	ldr	r4, [r6, #28]
 8007cf6:	b97c      	cbnz	r4, 8007d18 <__pow5mult+0x48>
 8007cf8:	2010      	movs	r0, #16
 8007cfa:	f7ff fd23 	bl	8007744 <malloc>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	61f0      	str	r0, [r6, #28]
 8007d02:	b928      	cbnz	r0, 8007d10 <__pow5mult+0x40>
 8007d04:	4b1d      	ldr	r3, [pc, #116]	; (8007d7c <__pow5mult+0xac>)
 8007d06:	481e      	ldr	r0, [pc, #120]	; (8007d80 <__pow5mult+0xb0>)
 8007d08:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007d0c:	f000 fea4 	bl	8008a58 <__assert_func>
 8007d10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d14:	6004      	str	r4, [r0, #0]
 8007d16:	60c4      	str	r4, [r0, #12]
 8007d18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007d1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d20:	b94c      	cbnz	r4, 8007d36 <__pow5mult+0x66>
 8007d22:	f240 2171 	movw	r1, #625	; 0x271
 8007d26:	4630      	mov	r0, r6
 8007d28:	f7ff ff12 	bl	8007b50 <__i2b>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d32:	4604      	mov	r4, r0
 8007d34:	6003      	str	r3, [r0, #0]
 8007d36:	f04f 0900 	mov.w	r9, #0
 8007d3a:	07eb      	lsls	r3, r5, #31
 8007d3c:	d50a      	bpl.n	8007d54 <__pow5mult+0x84>
 8007d3e:	4639      	mov	r1, r7
 8007d40:	4622      	mov	r2, r4
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7ff ff1a 	bl	8007b7c <__multiply>
 8007d48:	4639      	mov	r1, r7
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f7ff fdff 	bl	8007950 <_Bfree>
 8007d52:	4647      	mov	r7, r8
 8007d54:	106d      	asrs	r5, r5, #1
 8007d56:	d00b      	beq.n	8007d70 <__pow5mult+0xa0>
 8007d58:	6820      	ldr	r0, [r4, #0]
 8007d5a:	b938      	cbnz	r0, 8007d6c <__pow5mult+0x9c>
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4630      	mov	r0, r6
 8007d62:	f7ff ff0b 	bl	8007b7c <__multiply>
 8007d66:	6020      	str	r0, [r4, #0]
 8007d68:	f8c0 9000 	str.w	r9, [r0]
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	e7e4      	b.n	8007d3a <__pow5mult+0x6a>
 8007d70:	4638      	mov	r0, r7
 8007d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d76:	bf00      	nop
 8007d78:	08009ff8 	.word	0x08009ff8
 8007d7c:	08009dc9 	.word	0x08009dc9
 8007d80:	08009ea9 	.word	0x08009ea9

08007d84 <__lshift>:
 8007d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d88:	460c      	mov	r4, r1
 8007d8a:	6849      	ldr	r1, [r1, #4]
 8007d8c:	6923      	ldr	r3, [r4, #16]
 8007d8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d92:	68a3      	ldr	r3, [r4, #8]
 8007d94:	4607      	mov	r7, r0
 8007d96:	4691      	mov	r9, r2
 8007d98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d9c:	f108 0601 	add.w	r6, r8, #1
 8007da0:	42b3      	cmp	r3, r6
 8007da2:	db0b      	blt.n	8007dbc <__lshift+0x38>
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff fd93 	bl	80078d0 <_Balloc>
 8007daa:	4605      	mov	r5, r0
 8007dac:	b948      	cbnz	r0, 8007dc2 <__lshift+0x3e>
 8007dae:	4602      	mov	r2, r0
 8007db0:	4b28      	ldr	r3, [pc, #160]	; (8007e54 <__lshift+0xd0>)
 8007db2:	4829      	ldr	r0, [pc, #164]	; (8007e58 <__lshift+0xd4>)
 8007db4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007db8:	f000 fe4e 	bl	8008a58 <__assert_func>
 8007dbc:	3101      	adds	r1, #1
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	e7ee      	b.n	8007da0 <__lshift+0x1c>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f100 0114 	add.w	r1, r0, #20
 8007dc8:	f100 0210 	add.w	r2, r0, #16
 8007dcc:	4618      	mov	r0, r3
 8007dce:	4553      	cmp	r3, sl
 8007dd0:	db33      	blt.n	8007e3a <__lshift+0xb6>
 8007dd2:	6920      	ldr	r0, [r4, #16]
 8007dd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dd8:	f104 0314 	add.w	r3, r4, #20
 8007ddc:	f019 091f 	ands.w	r9, r9, #31
 8007de0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007de4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007de8:	d02b      	beq.n	8007e42 <__lshift+0xbe>
 8007dea:	f1c9 0e20 	rsb	lr, r9, #32
 8007dee:	468a      	mov	sl, r1
 8007df0:	2200      	movs	r2, #0
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	fa00 f009 	lsl.w	r0, r0, r9
 8007df8:	4310      	orrs	r0, r2
 8007dfa:	f84a 0b04 	str.w	r0, [sl], #4
 8007dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e02:	459c      	cmp	ip, r3
 8007e04:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e08:	d8f3      	bhi.n	8007df2 <__lshift+0x6e>
 8007e0a:	ebac 0304 	sub.w	r3, ip, r4
 8007e0e:	3b15      	subs	r3, #21
 8007e10:	f023 0303 	bic.w	r3, r3, #3
 8007e14:	3304      	adds	r3, #4
 8007e16:	f104 0015 	add.w	r0, r4, #21
 8007e1a:	4584      	cmp	ip, r0
 8007e1c:	bf38      	it	cc
 8007e1e:	2304      	movcc	r3, #4
 8007e20:	50ca      	str	r2, [r1, r3]
 8007e22:	b10a      	cbz	r2, 8007e28 <__lshift+0xa4>
 8007e24:	f108 0602 	add.w	r6, r8, #2
 8007e28:	3e01      	subs	r6, #1
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	612e      	str	r6, [r5, #16]
 8007e2e:	4621      	mov	r1, r4
 8007e30:	f7ff fd8e 	bl	8007950 <_Bfree>
 8007e34:	4628      	mov	r0, r5
 8007e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e3e:	3301      	adds	r3, #1
 8007e40:	e7c5      	b.n	8007dce <__lshift+0x4a>
 8007e42:	3904      	subs	r1, #4
 8007e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e48:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e4c:	459c      	cmp	ip, r3
 8007e4e:	d8f9      	bhi.n	8007e44 <__lshift+0xc0>
 8007e50:	e7ea      	b.n	8007e28 <__lshift+0xa4>
 8007e52:	bf00      	nop
 8007e54:	08009e38 	.word	0x08009e38
 8007e58:	08009ea9 	.word	0x08009ea9

08007e5c <__mcmp>:
 8007e5c:	b530      	push	{r4, r5, lr}
 8007e5e:	6902      	ldr	r2, [r0, #16]
 8007e60:	690c      	ldr	r4, [r1, #16]
 8007e62:	1b12      	subs	r2, r2, r4
 8007e64:	d10e      	bne.n	8007e84 <__mcmp+0x28>
 8007e66:	f100 0314 	add.w	r3, r0, #20
 8007e6a:	3114      	adds	r1, #20
 8007e6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e7c:	42a5      	cmp	r5, r4
 8007e7e:	d003      	beq.n	8007e88 <__mcmp+0x2c>
 8007e80:	d305      	bcc.n	8007e8e <__mcmp+0x32>
 8007e82:	2201      	movs	r2, #1
 8007e84:	4610      	mov	r0, r2
 8007e86:	bd30      	pop	{r4, r5, pc}
 8007e88:	4283      	cmp	r3, r0
 8007e8a:	d3f3      	bcc.n	8007e74 <__mcmp+0x18>
 8007e8c:	e7fa      	b.n	8007e84 <__mcmp+0x28>
 8007e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e92:	e7f7      	b.n	8007e84 <__mcmp+0x28>

08007e94 <__mdiff>:
 8007e94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e98:	460c      	mov	r4, r1
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4690      	mov	r8, r2
 8007ea2:	f7ff ffdb 	bl	8007e5c <__mcmp>
 8007ea6:	1e05      	subs	r5, r0, #0
 8007ea8:	d110      	bne.n	8007ecc <__mdiff+0x38>
 8007eaa:	4629      	mov	r1, r5
 8007eac:	4630      	mov	r0, r6
 8007eae:	f7ff fd0f 	bl	80078d0 <_Balloc>
 8007eb2:	b930      	cbnz	r0, 8007ec2 <__mdiff+0x2e>
 8007eb4:	4b3a      	ldr	r3, [pc, #232]	; (8007fa0 <__mdiff+0x10c>)
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	f240 2137 	movw	r1, #567	; 0x237
 8007ebc:	4839      	ldr	r0, [pc, #228]	; (8007fa4 <__mdiff+0x110>)
 8007ebe:	f000 fdcb 	bl	8008a58 <__assert_func>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ecc:	bfa4      	itt	ge
 8007ece:	4643      	movge	r3, r8
 8007ed0:	46a0      	movge	r8, r4
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ed8:	bfa6      	itte	ge
 8007eda:	461c      	movge	r4, r3
 8007edc:	2500      	movge	r5, #0
 8007ede:	2501      	movlt	r5, #1
 8007ee0:	f7ff fcf6 	bl	80078d0 <_Balloc>
 8007ee4:	b920      	cbnz	r0, 8007ef0 <__mdiff+0x5c>
 8007ee6:	4b2e      	ldr	r3, [pc, #184]	; (8007fa0 <__mdiff+0x10c>)
 8007ee8:	4602      	mov	r2, r0
 8007eea:	f240 2145 	movw	r1, #581	; 0x245
 8007eee:	e7e5      	b.n	8007ebc <__mdiff+0x28>
 8007ef0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ef4:	6926      	ldr	r6, [r4, #16]
 8007ef6:	60c5      	str	r5, [r0, #12]
 8007ef8:	f104 0914 	add.w	r9, r4, #20
 8007efc:	f108 0514 	add.w	r5, r8, #20
 8007f00:	f100 0e14 	add.w	lr, r0, #20
 8007f04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f0c:	f108 0210 	add.w	r2, r8, #16
 8007f10:	46f2      	mov	sl, lr
 8007f12:	2100      	movs	r1, #0
 8007f14:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f1c:	fa11 f88b 	uxtah	r8, r1, fp
 8007f20:	b299      	uxth	r1, r3
 8007f22:	0c1b      	lsrs	r3, r3, #16
 8007f24:	eba8 0801 	sub.w	r8, r8, r1
 8007f28:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f2c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f30:	fa1f f888 	uxth.w	r8, r8
 8007f34:	1419      	asrs	r1, r3, #16
 8007f36:	454e      	cmp	r6, r9
 8007f38:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f3c:	f84a 3b04 	str.w	r3, [sl], #4
 8007f40:	d8e8      	bhi.n	8007f14 <__mdiff+0x80>
 8007f42:	1b33      	subs	r3, r6, r4
 8007f44:	3b15      	subs	r3, #21
 8007f46:	f023 0303 	bic.w	r3, r3, #3
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	3415      	adds	r4, #21
 8007f4e:	42a6      	cmp	r6, r4
 8007f50:	bf38      	it	cc
 8007f52:	2304      	movcc	r3, #4
 8007f54:	441d      	add	r5, r3
 8007f56:	4473      	add	r3, lr
 8007f58:	469e      	mov	lr, r3
 8007f5a:	462e      	mov	r6, r5
 8007f5c:	4566      	cmp	r6, ip
 8007f5e:	d30e      	bcc.n	8007f7e <__mdiff+0xea>
 8007f60:	f10c 0203 	add.w	r2, ip, #3
 8007f64:	1b52      	subs	r2, r2, r5
 8007f66:	f022 0203 	bic.w	r2, r2, #3
 8007f6a:	3d03      	subs	r5, #3
 8007f6c:	45ac      	cmp	ip, r5
 8007f6e:	bf38      	it	cc
 8007f70:	2200      	movcc	r2, #0
 8007f72:	4413      	add	r3, r2
 8007f74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007f78:	b17a      	cbz	r2, 8007f9a <__mdiff+0x106>
 8007f7a:	6107      	str	r7, [r0, #16]
 8007f7c:	e7a4      	b.n	8007ec8 <__mdiff+0x34>
 8007f7e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f82:	fa11 f288 	uxtah	r2, r1, r8
 8007f86:	1414      	asrs	r4, r2, #16
 8007f88:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f8c:	b292      	uxth	r2, r2
 8007f8e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f92:	f84e 2b04 	str.w	r2, [lr], #4
 8007f96:	1421      	asrs	r1, r4, #16
 8007f98:	e7e0      	b.n	8007f5c <__mdiff+0xc8>
 8007f9a:	3f01      	subs	r7, #1
 8007f9c:	e7ea      	b.n	8007f74 <__mdiff+0xe0>
 8007f9e:	bf00      	nop
 8007fa0:	08009e38 	.word	0x08009e38
 8007fa4:	08009ea9 	.word	0x08009ea9

08007fa8 <__ulp>:
 8007fa8:	b082      	sub	sp, #8
 8007faa:	ed8d 0b00 	vstr	d0, [sp]
 8007fae:	9a01      	ldr	r2, [sp, #4]
 8007fb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <__ulp+0x48>)
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dc08      	bgt.n	8007fce <__ulp+0x26>
 8007fbc:	425b      	negs	r3, r3
 8007fbe:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007fc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007fc6:	da04      	bge.n	8007fd2 <__ulp+0x2a>
 8007fc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007fcc:	4113      	asrs	r3, r2
 8007fce:	2200      	movs	r2, #0
 8007fd0:	e008      	b.n	8007fe4 <__ulp+0x3c>
 8007fd2:	f1a2 0314 	sub.w	r3, r2, #20
 8007fd6:	2b1e      	cmp	r3, #30
 8007fd8:	bfda      	itte	le
 8007fda:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007fde:	40da      	lsrle	r2, r3
 8007fe0:	2201      	movgt	r2, #1
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	ec41 0b10 	vmov	d0, r0, r1
 8007fec:	b002      	add	sp, #8
 8007fee:	4770      	bx	lr
 8007ff0:	7ff00000 	.word	0x7ff00000

08007ff4 <__b2d>:
 8007ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff8:	6906      	ldr	r6, [r0, #16]
 8007ffa:	f100 0814 	add.w	r8, r0, #20
 8007ffe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008002:	1f37      	subs	r7, r6, #4
 8008004:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008008:	4610      	mov	r0, r2
 800800a:	f7ff fd53 	bl	8007ab4 <__hi0bits>
 800800e:	f1c0 0320 	rsb	r3, r0, #32
 8008012:	280a      	cmp	r0, #10
 8008014:	600b      	str	r3, [r1, #0]
 8008016:	491b      	ldr	r1, [pc, #108]	; (8008084 <__b2d+0x90>)
 8008018:	dc15      	bgt.n	8008046 <__b2d+0x52>
 800801a:	f1c0 0c0b 	rsb	ip, r0, #11
 800801e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008022:	45b8      	cmp	r8, r7
 8008024:	ea43 0501 	orr.w	r5, r3, r1
 8008028:	bf34      	ite	cc
 800802a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800802e:	2300      	movcs	r3, #0
 8008030:	3015      	adds	r0, #21
 8008032:	fa02 f000 	lsl.w	r0, r2, r0
 8008036:	fa23 f30c 	lsr.w	r3, r3, ip
 800803a:	4303      	orrs	r3, r0
 800803c:	461c      	mov	r4, r3
 800803e:	ec45 4b10 	vmov	d0, r4, r5
 8008042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008046:	45b8      	cmp	r8, r7
 8008048:	bf3a      	itte	cc
 800804a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800804e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008052:	2300      	movcs	r3, #0
 8008054:	380b      	subs	r0, #11
 8008056:	d012      	beq.n	800807e <__b2d+0x8a>
 8008058:	f1c0 0120 	rsb	r1, r0, #32
 800805c:	fa23 f401 	lsr.w	r4, r3, r1
 8008060:	4082      	lsls	r2, r0
 8008062:	4322      	orrs	r2, r4
 8008064:	4547      	cmp	r7, r8
 8008066:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800806a:	bf8c      	ite	hi
 800806c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008070:	2200      	movls	r2, #0
 8008072:	4083      	lsls	r3, r0
 8008074:	40ca      	lsrs	r2, r1
 8008076:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800807a:	4313      	orrs	r3, r2
 800807c:	e7de      	b.n	800803c <__b2d+0x48>
 800807e:	ea42 0501 	orr.w	r5, r2, r1
 8008082:	e7db      	b.n	800803c <__b2d+0x48>
 8008084:	3ff00000 	.word	0x3ff00000

08008088 <__d2b>:
 8008088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800808c:	460f      	mov	r7, r1
 800808e:	2101      	movs	r1, #1
 8008090:	ec59 8b10 	vmov	r8, r9, d0
 8008094:	4616      	mov	r6, r2
 8008096:	f7ff fc1b 	bl	80078d0 <_Balloc>
 800809a:	4604      	mov	r4, r0
 800809c:	b930      	cbnz	r0, 80080ac <__d2b+0x24>
 800809e:	4602      	mov	r2, r0
 80080a0:	4b24      	ldr	r3, [pc, #144]	; (8008134 <__d2b+0xac>)
 80080a2:	4825      	ldr	r0, [pc, #148]	; (8008138 <__d2b+0xb0>)
 80080a4:	f240 310f 	movw	r1, #783	; 0x30f
 80080a8:	f000 fcd6 	bl	8008a58 <__assert_func>
 80080ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080b4:	bb2d      	cbnz	r5, 8008102 <__d2b+0x7a>
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	f1b8 0300 	subs.w	r3, r8, #0
 80080bc:	d026      	beq.n	800810c <__d2b+0x84>
 80080be:	4668      	mov	r0, sp
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	f7ff fd17 	bl	8007af4 <__lo0bits>
 80080c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080ca:	b1e8      	cbz	r0, 8008108 <__d2b+0x80>
 80080cc:	f1c0 0320 	rsb	r3, r0, #32
 80080d0:	fa02 f303 	lsl.w	r3, r2, r3
 80080d4:	430b      	orrs	r3, r1
 80080d6:	40c2      	lsrs	r2, r0
 80080d8:	6163      	str	r3, [r4, #20]
 80080da:	9201      	str	r2, [sp, #4]
 80080dc:	9b01      	ldr	r3, [sp, #4]
 80080de:	61a3      	str	r3, [r4, #24]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bf14      	ite	ne
 80080e4:	2202      	movne	r2, #2
 80080e6:	2201      	moveq	r2, #1
 80080e8:	6122      	str	r2, [r4, #16]
 80080ea:	b1bd      	cbz	r5, 800811c <__d2b+0x94>
 80080ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080f0:	4405      	add	r5, r0
 80080f2:	603d      	str	r5, [r7, #0]
 80080f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080f8:	6030      	str	r0, [r6, #0]
 80080fa:	4620      	mov	r0, r4
 80080fc:	b003      	add	sp, #12
 80080fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008106:	e7d6      	b.n	80080b6 <__d2b+0x2e>
 8008108:	6161      	str	r1, [r4, #20]
 800810a:	e7e7      	b.n	80080dc <__d2b+0x54>
 800810c:	a801      	add	r0, sp, #4
 800810e:	f7ff fcf1 	bl	8007af4 <__lo0bits>
 8008112:	9b01      	ldr	r3, [sp, #4]
 8008114:	6163      	str	r3, [r4, #20]
 8008116:	3020      	adds	r0, #32
 8008118:	2201      	movs	r2, #1
 800811a:	e7e5      	b.n	80080e8 <__d2b+0x60>
 800811c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008120:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008124:	6038      	str	r0, [r7, #0]
 8008126:	6918      	ldr	r0, [r3, #16]
 8008128:	f7ff fcc4 	bl	8007ab4 <__hi0bits>
 800812c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008130:	e7e2      	b.n	80080f8 <__d2b+0x70>
 8008132:	bf00      	nop
 8008134:	08009e38 	.word	0x08009e38
 8008138:	08009ea9 	.word	0x08009ea9

0800813c <__ratio>:
 800813c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	4688      	mov	r8, r1
 8008142:	4669      	mov	r1, sp
 8008144:	4681      	mov	r9, r0
 8008146:	f7ff ff55 	bl	8007ff4 <__b2d>
 800814a:	a901      	add	r1, sp, #4
 800814c:	4640      	mov	r0, r8
 800814e:	ec55 4b10 	vmov	r4, r5, d0
 8008152:	f7ff ff4f 	bl	8007ff4 <__b2d>
 8008156:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800815a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800815e:	eba3 0c02 	sub.w	ip, r3, r2
 8008162:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008166:	1a9b      	subs	r3, r3, r2
 8008168:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800816c:	ec51 0b10 	vmov	r0, r1, d0
 8008170:	2b00      	cmp	r3, #0
 8008172:	bfd6      	itet	le
 8008174:	460a      	movle	r2, r1
 8008176:	462a      	movgt	r2, r5
 8008178:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800817c:	468b      	mov	fp, r1
 800817e:	462f      	mov	r7, r5
 8008180:	bfd4      	ite	le
 8008182:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008186:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800818a:	4620      	mov	r0, r4
 800818c:	ee10 2a10 	vmov	r2, s0
 8008190:	465b      	mov	r3, fp
 8008192:	4639      	mov	r1, r7
 8008194:	f7f8 fb5a 	bl	800084c <__aeabi_ddiv>
 8008198:	ec41 0b10 	vmov	d0, r0, r1
 800819c:	b003      	add	sp, #12
 800819e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080081a2 <__copybits>:
 80081a2:	3901      	subs	r1, #1
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	1149      	asrs	r1, r1, #5
 80081a8:	6914      	ldr	r4, [r2, #16]
 80081aa:	3101      	adds	r1, #1
 80081ac:	f102 0314 	add.w	r3, r2, #20
 80081b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80081b8:	1f05      	subs	r5, r0, #4
 80081ba:	42a3      	cmp	r3, r4
 80081bc:	d30c      	bcc.n	80081d8 <__copybits+0x36>
 80081be:	1aa3      	subs	r3, r4, r2
 80081c0:	3b11      	subs	r3, #17
 80081c2:	f023 0303 	bic.w	r3, r3, #3
 80081c6:	3211      	adds	r2, #17
 80081c8:	42a2      	cmp	r2, r4
 80081ca:	bf88      	it	hi
 80081cc:	2300      	movhi	r3, #0
 80081ce:	4418      	add	r0, r3
 80081d0:	2300      	movs	r3, #0
 80081d2:	4288      	cmp	r0, r1
 80081d4:	d305      	bcc.n	80081e2 <__copybits+0x40>
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	f853 6b04 	ldr.w	r6, [r3], #4
 80081dc:	f845 6f04 	str.w	r6, [r5, #4]!
 80081e0:	e7eb      	b.n	80081ba <__copybits+0x18>
 80081e2:	f840 3b04 	str.w	r3, [r0], #4
 80081e6:	e7f4      	b.n	80081d2 <__copybits+0x30>

080081e8 <__any_on>:
 80081e8:	f100 0214 	add.w	r2, r0, #20
 80081ec:	6900      	ldr	r0, [r0, #16]
 80081ee:	114b      	asrs	r3, r1, #5
 80081f0:	4298      	cmp	r0, r3
 80081f2:	b510      	push	{r4, lr}
 80081f4:	db11      	blt.n	800821a <__any_on+0x32>
 80081f6:	dd0a      	ble.n	800820e <__any_on+0x26>
 80081f8:	f011 011f 	ands.w	r1, r1, #31
 80081fc:	d007      	beq.n	800820e <__any_on+0x26>
 80081fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008202:	fa24 f001 	lsr.w	r0, r4, r1
 8008206:	fa00 f101 	lsl.w	r1, r0, r1
 800820a:	428c      	cmp	r4, r1
 800820c:	d10b      	bne.n	8008226 <__any_on+0x3e>
 800820e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008212:	4293      	cmp	r3, r2
 8008214:	d803      	bhi.n	800821e <__any_on+0x36>
 8008216:	2000      	movs	r0, #0
 8008218:	bd10      	pop	{r4, pc}
 800821a:	4603      	mov	r3, r0
 800821c:	e7f7      	b.n	800820e <__any_on+0x26>
 800821e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008222:	2900      	cmp	r1, #0
 8008224:	d0f5      	beq.n	8008212 <__any_on+0x2a>
 8008226:	2001      	movs	r0, #1
 8008228:	e7f6      	b.n	8008218 <__any_on+0x30>

0800822a <__ascii_wctomb>:
 800822a:	b149      	cbz	r1, 8008240 <__ascii_wctomb+0x16>
 800822c:	2aff      	cmp	r2, #255	; 0xff
 800822e:	bf85      	ittet	hi
 8008230:	238a      	movhi	r3, #138	; 0x8a
 8008232:	6003      	strhi	r3, [r0, #0]
 8008234:	700a      	strbls	r2, [r1, #0]
 8008236:	f04f 30ff 	movhi.w	r0, #4294967295
 800823a:	bf98      	it	ls
 800823c:	2001      	movls	r0, #1
 800823e:	4770      	bx	lr
 8008240:	4608      	mov	r0, r1
 8008242:	4770      	bx	lr

08008244 <__ssputs_r>:
 8008244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008248:	688e      	ldr	r6, [r1, #8]
 800824a:	461f      	mov	r7, r3
 800824c:	42be      	cmp	r6, r7
 800824e:	680b      	ldr	r3, [r1, #0]
 8008250:	4682      	mov	sl, r0
 8008252:	460c      	mov	r4, r1
 8008254:	4690      	mov	r8, r2
 8008256:	d82c      	bhi.n	80082b2 <__ssputs_r+0x6e>
 8008258:	898a      	ldrh	r2, [r1, #12]
 800825a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800825e:	d026      	beq.n	80082ae <__ssputs_r+0x6a>
 8008260:	6965      	ldr	r5, [r4, #20]
 8008262:	6909      	ldr	r1, [r1, #16]
 8008264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008268:	eba3 0901 	sub.w	r9, r3, r1
 800826c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008270:	1c7b      	adds	r3, r7, #1
 8008272:	444b      	add	r3, r9
 8008274:	106d      	asrs	r5, r5, #1
 8008276:	429d      	cmp	r5, r3
 8008278:	bf38      	it	cc
 800827a:	461d      	movcc	r5, r3
 800827c:	0553      	lsls	r3, r2, #21
 800827e:	d527      	bpl.n	80082d0 <__ssputs_r+0x8c>
 8008280:	4629      	mov	r1, r5
 8008282:	f7ff fa87 	bl	8007794 <_malloc_r>
 8008286:	4606      	mov	r6, r0
 8008288:	b360      	cbz	r0, 80082e4 <__ssputs_r+0xa0>
 800828a:	6921      	ldr	r1, [r4, #16]
 800828c:	464a      	mov	r2, r9
 800828e:	f7fe f822 	bl	80062d6 <memcpy>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829c:	81a3      	strh	r3, [r4, #12]
 800829e:	6126      	str	r6, [r4, #16]
 80082a0:	6165      	str	r5, [r4, #20]
 80082a2:	444e      	add	r6, r9
 80082a4:	eba5 0509 	sub.w	r5, r5, r9
 80082a8:	6026      	str	r6, [r4, #0]
 80082aa:	60a5      	str	r5, [r4, #8]
 80082ac:	463e      	mov	r6, r7
 80082ae:	42be      	cmp	r6, r7
 80082b0:	d900      	bls.n	80082b4 <__ssputs_r+0x70>
 80082b2:	463e      	mov	r6, r7
 80082b4:	6820      	ldr	r0, [r4, #0]
 80082b6:	4632      	mov	r2, r6
 80082b8:	4641      	mov	r1, r8
 80082ba:	f000 fba3 	bl	8008a04 <memmove>
 80082be:	68a3      	ldr	r3, [r4, #8]
 80082c0:	1b9b      	subs	r3, r3, r6
 80082c2:	60a3      	str	r3, [r4, #8]
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	4433      	add	r3, r6
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	2000      	movs	r0, #0
 80082cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d0:	462a      	mov	r2, r5
 80082d2:	f000 fbf5 	bl	8008ac0 <_realloc_r>
 80082d6:	4606      	mov	r6, r0
 80082d8:	2800      	cmp	r0, #0
 80082da:	d1e0      	bne.n	800829e <__ssputs_r+0x5a>
 80082dc:	6921      	ldr	r1, [r4, #16]
 80082de:	4650      	mov	r0, sl
 80082e0:	f7fe fe8c 	bl	8006ffc <_free_r>
 80082e4:	230c      	movs	r3, #12
 80082e6:	f8ca 3000 	str.w	r3, [sl]
 80082ea:	89a3      	ldrh	r3, [r4, #12]
 80082ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082f0:	81a3      	strh	r3, [r4, #12]
 80082f2:	f04f 30ff 	mov.w	r0, #4294967295
 80082f6:	e7e9      	b.n	80082cc <__ssputs_r+0x88>

080082f8 <_svfiprintf_r>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	4698      	mov	r8, r3
 80082fe:	898b      	ldrh	r3, [r1, #12]
 8008300:	061b      	lsls	r3, r3, #24
 8008302:	b09d      	sub	sp, #116	; 0x74
 8008304:	4607      	mov	r7, r0
 8008306:	460d      	mov	r5, r1
 8008308:	4614      	mov	r4, r2
 800830a:	d50e      	bpl.n	800832a <_svfiprintf_r+0x32>
 800830c:	690b      	ldr	r3, [r1, #16]
 800830e:	b963      	cbnz	r3, 800832a <_svfiprintf_r+0x32>
 8008310:	2140      	movs	r1, #64	; 0x40
 8008312:	f7ff fa3f 	bl	8007794 <_malloc_r>
 8008316:	6028      	str	r0, [r5, #0]
 8008318:	6128      	str	r0, [r5, #16]
 800831a:	b920      	cbnz	r0, 8008326 <_svfiprintf_r+0x2e>
 800831c:	230c      	movs	r3, #12
 800831e:	603b      	str	r3, [r7, #0]
 8008320:	f04f 30ff 	mov.w	r0, #4294967295
 8008324:	e0d0      	b.n	80084c8 <_svfiprintf_r+0x1d0>
 8008326:	2340      	movs	r3, #64	; 0x40
 8008328:	616b      	str	r3, [r5, #20]
 800832a:	2300      	movs	r3, #0
 800832c:	9309      	str	r3, [sp, #36]	; 0x24
 800832e:	2320      	movs	r3, #32
 8008330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008334:	f8cd 800c 	str.w	r8, [sp, #12]
 8008338:	2330      	movs	r3, #48	; 0x30
 800833a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80084e0 <_svfiprintf_r+0x1e8>
 800833e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008342:	f04f 0901 	mov.w	r9, #1
 8008346:	4623      	mov	r3, r4
 8008348:	469a      	mov	sl, r3
 800834a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800834e:	b10a      	cbz	r2, 8008354 <_svfiprintf_r+0x5c>
 8008350:	2a25      	cmp	r2, #37	; 0x25
 8008352:	d1f9      	bne.n	8008348 <_svfiprintf_r+0x50>
 8008354:	ebba 0b04 	subs.w	fp, sl, r4
 8008358:	d00b      	beq.n	8008372 <_svfiprintf_r+0x7a>
 800835a:	465b      	mov	r3, fp
 800835c:	4622      	mov	r2, r4
 800835e:	4629      	mov	r1, r5
 8008360:	4638      	mov	r0, r7
 8008362:	f7ff ff6f 	bl	8008244 <__ssputs_r>
 8008366:	3001      	adds	r0, #1
 8008368:	f000 80a9 	beq.w	80084be <_svfiprintf_r+0x1c6>
 800836c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800836e:	445a      	add	r2, fp
 8008370:	9209      	str	r2, [sp, #36]	; 0x24
 8008372:	f89a 3000 	ldrb.w	r3, [sl]
 8008376:	2b00      	cmp	r3, #0
 8008378:	f000 80a1 	beq.w	80084be <_svfiprintf_r+0x1c6>
 800837c:	2300      	movs	r3, #0
 800837e:	f04f 32ff 	mov.w	r2, #4294967295
 8008382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008386:	f10a 0a01 	add.w	sl, sl, #1
 800838a:	9304      	str	r3, [sp, #16]
 800838c:	9307      	str	r3, [sp, #28]
 800838e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008392:	931a      	str	r3, [sp, #104]	; 0x68
 8008394:	4654      	mov	r4, sl
 8008396:	2205      	movs	r2, #5
 8008398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800839c:	4850      	ldr	r0, [pc, #320]	; (80084e0 <_svfiprintf_r+0x1e8>)
 800839e:	f7f7 ff17 	bl	80001d0 <memchr>
 80083a2:	9a04      	ldr	r2, [sp, #16]
 80083a4:	b9d8      	cbnz	r0, 80083de <_svfiprintf_r+0xe6>
 80083a6:	06d0      	lsls	r0, r2, #27
 80083a8:	bf44      	itt	mi
 80083aa:	2320      	movmi	r3, #32
 80083ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083b0:	0711      	lsls	r1, r2, #28
 80083b2:	bf44      	itt	mi
 80083b4:	232b      	movmi	r3, #43	; 0x2b
 80083b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ba:	f89a 3000 	ldrb.w	r3, [sl]
 80083be:	2b2a      	cmp	r3, #42	; 0x2a
 80083c0:	d015      	beq.n	80083ee <_svfiprintf_r+0xf6>
 80083c2:	9a07      	ldr	r2, [sp, #28]
 80083c4:	4654      	mov	r4, sl
 80083c6:	2000      	movs	r0, #0
 80083c8:	f04f 0c0a 	mov.w	ip, #10
 80083cc:	4621      	mov	r1, r4
 80083ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083d2:	3b30      	subs	r3, #48	; 0x30
 80083d4:	2b09      	cmp	r3, #9
 80083d6:	d94d      	bls.n	8008474 <_svfiprintf_r+0x17c>
 80083d8:	b1b0      	cbz	r0, 8008408 <_svfiprintf_r+0x110>
 80083da:	9207      	str	r2, [sp, #28]
 80083dc:	e014      	b.n	8008408 <_svfiprintf_r+0x110>
 80083de:	eba0 0308 	sub.w	r3, r0, r8
 80083e2:	fa09 f303 	lsl.w	r3, r9, r3
 80083e6:	4313      	orrs	r3, r2
 80083e8:	9304      	str	r3, [sp, #16]
 80083ea:	46a2      	mov	sl, r4
 80083ec:	e7d2      	b.n	8008394 <_svfiprintf_r+0x9c>
 80083ee:	9b03      	ldr	r3, [sp, #12]
 80083f0:	1d19      	adds	r1, r3, #4
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	9103      	str	r1, [sp, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	bfbb      	ittet	lt
 80083fa:	425b      	neglt	r3, r3
 80083fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008400:	9307      	strge	r3, [sp, #28]
 8008402:	9307      	strlt	r3, [sp, #28]
 8008404:	bfb8      	it	lt
 8008406:	9204      	strlt	r2, [sp, #16]
 8008408:	7823      	ldrb	r3, [r4, #0]
 800840a:	2b2e      	cmp	r3, #46	; 0x2e
 800840c:	d10c      	bne.n	8008428 <_svfiprintf_r+0x130>
 800840e:	7863      	ldrb	r3, [r4, #1]
 8008410:	2b2a      	cmp	r3, #42	; 0x2a
 8008412:	d134      	bne.n	800847e <_svfiprintf_r+0x186>
 8008414:	9b03      	ldr	r3, [sp, #12]
 8008416:	1d1a      	adds	r2, r3, #4
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	9203      	str	r2, [sp, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	bfb8      	it	lt
 8008420:	f04f 33ff 	movlt.w	r3, #4294967295
 8008424:	3402      	adds	r4, #2
 8008426:	9305      	str	r3, [sp, #20]
 8008428:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80084f0 <_svfiprintf_r+0x1f8>
 800842c:	7821      	ldrb	r1, [r4, #0]
 800842e:	2203      	movs	r2, #3
 8008430:	4650      	mov	r0, sl
 8008432:	f7f7 fecd 	bl	80001d0 <memchr>
 8008436:	b138      	cbz	r0, 8008448 <_svfiprintf_r+0x150>
 8008438:	9b04      	ldr	r3, [sp, #16]
 800843a:	eba0 000a 	sub.w	r0, r0, sl
 800843e:	2240      	movs	r2, #64	; 0x40
 8008440:	4082      	lsls	r2, r0
 8008442:	4313      	orrs	r3, r2
 8008444:	3401      	adds	r4, #1
 8008446:	9304      	str	r3, [sp, #16]
 8008448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800844c:	4825      	ldr	r0, [pc, #148]	; (80084e4 <_svfiprintf_r+0x1ec>)
 800844e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008452:	2206      	movs	r2, #6
 8008454:	f7f7 febc 	bl	80001d0 <memchr>
 8008458:	2800      	cmp	r0, #0
 800845a:	d038      	beq.n	80084ce <_svfiprintf_r+0x1d6>
 800845c:	4b22      	ldr	r3, [pc, #136]	; (80084e8 <_svfiprintf_r+0x1f0>)
 800845e:	bb1b      	cbnz	r3, 80084a8 <_svfiprintf_r+0x1b0>
 8008460:	9b03      	ldr	r3, [sp, #12]
 8008462:	3307      	adds	r3, #7
 8008464:	f023 0307 	bic.w	r3, r3, #7
 8008468:	3308      	adds	r3, #8
 800846a:	9303      	str	r3, [sp, #12]
 800846c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846e:	4433      	add	r3, r6
 8008470:	9309      	str	r3, [sp, #36]	; 0x24
 8008472:	e768      	b.n	8008346 <_svfiprintf_r+0x4e>
 8008474:	fb0c 3202 	mla	r2, ip, r2, r3
 8008478:	460c      	mov	r4, r1
 800847a:	2001      	movs	r0, #1
 800847c:	e7a6      	b.n	80083cc <_svfiprintf_r+0xd4>
 800847e:	2300      	movs	r3, #0
 8008480:	3401      	adds	r4, #1
 8008482:	9305      	str	r3, [sp, #20]
 8008484:	4619      	mov	r1, r3
 8008486:	f04f 0c0a 	mov.w	ip, #10
 800848a:	4620      	mov	r0, r4
 800848c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008490:	3a30      	subs	r2, #48	; 0x30
 8008492:	2a09      	cmp	r2, #9
 8008494:	d903      	bls.n	800849e <_svfiprintf_r+0x1a6>
 8008496:	2b00      	cmp	r3, #0
 8008498:	d0c6      	beq.n	8008428 <_svfiprintf_r+0x130>
 800849a:	9105      	str	r1, [sp, #20]
 800849c:	e7c4      	b.n	8008428 <_svfiprintf_r+0x130>
 800849e:	fb0c 2101 	mla	r1, ip, r1, r2
 80084a2:	4604      	mov	r4, r0
 80084a4:	2301      	movs	r3, #1
 80084a6:	e7f0      	b.n	800848a <_svfiprintf_r+0x192>
 80084a8:	ab03      	add	r3, sp, #12
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	462a      	mov	r2, r5
 80084ae:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <_svfiprintf_r+0x1f4>)
 80084b0:	a904      	add	r1, sp, #16
 80084b2:	4638      	mov	r0, r7
 80084b4:	f7fd f96c 	bl	8005790 <_printf_float>
 80084b8:	1c42      	adds	r2, r0, #1
 80084ba:	4606      	mov	r6, r0
 80084bc:	d1d6      	bne.n	800846c <_svfiprintf_r+0x174>
 80084be:	89ab      	ldrh	r3, [r5, #12]
 80084c0:	065b      	lsls	r3, r3, #25
 80084c2:	f53f af2d 	bmi.w	8008320 <_svfiprintf_r+0x28>
 80084c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084c8:	b01d      	add	sp, #116	; 0x74
 80084ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ce:	ab03      	add	r3, sp, #12
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	462a      	mov	r2, r5
 80084d4:	4b05      	ldr	r3, [pc, #20]	; (80084ec <_svfiprintf_r+0x1f4>)
 80084d6:	a904      	add	r1, sp, #16
 80084d8:	4638      	mov	r0, r7
 80084da:	f7fd fbfd 	bl	8005cd8 <_printf_i>
 80084de:	e7eb      	b.n	80084b8 <_svfiprintf_r+0x1c0>
 80084e0:	0800a105 	.word	0x0800a105
 80084e4:	0800a10f 	.word	0x0800a10f
 80084e8:	08005791 	.word	0x08005791
 80084ec:	08008245 	.word	0x08008245
 80084f0:	0800a10b 	.word	0x0800a10b

080084f4 <__sfputc_r>:
 80084f4:	6893      	ldr	r3, [r2, #8]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	b410      	push	{r4}
 80084fc:	6093      	str	r3, [r2, #8]
 80084fe:	da08      	bge.n	8008512 <__sfputc_r+0x1e>
 8008500:	6994      	ldr	r4, [r2, #24]
 8008502:	42a3      	cmp	r3, r4
 8008504:	db01      	blt.n	800850a <__sfputc_r+0x16>
 8008506:	290a      	cmp	r1, #10
 8008508:	d103      	bne.n	8008512 <__sfputc_r+0x1e>
 800850a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800850e:	f000 b9e3 	b.w	80088d8 <__swbuf_r>
 8008512:	6813      	ldr	r3, [r2, #0]
 8008514:	1c58      	adds	r0, r3, #1
 8008516:	6010      	str	r0, [r2, #0]
 8008518:	7019      	strb	r1, [r3, #0]
 800851a:	4608      	mov	r0, r1
 800851c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008520:	4770      	bx	lr

08008522 <__sfputs_r>:
 8008522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008524:	4606      	mov	r6, r0
 8008526:	460f      	mov	r7, r1
 8008528:	4614      	mov	r4, r2
 800852a:	18d5      	adds	r5, r2, r3
 800852c:	42ac      	cmp	r4, r5
 800852e:	d101      	bne.n	8008534 <__sfputs_r+0x12>
 8008530:	2000      	movs	r0, #0
 8008532:	e007      	b.n	8008544 <__sfputs_r+0x22>
 8008534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008538:	463a      	mov	r2, r7
 800853a:	4630      	mov	r0, r6
 800853c:	f7ff ffda 	bl	80084f4 <__sfputc_r>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d1f3      	bne.n	800852c <__sfputs_r+0xa>
 8008544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008548 <_vfiprintf_r>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	460d      	mov	r5, r1
 800854e:	b09d      	sub	sp, #116	; 0x74
 8008550:	4614      	mov	r4, r2
 8008552:	4698      	mov	r8, r3
 8008554:	4606      	mov	r6, r0
 8008556:	b118      	cbz	r0, 8008560 <_vfiprintf_r+0x18>
 8008558:	6a03      	ldr	r3, [r0, #32]
 800855a:	b90b      	cbnz	r3, 8008560 <_vfiprintf_r+0x18>
 800855c:	f7fd fd6a 	bl	8006034 <__sinit>
 8008560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008562:	07d9      	lsls	r1, r3, #31
 8008564:	d405      	bmi.n	8008572 <_vfiprintf_r+0x2a>
 8008566:	89ab      	ldrh	r3, [r5, #12]
 8008568:	059a      	lsls	r2, r3, #22
 800856a:	d402      	bmi.n	8008572 <_vfiprintf_r+0x2a>
 800856c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800856e:	f7fd feb0 	bl	80062d2 <__retarget_lock_acquire_recursive>
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	071b      	lsls	r3, r3, #28
 8008576:	d501      	bpl.n	800857c <_vfiprintf_r+0x34>
 8008578:	692b      	ldr	r3, [r5, #16]
 800857a:	b99b      	cbnz	r3, 80085a4 <_vfiprintf_r+0x5c>
 800857c:	4629      	mov	r1, r5
 800857e:	4630      	mov	r0, r6
 8008580:	f000 f9e8 	bl	8008954 <__swsetup_r>
 8008584:	b170      	cbz	r0, 80085a4 <_vfiprintf_r+0x5c>
 8008586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008588:	07dc      	lsls	r4, r3, #31
 800858a:	d504      	bpl.n	8008596 <_vfiprintf_r+0x4e>
 800858c:	f04f 30ff 	mov.w	r0, #4294967295
 8008590:	b01d      	add	sp, #116	; 0x74
 8008592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008596:	89ab      	ldrh	r3, [r5, #12]
 8008598:	0598      	lsls	r0, r3, #22
 800859a:	d4f7      	bmi.n	800858c <_vfiprintf_r+0x44>
 800859c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800859e:	f7fd fe99 	bl	80062d4 <__retarget_lock_release_recursive>
 80085a2:	e7f3      	b.n	800858c <_vfiprintf_r+0x44>
 80085a4:	2300      	movs	r3, #0
 80085a6:	9309      	str	r3, [sp, #36]	; 0x24
 80085a8:	2320      	movs	r3, #32
 80085aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80085b2:	2330      	movs	r3, #48	; 0x30
 80085b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008768 <_vfiprintf_r+0x220>
 80085b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085bc:	f04f 0901 	mov.w	r9, #1
 80085c0:	4623      	mov	r3, r4
 80085c2:	469a      	mov	sl, r3
 80085c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085c8:	b10a      	cbz	r2, 80085ce <_vfiprintf_r+0x86>
 80085ca:	2a25      	cmp	r2, #37	; 0x25
 80085cc:	d1f9      	bne.n	80085c2 <_vfiprintf_r+0x7a>
 80085ce:	ebba 0b04 	subs.w	fp, sl, r4
 80085d2:	d00b      	beq.n	80085ec <_vfiprintf_r+0xa4>
 80085d4:	465b      	mov	r3, fp
 80085d6:	4622      	mov	r2, r4
 80085d8:	4629      	mov	r1, r5
 80085da:	4630      	mov	r0, r6
 80085dc:	f7ff ffa1 	bl	8008522 <__sfputs_r>
 80085e0:	3001      	adds	r0, #1
 80085e2:	f000 80a9 	beq.w	8008738 <_vfiprintf_r+0x1f0>
 80085e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085e8:	445a      	add	r2, fp
 80085ea:	9209      	str	r2, [sp, #36]	; 0x24
 80085ec:	f89a 3000 	ldrb.w	r3, [sl]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 80a1 	beq.w	8008738 <_vfiprintf_r+0x1f0>
 80085f6:	2300      	movs	r3, #0
 80085f8:	f04f 32ff 	mov.w	r2, #4294967295
 80085fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008600:	f10a 0a01 	add.w	sl, sl, #1
 8008604:	9304      	str	r3, [sp, #16]
 8008606:	9307      	str	r3, [sp, #28]
 8008608:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800860c:	931a      	str	r3, [sp, #104]	; 0x68
 800860e:	4654      	mov	r4, sl
 8008610:	2205      	movs	r2, #5
 8008612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008616:	4854      	ldr	r0, [pc, #336]	; (8008768 <_vfiprintf_r+0x220>)
 8008618:	f7f7 fdda 	bl	80001d0 <memchr>
 800861c:	9a04      	ldr	r2, [sp, #16]
 800861e:	b9d8      	cbnz	r0, 8008658 <_vfiprintf_r+0x110>
 8008620:	06d1      	lsls	r1, r2, #27
 8008622:	bf44      	itt	mi
 8008624:	2320      	movmi	r3, #32
 8008626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800862a:	0713      	lsls	r3, r2, #28
 800862c:	bf44      	itt	mi
 800862e:	232b      	movmi	r3, #43	; 0x2b
 8008630:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008634:	f89a 3000 	ldrb.w	r3, [sl]
 8008638:	2b2a      	cmp	r3, #42	; 0x2a
 800863a:	d015      	beq.n	8008668 <_vfiprintf_r+0x120>
 800863c:	9a07      	ldr	r2, [sp, #28]
 800863e:	4654      	mov	r4, sl
 8008640:	2000      	movs	r0, #0
 8008642:	f04f 0c0a 	mov.w	ip, #10
 8008646:	4621      	mov	r1, r4
 8008648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800864c:	3b30      	subs	r3, #48	; 0x30
 800864e:	2b09      	cmp	r3, #9
 8008650:	d94d      	bls.n	80086ee <_vfiprintf_r+0x1a6>
 8008652:	b1b0      	cbz	r0, 8008682 <_vfiprintf_r+0x13a>
 8008654:	9207      	str	r2, [sp, #28]
 8008656:	e014      	b.n	8008682 <_vfiprintf_r+0x13a>
 8008658:	eba0 0308 	sub.w	r3, r0, r8
 800865c:	fa09 f303 	lsl.w	r3, r9, r3
 8008660:	4313      	orrs	r3, r2
 8008662:	9304      	str	r3, [sp, #16]
 8008664:	46a2      	mov	sl, r4
 8008666:	e7d2      	b.n	800860e <_vfiprintf_r+0xc6>
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	1d19      	adds	r1, r3, #4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	9103      	str	r1, [sp, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	bfbb      	ittet	lt
 8008674:	425b      	neglt	r3, r3
 8008676:	f042 0202 	orrlt.w	r2, r2, #2
 800867a:	9307      	strge	r3, [sp, #28]
 800867c:	9307      	strlt	r3, [sp, #28]
 800867e:	bfb8      	it	lt
 8008680:	9204      	strlt	r2, [sp, #16]
 8008682:	7823      	ldrb	r3, [r4, #0]
 8008684:	2b2e      	cmp	r3, #46	; 0x2e
 8008686:	d10c      	bne.n	80086a2 <_vfiprintf_r+0x15a>
 8008688:	7863      	ldrb	r3, [r4, #1]
 800868a:	2b2a      	cmp	r3, #42	; 0x2a
 800868c:	d134      	bne.n	80086f8 <_vfiprintf_r+0x1b0>
 800868e:	9b03      	ldr	r3, [sp, #12]
 8008690:	1d1a      	adds	r2, r3, #4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	9203      	str	r2, [sp, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	bfb8      	it	lt
 800869a:	f04f 33ff 	movlt.w	r3, #4294967295
 800869e:	3402      	adds	r4, #2
 80086a0:	9305      	str	r3, [sp, #20]
 80086a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008778 <_vfiprintf_r+0x230>
 80086a6:	7821      	ldrb	r1, [r4, #0]
 80086a8:	2203      	movs	r2, #3
 80086aa:	4650      	mov	r0, sl
 80086ac:	f7f7 fd90 	bl	80001d0 <memchr>
 80086b0:	b138      	cbz	r0, 80086c2 <_vfiprintf_r+0x17a>
 80086b2:	9b04      	ldr	r3, [sp, #16]
 80086b4:	eba0 000a 	sub.w	r0, r0, sl
 80086b8:	2240      	movs	r2, #64	; 0x40
 80086ba:	4082      	lsls	r2, r0
 80086bc:	4313      	orrs	r3, r2
 80086be:	3401      	adds	r4, #1
 80086c0:	9304      	str	r3, [sp, #16]
 80086c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c6:	4829      	ldr	r0, [pc, #164]	; (800876c <_vfiprintf_r+0x224>)
 80086c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086cc:	2206      	movs	r2, #6
 80086ce:	f7f7 fd7f 	bl	80001d0 <memchr>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d03f      	beq.n	8008756 <_vfiprintf_r+0x20e>
 80086d6:	4b26      	ldr	r3, [pc, #152]	; (8008770 <_vfiprintf_r+0x228>)
 80086d8:	bb1b      	cbnz	r3, 8008722 <_vfiprintf_r+0x1da>
 80086da:	9b03      	ldr	r3, [sp, #12]
 80086dc:	3307      	adds	r3, #7
 80086de:	f023 0307 	bic.w	r3, r3, #7
 80086e2:	3308      	adds	r3, #8
 80086e4:	9303      	str	r3, [sp, #12]
 80086e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e8:	443b      	add	r3, r7
 80086ea:	9309      	str	r3, [sp, #36]	; 0x24
 80086ec:	e768      	b.n	80085c0 <_vfiprintf_r+0x78>
 80086ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80086f2:	460c      	mov	r4, r1
 80086f4:	2001      	movs	r0, #1
 80086f6:	e7a6      	b.n	8008646 <_vfiprintf_r+0xfe>
 80086f8:	2300      	movs	r3, #0
 80086fa:	3401      	adds	r4, #1
 80086fc:	9305      	str	r3, [sp, #20]
 80086fe:	4619      	mov	r1, r3
 8008700:	f04f 0c0a 	mov.w	ip, #10
 8008704:	4620      	mov	r0, r4
 8008706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800870a:	3a30      	subs	r2, #48	; 0x30
 800870c:	2a09      	cmp	r2, #9
 800870e:	d903      	bls.n	8008718 <_vfiprintf_r+0x1d0>
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0c6      	beq.n	80086a2 <_vfiprintf_r+0x15a>
 8008714:	9105      	str	r1, [sp, #20]
 8008716:	e7c4      	b.n	80086a2 <_vfiprintf_r+0x15a>
 8008718:	fb0c 2101 	mla	r1, ip, r1, r2
 800871c:	4604      	mov	r4, r0
 800871e:	2301      	movs	r3, #1
 8008720:	e7f0      	b.n	8008704 <_vfiprintf_r+0x1bc>
 8008722:	ab03      	add	r3, sp, #12
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	462a      	mov	r2, r5
 8008728:	4b12      	ldr	r3, [pc, #72]	; (8008774 <_vfiprintf_r+0x22c>)
 800872a:	a904      	add	r1, sp, #16
 800872c:	4630      	mov	r0, r6
 800872e:	f7fd f82f 	bl	8005790 <_printf_float>
 8008732:	4607      	mov	r7, r0
 8008734:	1c78      	adds	r0, r7, #1
 8008736:	d1d6      	bne.n	80086e6 <_vfiprintf_r+0x19e>
 8008738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800873a:	07d9      	lsls	r1, r3, #31
 800873c:	d405      	bmi.n	800874a <_vfiprintf_r+0x202>
 800873e:	89ab      	ldrh	r3, [r5, #12]
 8008740:	059a      	lsls	r2, r3, #22
 8008742:	d402      	bmi.n	800874a <_vfiprintf_r+0x202>
 8008744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008746:	f7fd fdc5 	bl	80062d4 <__retarget_lock_release_recursive>
 800874a:	89ab      	ldrh	r3, [r5, #12]
 800874c:	065b      	lsls	r3, r3, #25
 800874e:	f53f af1d 	bmi.w	800858c <_vfiprintf_r+0x44>
 8008752:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008754:	e71c      	b.n	8008590 <_vfiprintf_r+0x48>
 8008756:	ab03      	add	r3, sp, #12
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	462a      	mov	r2, r5
 800875c:	4b05      	ldr	r3, [pc, #20]	; (8008774 <_vfiprintf_r+0x22c>)
 800875e:	a904      	add	r1, sp, #16
 8008760:	4630      	mov	r0, r6
 8008762:	f7fd fab9 	bl	8005cd8 <_printf_i>
 8008766:	e7e4      	b.n	8008732 <_vfiprintf_r+0x1ea>
 8008768:	0800a105 	.word	0x0800a105
 800876c:	0800a10f 	.word	0x0800a10f
 8008770:	08005791 	.word	0x08005791
 8008774:	08008523 	.word	0x08008523
 8008778:	0800a10b 	.word	0x0800a10b

0800877c <__sflush_r>:
 800877c:	898a      	ldrh	r2, [r1, #12]
 800877e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008782:	4605      	mov	r5, r0
 8008784:	0710      	lsls	r0, r2, #28
 8008786:	460c      	mov	r4, r1
 8008788:	d458      	bmi.n	800883c <__sflush_r+0xc0>
 800878a:	684b      	ldr	r3, [r1, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	dc05      	bgt.n	800879c <__sflush_r+0x20>
 8008790:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008792:	2b00      	cmp	r3, #0
 8008794:	dc02      	bgt.n	800879c <__sflush_r+0x20>
 8008796:	2000      	movs	r0, #0
 8008798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800879c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800879e:	2e00      	cmp	r6, #0
 80087a0:	d0f9      	beq.n	8008796 <__sflush_r+0x1a>
 80087a2:	2300      	movs	r3, #0
 80087a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087a8:	682f      	ldr	r7, [r5, #0]
 80087aa:	6a21      	ldr	r1, [r4, #32]
 80087ac:	602b      	str	r3, [r5, #0]
 80087ae:	d032      	beq.n	8008816 <__sflush_r+0x9a>
 80087b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	075a      	lsls	r2, r3, #29
 80087b6:	d505      	bpl.n	80087c4 <__sflush_r+0x48>
 80087b8:	6863      	ldr	r3, [r4, #4]
 80087ba:	1ac0      	subs	r0, r0, r3
 80087bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087be:	b10b      	cbz	r3, 80087c4 <__sflush_r+0x48>
 80087c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087c2:	1ac0      	subs	r0, r0, r3
 80087c4:	2300      	movs	r3, #0
 80087c6:	4602      	mov	r2, r0
 80087c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087ca:	6a21      	ldr	r1, [r4, #32]
 80087cc:	4628      	mov	r0, r5
 80087ce:	47b0      	blx	r6
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	d106      	bne.n	80087e4 <__sflush_r+0x68>
 80087d6:	6829      	ldr	r1, [r5, #0]
 80087d8:	291d      	cmp	r1, #29
 80087da:	d82b      	bhi.n	8008834 <__sflush_r+0xb8>
 80087dc:	4a29      	ldr	r2, [pc, #164]	; (8008884 <__sflush_r+0x108>)
 80087de:	410a      	asrs	r2, r1
 80087e0:	07d6      	lsls	r6, r2, #31
 80087e2:	d427      	bmi.n	8008834 <__sflush_r+0xb8>
 80087e4:	2200      	movs	r2, #0
 80087e6:	6062      	str	r2, [r4, #4]
 80087e8:	04d9      	lsls	r1, r3, #19
 80087ea:	6922      	ldr	r2, [r4, #16]
 80087ec:	6022      	str	r2, [r4, #0]
 80087ee:	d504      	bpl.n	80087fa <__sflush_r+0x7e>
 80087f0:	1c42      	adds	r2, r0, #1
 80087f2:	d101      	bne.n	80087f8 <__sflush_r+0x7c>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b903      	cbnz	r3, 80087fa <__sflush_r+0x7e>
 80087f8:	6560      	str	r0, [r4, #84]	; 0x54
 80087fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087fc:	602f      	str	r7, [r5, #0]
 80087fe:	2900      	cmp	r1, #0
 8008800:	d0c9      	beq.n	8008796 <__sflush_r+0x1a>
 8008802:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008806:	4299      	cmp	r1, r3
 8008808:	d002      	beq.n	8008810 <__sflush_r+0x94>
 800880a:	4628      	mov	r0, r5
 800880c:	f7fe fbf6 	bl	8006ffc <_free_r>
 8008810:	2000      	movs	r0, #0
 8008812:	6360      	str	r0, [r4, #52]	; 0x34
 8008814:	e7c0      	b.n	8008798 <__sflush_r+0x1c>
 8008816:	2301      	movs	r3, #1
 8008818:	4628      	mov	r0, r5
 800881a:	47b0      	blx	r6
 800881c:	1c41      	adds	r1, r0, #1
 800881e:	d1c8      	bne.n	80087b2 <__sflush_r+0x36>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0c5      	beq.n	80087b2 <__sflush_r+0x36>
 8008826:	2b1d      	cmp	r3, #29
 8008828:	d001      	beq.n	800882e <__sflush_r+0xb2>
 800882a:	2b16      	cmp	r3, #22
 800882c:	d101      	bne.n	8008832 <__sflush_r+0xb6>
 800882e:	602f      	str	r7, [r5, #0]
 8008830:	e7b1      	b.n	8008796 <__sflush_r+0x1a>
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008838:	81a3      	strh	r3, [r4, #12]
 800883a:	e7ad      	b.n	8008798 <__sflush_r+0x1c>
 800883c:	690f      	ldr	r7, [r1, #16]
 800883e:	2f00      	cmp	r7, #0
 8008840:	d0a9      	beq.n	8008796 <__sflush_r+0x1a>
 8008842:	0793      	lsls	r3, r2, #30
 8008844:	680e      	ldr	r6, [r1, #0]
 8008846:	bf08      	it	eq
 8008848:	694b      	ldreq	r3, [r1, #20]
 800884a:	600f      	str	r7, [r1, #0]
 800884c:	bf18      	it	ne
 800884e:	2300      	movne	r3, #0
 8008850:	eba6 0807 	sub.w	r8, r6, r7
 8008854:	608b      	str	r3, [r1, #8]
 8008856:	f1b8 0f00 	cmp.w	r8, #0
 800885a:	dd9c      	ble.n	8008796 <__sflush_r+0x1a>
 800885c:	6a21      	ldr	r1, [r4, #32]
 800885e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008860:	4643      	mov	r3, r8
 8008862:	463a      	mov	r2, r7
 8008864:	4628      	mov	r0, r5
 8008866:	47b0      	blx	r6
 8008868:	2800      	cmp	r0, #0
 800886a:	dc06      	bgt.n	800887a <__sflush_r+0xfe>
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008872:	81a3      	strh	r3, [r4, #12]
 8008874:	f04f 30ff 	mov.w	r0, #4294967295
 8008878:	e78e      	b.n	8008798 <__sflush_r+0x1c>
 800887a:	4407      	add	r7, r0
 800887c:	eba8 0800 	sub.w	r8, r8, r0
 8008880:	e7e9      	b.n	8008856 <__sflush_r+0xda>
 8008882:	bf00      	nop
 8008884:	dfbffffe 	.word	0xdfbffffe

08008888 <_fflush_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	690b      	ldr	r3, [r1, #16]
 800888c:	4605      	mov	r5, r0
 800888e:	460c      	mov	r4, r1
 8008890:	b913      	cbnz	r3, 8008898 <_fflush_r+0x10>
 8008892:	2500      	movs	r5, #0
 8008894:	4628      	mov	r0, r5
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	b118      	cbz	r0, 80088a2 <_fflush_r+0x1a>
 800889a:	6a03      	ldr	r3, [r0, #32]
 800889c:	b90b      	cbnz	r3, 80088a2 <_fflush_r+0x1a>
 800889e:	f7fd fbc9 	bl	8006034 <__sinit>
 80088a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0f3      	beq.n	8008892 <_fflush_r+0xa>
 80088aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088ac:	07d0      	lsls	r0, r2, #31
 80088ae:	d404      	bmi.n	80088ba <_fflush_r+0x32>
 80088b0:	0599      	lsls	r1, r3, #22
 80088b2:	d402      	bmi.n	80088ba <_fflush_r+0x32>
 80088b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088b6:	f7fd fd0c 	bl	80062d2 <__retarget_lock_acquire_recursive>
 80088ba:	4628      	mov	r0, r5
 80088bc:	4621      	mov	r1, r4
 80088be:	f7ff ff5d 	bl	800877c <__sflush_r>
 80088c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088c4:	07da      	lsls	r2, r3, #31
 80088c6:	4605      	mov	r5, r0
 80088c8:	d4e4      	bmi.n	8008894 <_fflush_r+0xc>
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	059b      	lsls	r3, r3, #22
 80088ce:	d4e1      	bmi.n	8008894 <_fflush_r+0xc>
 80088d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088d2:	f7fd fcff 	bl	80062d4 <__retarget_lock_release_recursive>
 80088d6:	e7dd      	b.n	8008894 <_fflush_r+0xc>

080088d8 <__swbuf_r>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	460e      	mov	r6, r1
 80088dc:	4614      	mov	r4, r2
 80088de:	4605      	mov	r5, r0
 80088e0:	b118      	cbz	r0, 80088ea <__swbuf_r+0x12>
 80088e2:	6a03      	ldr	r3, [r0, #32]
 80088e4:	b90b      	cbnz	r3, 80088ea <__swbuf_r+0x12>
 80088e6:	f7fd fba5 	bl	8006034 <__sinit>
 80088ea:	69a3      	ldr	r3, [r4, #24]
 80088ec:	60a3      	str	r3, [r4, #8]
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	071a      	lsls	r2, r3, #28
 80088f2:	d525      	bpl.n	8008940 <__swbuf_r+0x68>
 80088f4:	6923      	ldr	r3, [r4, #16]
 80088f6:	b31b      	cbz	r3, 8008940 <__swbuf_r+0x68>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	6922      	ldr	r2, [r4, #16]
 80088fc:	1a98      	subs	r0, r3, r2
 80088fe:	6963      	ldr	r3, [r4, #20]
 8008900:	b2f6      	uxtb	r6, r6
 8008902:	4283      	cmp	r3, r0
 8008904:	4637      	mov	r7, r6
 8008906:	dc04      	bgt.n	8008912 <__swbuf_r+0x3a>
 8008908:	4621      	mov	r1, r4
 800890a:	4628      	mov	r0, r5
 800890c:	f7ff ffbc 	bl	8008888 <_fflush_r>
 8008910:	b9e0      	cbnz	r0, 800894c <__swbuf_r+0x74>
 8008912:	68a3      	ldr	r3, [r4, #8]
 8008914:	3b01      	subs	r3, #1
 8008916:	60a3      	str	r3, [r4, #8]
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	6022      	str	r2, [r4, #0]
 800891e:	701e      	strb	r6, [r3, #0]
 8008920:	6962      	ldr	r2, [r4, #20]
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	429a      	cmp	r2, r3
 8008926:	d004      	beq.n	8008932 <__swbuf_r+0x5a>
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	07db      	lsls	r3, r3, #31
 800892c:	d506      	bpl.n	800893c <__swbuf_r+0x64>
 800892e:	2e0a      	cmp	r6, #10
 8008930:	d104      	bne.n	800893c <__swbuf_r+0x64>
 8008932:	4621      	mov	r1, r4
 8008934:	4628      	mov	r0, r5
 8008936:	f7ff ffa7 	bl	8008888 <_fflush_r>
 800893a:	b938      	cbnz	r0, 800894c <__swbuf_r+0x74>
 800893c:	4638      	mov	r0, r7
 800893e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008940:	4621      	mov	r1, r4
 8008942:	4628      	mov	r0, r5
 8008944:	f000 f806 	bl	8008954 <__swsetup_r>
 8008948:	2800      	cmp	r0, #0
 800894a:	d0d5      	beq.n	80088f8 <__swbuf_r+0x20>
 800894c:	f04f 37ff 	mov.w	r7, #4294967295
 8008950:	e7f4      	b.n	800893c <__swbuf_r+0x64>
	...

08008954 <__swsetup_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4b2a      	ldr	r3, [pc, #168]	; (8008a00 <__swsetup_r+0xac>)
 8008958:	4605      	mov	r5, r0
 800895a:	6818      	ldr	r0, [r3, #0]
 800895c:	460c      	mov	r4, r1
 800895e:	b118      	cbz	r0, 8008968 <__swsetup_r+0x14>
 8008960:	6a03      	ldr	r3, [r0, #32]
 8008962:	b90b      	cbnz	r3, 8008968 <__swsetup_r+0x14>
 8008964:	f7fd fb66 	bl	8006034 <__sinit>
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800896e:	0718      	lsls	r0, r3, #28
 8008970:	d422      	bmi.n	80089b8 <__swsetup_r+0x64>
 8008972:	06d9      	lsls	r1, r3, #27
 8008974:	d407      	bmi.n	8008986 <__swsetup_r+0x32>
 8008976:	2309      	movs	r3, #9
 8008978:	602b      	str	r3, [r5, #0]
 800897a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800897e:	81a3      	strh	r3, [r4, #12]
 8008980:	f04f 30ff 	mov.w	r0, #4294967295
 8008984:	e034      	b.n	80089f0 <__swsetup_r+0x9c>
 8008986:	0758      	lsls	r0, r3, #29
 8008988:	d512      	bpl.n	80089b0 <__swsetup_r+0x5c>
 800898a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800898c:	b141      	cbz	r1, 80089a0 <__swsetup_r+0x4c>
 800898e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008992:	4299      	cmp	r1, r3
 8008994:	d002      	beq.n	800899c <__swsetup_r+0x48>
 8008996:	4628      	mov	r0, r5
 8008998:	f7fe fb30 	bl	8006ffc <_free_r>
 800899c:	2300      	movs	r3, #0
 800899e:	6363      	str	r3, [r4, #52]	; 0x34
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	2300      	movs	r3, #0
 80089aa:	6063      	str	r3, [r4, #4]
 80089ac:	6923      	ldr	r3, [r4, #16]
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	f043 0308 	orr.w	r3, r3, #8
 80089b6:	81a3      	strh	r3, [r4, #12]
 80089b8:	6923      	ldr	r3, [r4, #16]
 80089ba:	b94b      	cbnz	r3, 80089d0 <__swsetup_r+0x7c>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089c6:	d003      	beq.n	80089d0 <__swsetup_r+0x7c>
 80089c8:	4621      	mov	r1, r4
 80089ca:	4628      	mov	r0, r5
 80089cc:	f000 f8e0 	bl	8008b90 <__smakebuf_r>
 80089d0:	89a0      	ldrh	r0, [r4, #12]
 80089d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089d6:	f010 0301 	ands.w	r3, r0, #1
 80089da:	d00a      	beq.n	80089f2 <__swsetup_r+0x9e>
 80089dc:	2300      	movs	r3, #0
 80089de:	60a3      	str	r3, [r4, #8]
 80089e0:	6963      	ldr	r3, [r4, #20]
 80089e2:	425b      	negs	r3, r3
 80089e4:	61a3      	str	r3, [r4, #24]
 80089e6:	6923      	ldr	r3, [r4, #16]
 80089e8:	b943      	cbnz	r3, 80089fc <__swsetup_r+0xa8>
 80089ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089ee:	d1c4      	bne.n	800897a <__swsetup_r+0x26>
 80089f0:	bd38      	pop	{r3, r4, r5, pc}
 80089f2:	0781      	lsls	r1, r0, #30
 80089f4:	bf58      	it	pl
 80089f6:	6963      	ldrpl	r3, [r4, #20]
 80089f8:	60a3      	str	r3, [r4, #8]
 80089fa:	e7f4      	b.n	80089e6 <__swsetup_r+0x92>
 80089fc:	2000      	movs	r0, #0
 80089fe:	e7f7      	b.n	80089f0 <__swsetup_r+0x9c>
 8008a00:	20000210 	.word	0x20000210

08008a04 <memmove>:
 8008a04:	4288      	cmp	r0, r1
 8008a06:	b510      	push	{r4, lr}
 8008a08:	eb01 0402 	add.w	r4, r1, r2
 8008a0c:	d902      	bls.n	8008a14 <memmove+0x10>
 8008a0e:	4284      	cmp	r4, r0
 8008a10:	4623      	mov	r3, r4
 8008a12:	d807      	bhi.n	8008a24 <memmove+0x20>
 8008a14:	1e43      	subs	r3, r0, #1
 8008a16:	42a1      	cmp	r1, r4
 8008a18:	d008      	beq.n	8008a2c <memmove+0x28>
 8008a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a22:	e7f8      	b.n	8008a16 <memmove+0x12>
 8008a24:	4402      	add	r2, r0
 8008a26:	4601      	mov	r1, r0
 8008a28:	428a      	cmp	r2, r1
 8008a2a:	d100      	bne.n	8008a2e <memmove+0x2a>
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a36:	e7f7      	b.n	8008a28 <memmove+0x24>

08008a38 <_sbrk_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	4d06      	ldr	r5, [pc, #24]	; (8008a54 <_sbrk_r+0x1c>)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4608      	mov	r0, r1
 8008a42:	602b      	str	r3, [r5, #0]
 8008a44:	f7f9 fe2c 	bl	80026a0 <_sbrk>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d102      	bne.n	8008a52 <_sbrk_r+0x1a>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	b103      	cbz	r3, 8008a52 <_sbrk_r+0x1a>
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	20000414 	.word	0x20000414

08008a58 <__assert_func>:
 8008a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a5a:	4614      	mov	r4, r2
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <__assert_func+0x2c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4605      	mov	r5, r0
 8008a64:	68d8      	ldr	r0, [r3, #12]
 8008a66:	b14c      	cbz	r4, 8008a7c <__assert_func+0x24>
 8008a68:	4b07      	ldr	r3, [pc, #28]	; (8008a88 <__assert_func+0x30>)
 8008a6a:	9100      	str	r1, [sp, #0]
 8008a6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a70:	4906      	ldr	r1, [pc, #24]	; (8008a8c <__assert_func+0x34>)
 8008a72:	462b      	mov	r3, r5
 8008a74:	f000 f854 	bl	8008b20 <fiprintf>
 8008a78:	f000 f8e8 	bl	8008c4c <abort>
 8008a7c:	4b04      	ldr	r3, [pc, #16]	; (8008a90 <__assert_func+0x38>)
 8008a7e:	461c      	mov	r4, r3
 8008a80:	e7f3      	b.n	8008a6a <__assert_func+0x12>
 8008a82:	bf00      	nop
 8008a84:	20000210 	.word	0x20000210
 8008a88:	0800a116 	.word	0x0800a116
 8008a8c:	0800a123 	.word	0x0800a123
 8008a90:	0800a151 	.word	0x0800a151

08008a94 <_calloc_r>:
 8008a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a96:	fba1 2402 	umull	r2, r4, r1, r2
 8008a9a:	b94c      	cbnz	r4, 8008ab0 <_calloc_r+0x1c>
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	9201      	str	r2, [sp, #4]
 8008aa0:	f7fe fe78 	bl	8007794 <_malloc_r>
 8008aa4:	9a01      	ldr	r2, [sp, #4]
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	b930      	cbnz	r0, 8008ab8 <_calloc_r+0x24>
 8008aaa:	4628      	mov	r0, r5
 8008aac:	b003      	add	sp, #12
 8008aae:	bd30      	pop	{r4, r5, pc}
 8008ab0:	220c      	movs	r2, #12
 8008ab2:	6002      	str	r2, [r0, #0]
 8008ab4:	2500      	movs	r5, #0
 8008ab6:	e7f8      	b.n	8008aaa <_calloc_r+0x16>
 8008ab8:	4621      	mov	r1, r4
 8008aba:	f7fd fb7a 	bl	80061b2 <memset>
 8008abe:	e7f4      	b.n	8008aaa <_calloc_r+0x16>

08008ac0 <_realloc_r>:
 8008ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac4:	4680      	mov	r8, r0
 8008ac6:	4614      	mov	r4, r2
 8008ac8:	460e      	mov	r6, r1
 8008aca:	b921      	cbnz	r1, 8008ad6 <_realloc_r+0x16>
 8008acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	f7fe be5f 	b.w	8007794 <_malloc_r>
 8008ad6:	b92a      	cbnz	r2, 8008ae4 <_realloc_r+0x24>
 8008ad8:	f7fe fa90 	bl	8006ffc <_free_r>
 8008adc:	4625      	mov	r5, r4
 8008ade:	4628      	mov	r0, r5
 8008ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae4:	f000 f8b9 	bl	8008c5a <_malloc_usable_size_r>
 8008ae8:	4284      	cmp	r4, r0
 8008aea:	4607      	mov	r7, r0
 8008aec:	d802      	bhi.n	8008af4 <_realloc_r+0x34>
 8008aee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008af2:	d812      	bhi.n	8008b1a <_realloc_r+0x5a>
 8008af4:	4621      	mov	r1, r4
 8008af6:	4640      	mov	r0, r8
 8008af8:	f7fe fe4c 	bl	8007794 <_malloc_r>
 8008afc:	4605      	mov	r5, r0
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d0ed      	beq.n	8008ade <_realloc_r+0x1e>
 8008b02:	42bc      	cmp	r4, r7
 8008b04:	4622      	mov	r2, r4
 8008b06:	4631      	mov	r1, r6
 8008b08:	bf28      	it	cs
 8008b0a:	463a      	movcs	r2, r7
 8008b0c:	f7fd fbe3 	bl	80062d6 <memcpy>
 8008b10:	4631      	mov	r1, r6
 8008b12:	4640      	mov	r0, r8
 8008b14:	f7fe fa72 	bl	8006ffc <_free_r>
 8008b18:	e7e1      	b.n	8008ade <_realloc_r+0x1e>
 8008b1a:	4635      	mov	r5, r6
 8008b1c:	e7df      	b.n	8008ade <_realloc_r+0x1e>
	...

08008b20 <fiprintf>:
 8008b20:	b40e      	push	{r1, r2, r3}
 8008b22:	b503      	push	{r0, r1, lr}
 8008b24:	4601      	mov	r1, r0
 8008b26:	ab03      	add	r3, sp, #12
 8008b28:	4805      	ldr	r0, [pc, #20]	; (8008b40 <fiprintf+0x20>)
 8008b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b2e:	6800      	ldr	r0, [r0, #0]
 8008b30:	9301      	str	r3, [sp, #4]
 8008b32:	f7ff fd09 	bl	8008548 <_vfiprintf_r>
 8008b36:	b002      	add	sp, #8
 8008b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b3c:	b003      	add	sp, #12
 8008b3e:	4770      	bx	lr
 8008b40:	20000210 	.word	0x20000210

08008b44 <__swhatbuf_r>:
 8008b44:	b570      	push	{r4, r5, r6, lr}
 8008b46:	460c      	mov	r4, r1
 8008b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b4c:	2900      	cmp	r1, #0
 8008b4e:	b096      	sub	sp, #88	; 0x58
 8008b50:	4615      	mov	r5, r2
 8008b52:	461e      	mov	r6, r3
 8008b54:	da0d      	bge.n	8008b72 <__swhatbuf_r+0x2e>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b5c:	f04f 0100 	mov.w	r1, #0
 8008b60:	bf0c      	ite	eq
 8008b62:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008b66:	2340      	movne	r3, #64	; 0x40
 8008b68:	2000      	movs	r0, #0
 8008b6a:	6031      	str	r1, [r6, #0]
 8008b6c:	602b      	str	r3, [r5, #0]
 8008b6e:	b016      	add	sp, #88	; 0x58
 8008b70:	bd70      	pop	{r4, r5, r6, pc}
 8008b72:	466a      	mov	r2, sp
 8008b74:	f000 f848 	bl	8008c08 <_fstat_r>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	dbec      	blt.n	8008b56 <__swhatbuf_r+0x12>
 8008b7c:	9901      	ldr	r1, [sp, #4]
 8008b7e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008b82:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008b86:	4259      	negs	r1, r3
 8008b88:	4159      	adcs	r1, r3
 8008b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b8e:	e7eb      	b.n	8008b68 <__swhatbuf_r+0x24>

08008b90 <__smakebuf_r>:
 8008b90:	898b      	ldrh	r3, [r1, #12]
 8008b92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b94:	079d      	lsls	r5, r3, #30
 8008b96:	4606      	mov	r6, r0
 8008b98:	460c      	mov	r4, r1
 8008b9a:	d507      	bpl.n	8008bac <__smakebuf_r+0x1c>
 8008b9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	6123      	str	r3, [r4, #16]
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	6163      	str	r3, [r4, #20]
 8008ba8:	b002      	add	sp, #8
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	ab01      	add	r3, sp, #4
 8008bae:	466a      	mov	r2, sp
 8008bb0:	f7ff ffc8 	bl	8008b44 <__swhatbuf_r>
 8008bb4:	9900      	ldr	r1, [sp, #0]
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	4630      	mov	r0, r6
 8008bba:	f7fe fdeb 	bl	8007794 <_malloc_r>
 8008bbe:	b948      	cbnz	r0, 8008bd4 <__smakebuf_r+0x44>
 8008bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc4:	059a      	lsls	r2, r3, #22
 8008bc6:	d4ef      	bmi.n	8008ba8 <__smakebuf_r+0x18>
 8008bc8:	f023 0303 	bic.w	r3, r3, #3
 8008bcc:	f043 0302 	orr.w	r3, r3, #2
 8008bd0:	81a3      	strh	r3, [r4, #12]
 8008bd2:	e7e3      	b.n	8008b9c <__smakebuf_r+0xc>
 8008bd4:	89a3      	ldrh	r3, [r4, #12]
 8008bd6:	6020      	str	r0, [r4, #0]
 8008bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bdc:	81a3      	strh	r3, [r4, #12]
 8008bde:	9b00      	ldr	r3, [sp, #0]
 8008be0:	6163      	str	r3, [r4, #20]
 8008be2:	9b01      	ldr	r3, [sp, #4]
 8008be4:	6120      	str	r0, [r4, #16]
 8008be6:	b15b      	cbz	r3, 8008c00 <__smakebuf_r+0x70>
 8008be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bec:	4630      	mov	r0, r6
 8008bee:	f000 f81d 	bl	8008c2c <_isatty_r>
 8008bf2:	b128      	cbz	r0, 8008c00 <__smakebuf_r+0x70>
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	f023 0303 	bic.w	r3, r3, #3
 8008bfa:	f043 0301 	orr.w	r3, r3, #1
 8008bfe:	81a3      	strh	r3, [r4, #12]
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	431d      	orrs	r5, r3
 8008c04:	81a5      	strh	r5, [r4, #12]
 8008c06:	e7cf      	b.n	8008ba8 <__smakebuf_r+0x18>

08008c08 <_fstat_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4d07      	ldr	r5, [pc, #28]	; (8008c28 <_fstat_r+0x20>)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	4604      	mov	r4, r0
 8008c10:	4608      	mov	r0, r1
 8008c12:	4611      	mov	r1, r2
 8008c14:	602b      	str	r3, [r5, #0]
 8008c16:	f7f9 fd1a 	bl	800264e <_fstat>
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	d102      	bne.n	8008c24 <_fstat_r+0x1c>
 8008c1e:	682b      	ldr	r3, [r5, #0]
 8008c20:	b103      	cbz	r3, 8008c24 <_fstat_r+0x1c>
 8008c22:	6023      	str	r3, [r4, #0]
 8008c24:	bd38      	pop	{r3, r4, r5, pc}
 8008c26:	bf00      	nop
 8008c28:	20000414 	.word	0x20000414

08008c2c <_isatty_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d06      	ldr	r5, [pc, #24]	; (8008c48 <_isatty_r+0x1c>)
 8008c30:	2300      	movs	r3, #0
 8008c32:	4604      	mov	r4, r0
 8008c34:	4608      	mov	r0, r1
 8008c36:	602b      	str	r3, [r5, #0]
 8008c38:	f7f9 fd19 	bl	800266e <_isatty>
 8008c3c:	1c43      	adds	r3, r0, #1
 8008c3e:	d102      	bne.n	8008c46 <_isatty_r+0x1a>
 8008c40:	682b      	ldr	r3, [r5, #0]
 8008c42:	b103      	cbz	r3, 8008c46 <_isatty_r+0x1a>
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	20000414 	.word	0x20000414

08008c4c <abort>:
 8008c4c:	b508      	push	{r3, lr}
 8008c4e:	2006      	movs	r0, #6
 8008c50:	f000 f834 	bl	8008cbc <raise>
 8008c54:	2001      	movs	r0, #1
 8008c56:	f7f9 fcab 	bl	80025b0 <_exit>

08008c5a <_malloc_usable_size_r>:
 8008c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c5e:	1f18      	subs	r0, r3, #4
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	bfbc      	itt	lt
 8008c64:	580b      	ldrlt	r3, [r1, r0]
 8008c66:	18c0      	addlt	r0, r0, r3
 8008c68:	4770      	bx	lr

08008c6a <_raise_r>:
 8008c6a:	291f      	cmp	r1, #31
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4604      	mov	r4, r0
 8008c70:	460d      	mov	r5, r1
 8008c72:	d904      	bls.n	8008c7e <_raise_r+0x14>
 8008c74:	2316      	movs	r3, #22
 8008c76:	6003      	str	r3, [r0, #0]
 8008c78:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7c:	bd38      	pop	{r3, r4, r5, pc}
 8008c7e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008c80:	b112      	cbz	r2, 8008c88 <_raise_r+0x1e>
 8008c82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c86:	b94b      	cbnz	r3, 8008c9c <_raise_r+0x32>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 f831 	bl	8008cf0 <_getpid_r>
 8008c8e:	462a      	mov	r2, r5
 8008c90:	4601      	mov	r1, r0
 8008c92:	4620      	mov	r0, r4
 8008c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c98:	f000 b818 	b.w	8008ccc <_kill_r>
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d00a      	beq.n	8008cb6 <_raise_r+0x4c>
 8008ca0:	1c59      	adds	r1, r3, #1
 8008ca2:	d103      	bne.n	8008cac <_raise_r+0x42>
 8008ca4:	2316      	movs	r3, #22
 8008ca6:	6003      	str	r3, [r0, #0]
 8008ca8:	2001      	movs	r0, #1
 8008caa:	e7e7      	b.n	8008c7c <_raise_r+0x12>
 8008cac:	2400      	movs	r4, #0
 8008cae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	4798      	blx	r3
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	e7e0      	b.n	8008c7c <_raise_r+0x12>
	...

08008cbc <raise>:
 8008cbc:	4b02      	ldr	r3, [pc, #8]	; (8008cc8 <raise+0xc>)
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f7ff bfd2 	b.w	8008c6a <_raise_r>
 8008cc6:	bf00      	nop
 8008cc8:	20000210 	.word	0x20000210

08008ccc <_kill_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4d07      	ldr	r5, [pc, #28]	; (8008cec <_kill_r+0x20>)
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	f7f9 fc59 	bl	8002590 <_kill>
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	d102      	bne.n	8008ce8 <_kill_r+0x1c>
 8008ce2:	682b      	ldr	r3, [r5, #0]
 8008ce4:	b103      	cbz	r3, 8008ce8 <_kill_r+0x1c>
 8008ce6:	6023      	str	r3, [r4, #0]
 8008ce8:	bd38      	pop	{r3, r4, r5, pc}
 8008cea:	bf00      	nop
 8008cec:	20000414 	.word	0x20000414

08008cf0 <_getpid_r>:
 8008cf0:	f7f9 bc46 	b.w	8002580 <_getpid>

08008cf4 <pow>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	ed2d 8b02 	vpush	{d8}
 8008cfa:	eeb0 8a40 	vmov.f32	s16, s0
 8008cfe:	eef0 8a60 	vmov.f32	s17, s1
 8008d02:	ec55 4b11 	vmov	r4, r5, d1
 8008d06:	f000 f873 	bl	8008df0 <__ieee754_pow>
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	4620      	mov	r0, r4
 8008d10:	4629      	mov	r1, r5
 8008d12:	ec57 6b10 	vmov	r6, r7, d0
 8008d16:	f7f7 ff09 	bl	8000b2c <__aeabi_dcmpun>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d13b      	bne.n	8008d96 <pow+0xa2>
 8008d1e:	ec51 0b18 	vmov	r0, r1, d8
 8008d22:	2200      	movs	r2, #0
 8008d24:	2300      	movs	r3, #0
 8008d26:	f7f7 fecf 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d2a:	b1b8      	cbz	r0, 8008d5c <pow+0x68>
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2300      	movs	r3, #0
 8008d30:	4620      	mov	r0, r4
 8008d32:	4629      	mov	r1, r5
 8008d34:	f7f7 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d146      	bne.n	8008dca <pow+0xd6>
 8008d3c:	ec45 4b10 	vmov	d0, r4, r5
 8008d40:	f000 f848 	bl	8008dd4 <finite>
 8008d44:	b338      	cbz	r0, 8008d96 <pow+0xa2>
 8008d46:	2200      	movs	r2, #0
 8008d48:	2300      	movs	r3, #0
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	f7f7 fec5 	bl	8000adc <__aeabi_dcmplt>
 8008d52:	b300      	cbz	r0, 8008d96 <pow+0xa2>
 8008d54:	f7fd fa92 	bl	800627c <__errno>
 8008d58:	2322      	movs	r3, #34	; 0x22
 8008d5a:	e01b      	b.n	8008d94 <pow+0xa0>
 8008d5c:	ec47 6b10 	vmov	d0, r6, r7
 8008d60:	f000 f838 	bl	8008dd4 <finite>
 8008d64:	b9e0      	cbnz	r0, 8008da0 <pow+0xac>
 8008d66:	eeb0 0a48 	vmov.f32	s0, s16
 8008d6a:	eef0 0a68 	vmov.f32	s1, s17
 8008d6e:	f000 f831 	bl	8008dd4 <finite>
 8008d72:	b1a8      	cbz	r0, 8008da0 <pow+0xac>
 8008d74:	ec45 4b10 	vmov	d0, r4, r5
 8008d78:	f000 f82c 	bl	8008dd4 <finite>
 8008d7c:	b180      	cbz	r0, 8008da0 <pow+0xac>
 8008d7e:	4632      	mov	r2, r6
 8008d80:	463b      	mov	r3, r7
 8008d82:	4630      	mov	r0, r6
 8008d84:	4639      	mov	r1, r7
 8008d86:	f7f7 fed1 	bl	8000b2c <__aeabi_dcmpun>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d0e2      	beq.n	8008d54 <pow+0x60>
 8008d8e:	f7fd fa75 	bl	800627c <__errno>
 8008d92:	2321      	movs	r3, #33	; 0x21
 8008d94:	6003      	str	r3, [r0, #0]
 8008d96:	ecbd 8b02 	vpop	{d8}
 8008d9a:	ec47 6b10 	vmov	d0, r6, r7
 8008d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da0:	2200      	movs	r2, #0
 8008da2:	2300      	movs	r3, #0
 8008da4:	4630      	mov	r0, r6
 8008da6:	4639      	mov	r1, r7
 8008da8:	f7f7 fe8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d0f2      	beq.n	8008d96 <pow+0xa2>
 8008db0:	eeb0 0a48 	vmov.f32	s0, s16
 8008db4:	eef0 0a68 	vmov.f32	s1, s17
 8008db8:	f000 f80c 	bl	8008dd4 <finite>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d0ea      	beq.n	8008d96 <pow+0xa2>
 8008dc0:	ec45 4b10 	vmov	d0, r4, r5
 8008dc4:	f000 f806 	bl	8008dd4 <finite>
 8008dc8:	e7c3      	b.n	8008d52 <pow+0x5e>
 8008dca:	4f01      	ldr	r7, [pc, #4]	; (8008dd0 <pow+0xdc>)
 8008dcc:	2600      	movs	r6, #0
 8008dce:	e7e2      	b.n	8008d96 <pow+0xa2>
 8008dd0:	3ff00000 	.word	0x3ff00000

08008dd4 <finite>:
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	ed8d 0b00 	vstr	d0, [sp]
 8008dda:	9801      	ldr	r0, [sp, #4]
 8008ddc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008de0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008de4:	0fc0      	lsrs	r0, r0, #31
 8008de6:	b002      	add	sp, #8
 8008de8:	4770      	bx	lr
 8008dea:	0000      	movs	r0, r0
 8008dec:	0000      	movs	r0, r0
	...

08008df0 <__ieee754_pow>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	ed2d 8b06 	vpush	{d8-d10}
 8008df8:	b089      	sub	sp, #36	; 0x24
 8008dfa:	ed8d 1b00 	vstr	d1, [sp]
 8008dfe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008e02:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008e06:	ea58 0102 	orrs.w	r1, r8, r2
 8008e0a:	ec57 6b10 	vmov	r6, r7, d0
 8008e0e:	d115      	bne.n	8008e3c <__ieee754_pow+0x4c>
 8008e10:	19b3      	adds	r3, r6, r6
 8008e12:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008e16:	4152      	adcs	r2, r2
 8008e18:	4299      	cmp	r1, r3
 8008e1a:	4b89      	ldr	r3, [pc, #548]	; (8009040 <__ieee754_pow+0x250>)
 8008e1c:	4193      	sbcs	r3, r2
 8008e1e:	f080 84d1 	bcs.w	80097c4 <__ieee754_pow+0x9d4>
 8008e22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e26:	4630      	mov	r0, r6
 8008e28:	4639      	mov	r1, r7
 8008e2a:	f7f7 fa2f 	bl	800028c <__adddf3>
 8008e2e:	ec41 0b10 	vmov	d0, r0, r1
 8008e32:	b009      	add	sp, #36	; 0x24
 8008e34:	ecbd 8b06 	vpop	{d8-d10}
 8008e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3c:	4b81      	ldr	r3, [pc, #516]	; (8009044 <__ieee754_pow+0x254>)
 8008e3e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008e42:	429c      	cmp	r4, r3
 8008e44:	ee10 aa10 	vmov	sl, s0
 8008e48:	463d      	mov	r5, r7
 8008e4a:	dc06      	bgt.n	8008e5a <__ieee754_pow+0x6a>
 8008e4c:	d101      	bne.n	8008e52 <__ieee754_pow+0x62>
 8008e4e:	2e00      	cmp	r6, #0
 8008e50:	d1e7      	bne.n	8008e22 <__ieee754_pow+0x32>
 8008e52:	4598      	cmp	r8, r3
 8008e54:	dc01      	bgt.n	8008e5a <__ieee754_pow+0x6a>
 8008e56:	d10f      	bne.n	8008e78 <__ieee754_pow+0x88>
 8008e58:	b172      	cbz	r2, 8008e78 <__ieee754_pow+0x88>
 8008e5a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008e5e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008e62:	ea55 050a 	orrs.w	r5, r5, sl
 8008e66:	d1dc      	bne.n	8008e22 <__ieee754_pow+0x32>
 8008e68:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e6c:	18db      	adds	r3, r3, r3
 8008e6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008e72:	4152      	adcs	r2, r2
 8008e74:	429d      	cmp	r5, r3
 8008e76:	e7d0      	b.n	8008e1a <__ieee754_pow+0x2a>
 8008e78:	2d00      	cmp	r5, #0
 8008e7a:	da3b      	bge.n	8008ef4 <__ieee754_pow+0x104>
 8008e7c:	4b72      	ldr	r3, [pc, #456]	; (8009048 <__ieee754_pow+0x258>)
 8008e7e:	4598      	cmp	r8, r3
 8008e80:	dc51      	bgt.n	8008f26 <__ieee754_pow+0x136>
 8008e82:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008e86:	4598      	cmp	r8, r3
 8008e88:	f340 84ab 	ble.w	80097e2 <__ieee754_pow+0x9f2>
 8008e8c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008e90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008e94:	2b14      	cmp	r3, #20
 8008e96:	dd0f      	ble.n	8008eb8 <__ieee754_pow+0xc8>
 8008e98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008e9c:	fa22 f103 	lsr.w	r1, r2, r3
 8008ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	f040 849c 	bne.w	80097e2 <__ieee754_pow+0x9f2>
 8008eaa:	f001 0101 	and.w	r1, r1, #1
 8008eae:	f1c1 0302 	rsb	r3, r1, #2
 8008eb2:	9304      	str	r3, [sp, #16]
 8008eb4:	b182      	cbz	r2, 8008ed8 <__ieee754_pow+0xe8>
 8008eb6:	e05f      	b.n	8008f78 <__ieee754_pow+0x188>
 8008eb8:	2a00      	cmp	r2, #0
 8008eba:	d15b      	bne.n	8008f74 <__ieee754_pow+0x184>
 8008ebc:	f1c3 0314 	rsb	r3, r3, #20
 8008ec0:	fa48 f103 	asr.w	r1, r8, r3
 8008ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec8:	4543      	cmp	r3, r8
 8008eca:	f040 8487 	bne.w	80097dc <__ieee754_pow+0x9ec>
 8008ece:	f001 0101 	and.w	r1, r1, #1
 8008ed2:	f1c1 0302 	rsb	r3, r1, #2
 8008ed6:	9304      	str	r3, [sp, #16]
 8008ed8:	4b5c      	ldr	r3, [pc, #368]	; (800904c <__ieee754_pow+0x25c>)
 8008eda:	4598      	cmp	r8, r3
 8008edc:	d132      	bne.n	8008f44 <__ieee754_pow+0x154>
 8008ede:	f1b9 0f00 	cmp.w	r9, #0
 8008ee2:	f280 8477 	bge.w	80097d4 <__ieee754_pow+0x9e4>
 8008ee6:	4959      	ldr	r1, [pc, #356]	; (800904c <__ieee754_pow+0x25c>)
 8008ee8:	4632      	mov	r2, r6
 8008eea:	463b      	mov	r3, r7
 8008eec:	2000      	movs	r0, #0
 8008eee:	f7f7 fcad 	bl	800084c <__aeabi_ddiv>
 8008ef2:	e79c      	b.n	8008e2e <__ieee754_pow+0x3e>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	9304      	str	r3, [sp, #16]
 8008ef8:	2a00      	cmp	r2, #0
 8008efa:	d13d      	bne.n	8008f78 <__ieee754_pow+0x188>
 8008efc:	4b51      	ldr	r3, [pc, #324]	; (8009044 <__ieee754_pow+0x254>)
 8008efe:	4598      	cmp	r8, r3
 8008f00:	d1ea      	bne.n	8008ed8 <__ieee754_pow+0xe8>
 8008f02:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008f06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008f0a:	ea53 030a 	orrs.w	r3, r3, sl
 8008f0e:	f000 8459 	beq.w	80097c4 <__ieee754_pow+0x9d4>
 8008f12:	4b4f      	ldr	r3, [pc, #316]	; (8009050 <__ieee754_pow+0x260>)
 8008f14:	429c      	cmp	r4, r3
 8008f16:	dd08      	ble.n	8008f2a <__ieee754_pow+0x13a>
 8008f18:	f1b9 0f00 	cmp.w	r9, #0
 8008f1c:	f2c0 8456 	blt.w	80097cc <__ieee754_pow+0x9dc>
 8008f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f24:	e783      	b.n	8008e2e <__ieee754_pow+0x3e>
 8008f26:	2302      	movs	r3, #2
 8008f28:	e7e5      	b.n	8008ef6 <__ieee754_pow+0x106>
 8008f2a:	f1b9 0f00 	cmp.w	r9, #0
 8008f2e:	f04f 0000 	mov.w	r0, #0
 8008f32:	f04f 0100 	mov.w	r1, #0
 8008f36:	f6bf af7a 	bge.w	8008e2e <__ieee754_pow+0x3e>
 8008f3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008f3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008f42:	e774      	b.n	8008e2e <__ieee754_pow+0x3e>
 8008f44:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008f48:	d106      	bne.n	8008f58 <__ieee754_pow+0x168>
 8008f4a:	4632      	mov	r2, r6
 8008f4c:	463b      	mov	r3, r7
 8008f4e:	4630      	mov	r0, r6
 8008f50:	4639      	mov	r1, r7
 8008f52:	f7f7 fb51 	bl	80005f8 <__aeabi_dmul>
 8008f56:	e76a      	b.n	8008e2e <__ieee754_pow+0x3e>
 8008f58:	4b3e      	ldr	r3, [pc, #248]	; (8009054 <__ieee754_pow+0x264>)
 8008f5a:	4599      	cmp	r9, r3
 8008f5c:	d10c      	bne.n	8008f78 <__ieee754_pow+0x188>
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	db0a      	blt.n	8008f78 <__ieee754_pow+0x188>
 8008f62:	ec47 6b10 	vmov	d0, r6, r7
 8008f66:	b009      	add	sp, #36	; 0x24
 8008f68:	ecbd 8b06 	vpop	{d8-d10}
 8008f6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f70:	f000 bd20 	b.w	80099b4 <__ieee754_sqrt>
 8008f74:	2300      	movs	r3, #0
 8008f76:	9304      	str	r3, [sp, #16]
 8008f78:	ec47 6b10 	vmov	d0, r6, r7
 8008f7c:	f000 fc62 	bl	8009844 <fabs>
 8008f80:	ec51 0b10 	vmov	r0, r1, d0
 8008f84:	f1ba 0f00 	cmp.w	sl, #0
 8008f88:	d129      	bne.n	8008fde <__ieee754_pow+0x1ee>
 8008f8a:	b124      	cbz	r4, 8008f96 <__ieee754_pow+0x1a6>
 8008f8c:	4b2f      	ldr	r3, [pc, #188]	; (800904c <__ieee754_pow+0x25c>)
 8008f8e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d123      	bne.n	8008fde <__ieee754_pow+0x1ee>
 8008f96:	f1b9 0f00 	cmp.w	r9, #0
 8008f9a:	da05      	bge.n	8008fa8 <__ieee754_pow+0x1b8>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	492a      	ldr	r1, [pc, #168]	; (800904c <__ieee754_pow+0x25c>)
 8008fa4:	f7f7 fc52 	bl	800084c <__aeabi_ddiv>
 8008fa8:	2d00      	cmp	r5, #0
 8008faa:	f6bf af40 	bge.w	8008e2e <__ieee754_pow+0x3e>
 8008fae:	9b04      	ldr	r3, [sp, #16]
 8008fb0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008fb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008fb8:	431c      	orrs	r4, r3
 8008fba:	d108      	bne.n	8008fce <__ieee754_pow+0x1de>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	f7f7 f960 	bl	8000288 <__aeabi_dsub>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	e78f      	b.n	8008eee <__ieee754_pow+0xfe>
 8008fce:	9b04      	ldr	r3, [sp, #16]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	f47f af2c 	bne.w	8008e2e <__ieee754_pow+0x3e>
 8008fd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fda:	4619      	mov	r1, r3
 8008fdc:	e727      	b.n	8008e2e <__ieee754_pow+0x3e>
 8008fde:	0feb      	lsrs	r3, r5, #31
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	9306      	str	r3, [sp, #24]
 8008fe4:	9a06      	ldr	r2, [sp, #24]
 8008fe6:	9b04      	ldr	r3, [sp, #16]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	d102      	bne.n	8008ff2 <__ieee754_pow+0x202>
 8008fec:	4632      	mov	r2, r6
 8008fee:	463b      	mov	r3, r7
 8008ff0:	e7e6      	b.n	8008fc0 <__ieee754_pow+0x1d0>
 8008ff2:	4b19      	ldr	r3, [pc, #100]	; (8009058 <__ieee754_pow+0x268>)
 8008ff4:	4598      	cmp	r8, r3
 8008ff6:	f340 80fb 	ble.w	80091f0 <__ieee754_pow+0x400>
 8008ffa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008ffe:	4598      	cmp	r8, r3
 8009000:	4b13      	ldr	r3, [pc, #76]	; (8009050 <__ieee754_pow+0x260>)
 8009002:	dd0c      	ble.n	800901e <__ieee754_pow+0x22e>
 8009004:	429c      	cmp	r4, r3
 8009006:	dc0f      	bgt.n	8009028 <__ieee754_pow+0x238>
 8009008:	f1b9 0f00 	cmp.w	r9, #0
 800900c:	da0f      	bge.n	800902e <__ieee754_pow+0x23e>
 800900e:	2000      	movs	r0, #0
 8009010:	b009      	add	sp, #36	; 0x24
 8009012:	ecbd 8b06 	vpop	{d8-d10}
 8009016:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901a:	f000 bcc2 	b.w	80099a2 <__math_oflow>
 800901e:	429c      	cmp	r4, r3
 8009020:	dbf2      	blt.n	8009008 <__ieee754_pow+0x218>
 8009022:	4b0a      	ldr	r3, [pc, #40]	; (800904c <__ieee754_pow+0x25c>)
 8009024:	429c      	cmp	r4, r3
 8009026:	dd19      	ble.n	800905c <__ieee754_pow+0x26c>
 8009028:	f1b9 0f00 	cmp.w	r9, #0
 800902c:	dcef      	bgt.n	800900e <__ieee754_pow+0x21e>
 800902e:	2000      	movs	r0, #0
 8009030:	b009      	add	sp, #36	; 0x24
 8009032:	ecbd 8b06 	vpop	{d8-d10}
 8009036:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903a:	f000 bca9 	b.w	8009990 <__math_uflow>
 800903e:	bf00      	nop
 8009040:	fff00000 	.word	0xfff00000
 8009044:	7ff00000 	.word	0x7ff00000
 8009048:	433fffff 	.word	0x433fffff
 800904c:	3ff00000 	.word	0x3ff00000
 8009050:	3fefffff 	.word	0x3fefffff
 8009054:	3fe00000 	.word	0x3fe00000
 8009058:	41e00000 	.word	0x41e00000
 800905c:	4b60      	ldr	r3, [pc, #384]	; (80091e0 <__ieee754_pow+0x3f0>)
 800905e:	2200      	movs	r2, #0
 8009060:	f7f7 f912 	bl	8000288 <__aeabi_dsub>
 8009064:	a354      	add	r3, pc, #336	; (adr r3, 80091b8 <__ieee754_pow+0x3c8>)
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	4604      	mov	r4, r0
 800906c:	460d      	mov	r5, r1
 800906e:	f7f7 fac3 	bl	80005f8 <__aeabi_dmul>
 8009072:	a353      	add	r3, pc, #332	; (adr r3, 80091c0 <__ieee754_pow+0x3d0>)
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	4606      	mov	r6, r0
 800907a:	460f      	mov	r7, r1
 800907c:	4620      	mov	r0, r4
 800907e:	4629      	mov	r1, r5
 8009080:	f7f7 faba 	bl	80005f8 <__aeabi_dmul>
 8009084:	4b57      	ldr	r3, [pc, #348]	; (80091e4 <__ieee754_pow+0x3f4>)
 8009086:	4682      	mov	sl, r0
 8009088:	468b      	mov	fp, r1
 800908a:	2200      	movs	r2, #0
 800908c:	4620      	mov	r0, r4
 800908e:	4629      	mov	r1, r5
 8009090:	f7f7 fab2 	bl	80005f8 <__aeabi_dmul>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	a14b      	add	r1, pc, #300	; (adr r1, 80091c8 <__ieee754_pow+0x3d8>)
 800909a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800909e:	f7f7 f8f3 	bl	8000288 <__aeabi_dsub>
 80090a2:	4622      	mov	r2, r4
 80090a4:	462b      	mov	r3, r5
 80090a6:	f7f7 faa7 	bl	80005f8 <__aeabi_dmul>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	2000      	movs	r0, #0
 80090b0:	494d      	ldr	r1, [pc, #308]	; (80091e8 <__ieee754_pow+0x3f8>)
 80090b2:	f7f7 f8e9 	bl	8000288 <__aeabi_dsub>
 80090b6:	4622      	mov	r2, r4
 80090b8:	4680      	mov	r8, r0
 80090ba:	4689      	mov	r9, r1
 80090bc:	462b      	mov	r3, r5
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	f7f7 fa99 	bl	80005f8 <__aeabi_dmul>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4640      	mov	r0, r8
 80090cc:	4649      	mov	r1, r9
 80090ce:	f7f7 fa93 	bl	80005f8 <__aeabi_dmul>
 80090d2:	a33f      	add	r3, pc, #252	; (adr r3, 80091d0 <__ieee754_pow+0x3e0>)
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	f7f7 fa8e 	bl	80005f8 <__aeabi_dmul>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4650      	mov	r0, sl
 80090e2:	4659      	mov	r1, fp
 80090e4:	f7f7 f8d0 	bl	8000288 <__aeabi_dsub>
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	4680      	mov	r8, r0
 80090ee:	4689      	mov	r9, r1
 80090f0:	4630      	mov	r0, r6
 80090f2:	4639      	mov	r1, r7
 80090f4:	f7f7 f8ca 	bl	800028c <__adddf3>
 80090f8:	2000      	movs	r0, #0
 80090fa:	4632      	mov	r2, r6
 80090fc:	463b      	mov	r3, r7
 80090fe:	4604      	mov	r4, r0
 8009100:	460d      	mov	r5, r1
 8009102:	f7f7 f8c1 	bl	8000288 <__aeabi_dsub>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	4640      	mov	r0, r8
 800910c:	4649      	mov	r1, r9
 800910e:	f7f7 f8bb 	bl	8000288 <__aeabi_dsub>
 8009112:	9b04      	ldr	r3, [sp, #16]
 8009114:	9a06      	ldr	r2, [sp, #24]
 8009116:	3b01      	subs	r3, #1
 8009118:	4313      	orrs	r3, r2
 800911a:	4682      	mov	sl, r0
 800911c:	468b      	mov	fp, r1
 800911e:	f040 81e7 	bne.w	80094f0 <__ieee754_pow+0x700>
 8009122:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80091d8 <__ieee754_pow+0x3e8>
 8009126:	eeb0 8a47 	vmov.f32	s16, s14
 800912a:	eef0 8a67 	vmov.f32	s17, s15
 800912e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009132:	2600      	movs	r6, #0
 8009134:	4632      	mov	r2, r6
 8009136:	463b      	mov	r3, r7
 8009138:	e9dd 0100 	ldrd	r0, r1, [sp]
 800913c:	f7f7 f8a4 	bl	8000288 <__aeabi_dsub>
 8009140:	4622      	mov	r2, r4
 8009142:	462b      	mov	r3, r5
 8009144:	f7f7 fa58 	bl	80005f8 <__aeabi_dmul>
 8009148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800914c:	4680      	mov	r8, r0
 800914e:	4689      	mov	r9, r1
 8009150:	4650      	mov	r0, sl
 8009152:	4659      	mov	r1, fp
 8009154:	f7f7 fa50 	bl	80005f8 <__aeabi_dmul>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	4640      	mov	r0, r8
 800915e:	4649      	mov	r1, r9
 8009160:	f7f7 f894 	bl	800028c <__adddf3>
 8009164:	4632      	mov	r2, r6
 8009166:	463b      	mov	r3, r7
 8009168:	4680      	mov	r8, r0
 800916a:	4689      	mov	r9, r1
 800916c:	4620      	mov	r0, r4
 800916e:	4629      	mov	r1, r5
 8009170:	f7f7 fa42 	bl	80005f8 <__aeabi_dmul>
 8009174:	460b      	mov	r3, r1
 8009176:	4604      	mov	r4, r0
 8009178:	460d      	mov	r5, r1
 800917a:	4602      	mov	r2, r0
 800917c:	4649      	mov	r1, r9
 800917e:	4640      	mov	r0, r8
 8009180:	f7f7 f884 	bl	800028c <__adddf3>
 8009184:	4b19      	ldr	r3, [pc, #100]	; (80091ec <__ieee754_pow+0x3fc>)
 8009186:	4299      	cmp	r1, r3
 8009188:	ec45 4b19 	vmov	d9, r4, r5
 800918c:	4606      	mov	r6, r0
 800918e:	460f      	mov	r7, r1
 8009190:	468b      	mov	fp, r1
 8009192:	f340 82f0 	ble.w	8009776 <__ieee754_pow+0x986>
 8009196:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800919a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800919e:	4303      	orrs	r3, r0
 80091a0:	f000 81e4 	beq.w	800956c <__ieee754_pow+0x77c>
 80091a4:	ec51 0b18 	vmov	r0, r1, d8
 80091a8:	2200      	movs	r2, #0
 80091aa:	2300      	movs	r3, #0
 80091ac:	f7f7 fc96 	bl	8000adc <__aeabi_dcmplt>
 80091b0:	3800      	subs	r0, #0
 80091b2:	bf18      	it	ne
 80091b4:	2001      	movne	r0, #1
 80091b6:	e72b      	b.n	8009010 <__ieee754_pow+0x220>
 80091b8:	60000000 	.word	0x60000000
 80091bc:	3ff71547 	.word	0x3ff71547
 80091c0:	f85ddf44 	.word	0xf85ddf44
 80091c4:	3e54ae0b 	.word	0x3e54ae0b
 80091c8:	55555555 	.word	0x55555555
 80091cc:	3fd55555 	.word	0x3fd55555
 80091d0:	652b82fe 	.word	0x652b82fe
 80091d4:	3ff71547 	.word	0x3ff71547
 80091d8:	00000000 	.word	0x00000000
 80091dc:	bff00000 	.word	0xbff00000
 80091e0:	3ff00000 	.word	0x3ff00000
 80091e4:	3fd00000 	.word	0x3fd00000
 80091e8:	3fe00000 	.word	0x3fe00000
 80091ec:	408fffff 	.word	0x408fffff
 80091f0:	4bd5      	ldr	r3, [pc, #852]	; (8009548 <__ieee754_pow+0x758>)
 80091f2:	402b      	ands	r3, r5
 80091f4:	2200      	movs	r2, #0
 80091f6:	b92b      	cbnz	r3, 8009204 <__ieee754_pow+0x414>
 80091f8:	4bd4      	ldr	r3, [pc, #848]	; (800954c <__ieee754_pow+0x75c>)
 80091fa:	f7f7 f9fd 	bl	80005f8 <__aeabi_dmul>
 80091fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009202:	460c      	mov	r4, r1
 8009204:	1523      	asrs	r3, r4, #20
 8009206:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800920a:	4413      	add	r3, r2
 800920c:	9305      	str	r3, [sp, #20]
 800920e:	4bd0      	ldr	r3, [pc, #832]	; (8009550 <__ieee754_pow+0x760>)
 8009210:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009214:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009218:	429c      	cmp	r4, r3
 800921a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800921e:	dd08      	ble.n	8009232 <__ieee754_pow+0x442>
 8009220:	4bcc      	ldr	r3, [pc, #816]	; (8009554 <__ieee754_pow+0x764>)
 8009222:	429c      	cmp	r4, r3
 8009224:	f340 8162 	ble.w	80094ec <__ieee754_pow+0x6fc>
 8009228:	9b05      	ldr	r3, [sp, #20]
 800922a:	3301      	adds	r3, #1
 800922c:	9305      	str	r3, [sp, #20]
 800922e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009232:	2400      	movs	r4, #0
 8009234:	00e3      	lsls	r3, r4, #3
 8009236:	9307      	str	r3, [sp, #28]
 8009238:	4bc7      	ldr	r3, [pc, #796]	; (8009558 <__ieee754_pow+0x768>)
 800923a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800923e:	ed93 7b00 	vldr	d7, [r3]
 8009242:	4629      	mov	r1, r5
 8009244:	ec53 2b17 	vmov	r2, r3, d7
 8009248:	eeb0 9a47 	vmov.f32	s18, s14
 800924c:	eef0 9a67 	vmov.f32	s19, s15
 8009250:	4682      	mov	sl, r0
 8009252:	f7f7 f819 	bl	8000288 <__aeabi_dsub>
 8009256:	4652      	mov	r2, sl
 8009258:	4606      	mov	r6, r0
 800925a:	460f      	mov	r7, r1
 800925c:	462b      	mov	r3, r5
 800925e:	ec51 0b19 	vmov	r0, r1, d9
 8009262:	f7f7 f813 	bl	800028c <__adddf3>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	2000      	movs	r0, #0
 800926c:	49bb      	ldr	r1, [pc, #748]	; (800955c <__ieee754_pow+0x76c>)
 800926e:	f7f7 faed 	bl	800084c <__aeabi_ddiv>
 8009272:	ec41 0b1a 	vmov	d10, r0, r1
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	4630      	mov	r0, r6
 800927c:	4639      	mov	r1, r7
 800927e:	f7f7 f9bb 	bl	80005f8 <__aeabi_dmul>
 8009282:	2300      	movs	r3, #0
 8009284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009288:	9302      	str	r3, [sp, #8]
 800928a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800928e:	46ab      	mov	fp, r5
 8009290:	106d      	asrs	r5, r5, #1
 8009292:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009296:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800929a:	ec41 0b18 	vmov	d8, r0, r1
 800929e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80092a2:	2200      	movs	r2, #0
 80092a4:	4640      	mov	r0, r8
 80092a6:	4649      	mov	r1, r9
 80092a8:	4614      	mov	r4, r2
 80092aa:	461d      	mov	r5, r3
 80092ac:	f7f7 f9a4 	bl	80005f8 <__aeabi_dmul>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	4630      	mov	r0, r6
 80092b6:	4639      	mov	r1, r7
 80092b8:	f7f6 ffe6 	bl	8000288 <__aeabi_dsub>
 80092bc:	ec53 2b19 	vmov	r2, r3, d9
 80092c0:	4606      	mov	r6, r0
 80092c2:	460f      	mov	r7, r1
 80092c4:	4620      	mov	r0, r4
 80092c6:	4629      	mov	r1, r5
 80092c8:	f7f6 ffde 	bl	8000288 <__aeabi_dsub>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4650      	mov	r0, sl
 80092d2:	4659      	mov	r1, fp
 80092d4:	f7f6 ffd8 	bl	8000288 <__aeabi_dsub>
 80092d8:	4642      	mov	r2, r8
 80092da:	464b      	mov	r3, r9
 80092dc:	f7f7 f98c 	bl	80005f8 <__aeabi_dmul>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4630      	mov	r0, r6
 80092e6:	4639      	mov	r1, r7
 80092e8:	f7f6 ffce 	bl	8000288 <__aeabi_dsub>
 80092ec:	ec53 2b1a 	vmov	r2, r3, d10
 80092f0:	f7f7 f982 	bl	80005f8 <__aeabi_dmul>
 80092f4:	ec53 2b18 	vmov	r2, r3, d8
 80092f8:	ec41 0b19 	vmov	d9, r0, r1
 80092fc:	ec51 0b18 	vmov	r0, r1, d8
 8009300:	f7f7 f97a 	bl	80005f8 <__aeabi_dmul>
 8009304:	a37c      	add	r3, pc, #496	; (adr r3, 80094f8 <__ieee754_pow+0x708>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	4604      	mov	r4, r0
 800930c:	460d      	mov	r5, r1
 800930e:	f7f7 f973 	bl	80005f8 <__aeabi_dmul>
 8009312:	a37b      	add	r3, pc, #492	; (adr r3, 8009500 <__ieee754_pow+0x710>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	f7f6 ffb8 	bl	800028c <__adddf3>
 800931c:	4622      	mov	r2, r4
 800931e:	462b      	mov	r3, r5
 8009320:	f7f7 f96a 	bl	80005f8 <__aeabi_dmul>
 8009324:	a378      	add	r3, pc, #480	; (adr r3, 8009508 <__ieee754_pow+0x718>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f6 ffaf 	bl	800028c <__adddf3>
 800932e:	4622      	mov	r2, r4
 8009330:	462b      	mov	r3, r5
 8009332:	f7f7 f961 	bl	80005f8 <__aeabi_dmul>
 8009336:	a376      	add	r3, pc, #472	; (adr r3, 8009510 <__ieee754_pow+0x720>)
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	f7f6 ffa6 	bl	800028c <__adddf3>
 8009340:	4622      	mov	r2, r4
 8009342:	462b      	mov	r3, r5
 8009344:	f7f7 f958 	bl	80005f8 <__aeabi_dmul>
 8009348:	a373      	add	r3, pc, #460	; (adr r3, 8009518 <__ieee754_pow+0x728>)
 800934a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934e:	f7f6 ff9d 	bl	800028c <__adddf3>
 8009352:	4622      	mov	r2, r4
 8009354:	462b      	mov	r3, r5
 8009356:	f7f7 f94f 	bl	80005f8 <__aeabi_dmul>
 800935a:	a371      	add	r3, pc, #452	; (adr r3, 8009520 <__ieee754_pow+0x730>)
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	f7f6 ff94 	bl	800028c <__adddf3>
 8009364:	4622      	mov	r2, r4
 8009366:	4606      	mov	r6, r0
 8009368:	460f      	mov	r7, r1
 800936a:	462b      	mov	r3, r5
 800936c:	4620      	mov	r0, r4
 800936e:	4629      	mov	r1, r5
 8009370:	f7f7 f942 	bl	80005f8 <__aeabi_dmul>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4630      	mov	r0, r6
 800937a:	4639      	mov	r1, r7
 800937c:	f7f7 f93c 	bl	80005f8 <__aeabi_dmul>
 8009380:	4642      	mov	r2, r8
 8009382:	4604      	mov	r4, r0
 8009384:	460d      	mov	r5, r1
 8009386:	464b      	mov	r3, r9
 8009388:	ec51 0b18 	vmov	r0, r1, d8
 800938c:	f7f6 ff7e 	bl	800028c <__adddf3>
 8009390:	ec53 2b19 	vmov	r2, r3, d9
 8009394:	f7f7 f930 	bl	80005f8 <__aeabi_dmul>
 8009398:	4622      	mov	r2, r4
 800939a:	462b      	mov	r3, r5
 800939c:	f7f6 ff76 	bl	800028c <__adddf3>
 80093a0:	4642      	mov	r2, r8
 80093a2:	4682      	mov	sl, r0
 80093a4:	468b      	mov	fp, r1
 80093a6:	464b      	mov	r3, r9
 80093a8:	4640      	mov	r0, r8
 80093aa:	4649      	mov	r1, r9
 80093ac:	f7f7 f924 	bl	80005f8 <__aeabi_dmul>
 80093b0:	4b6b      	ldr	r3, [pc, #428]	; (8009560 <__ieee754_pow+0x770>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	4606      	mov	r6, r0
 80093b6:	460f      	mov	r7, r1
 80093b8:	f7f6 ff68 	bl	800028c <__adddf3>
 80093bc:	4652      	mov	r2, sl
 80093be:	465b      	mov	r3, fp
 80093c0:	f7f6 ff64 	bl	800028c <__adddf3>
 80093c4:	2000      	movs	r0, #0
 80093c6:	4604      	mov	r4, r0
 80093c8:	460d      	mov	r5, r1
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	4640      	mov	r0, r8
 80093d0:	4649      	mov	r1, r9
 80093d2:	f7f7 f911 	bl	80005f8 <__aeabi_dmul>
 80093d6:	4b62      	ldr	r3, [pc, #392]	; (8009560 <__ieee754_pow+0x770>)
 80093d8:	4680      	mov	r8, r0
 80093da:	4689      	mov	r9, r1
 80093dc:	2200      	movs	r2, #0
 80093de:	4620      	mov	r0, r4
 80093e0:	4629      	mov	r1, r5
 80093e2:	f7f6 ff51 	bl	8000288 <__aeabi_dsub>
 80093e6:	4632      	mov	r2, r6
 80093e8:	463b      	mov	r3, r7
 80093ea:	f7f6 ff4d 	bl	8000288 <__aeabi_dsub>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4650      	mov	r0, sl
 80093f4:	4659      	mov	r1, fp
 80093f6:	f7f6 ff47 	bl	8000288 <__aeabi_dsub>
 80093fa:	ec53 2b18 	vmov	r2, r3, d8
 80093fe:	f7f7 f8fb 	bl	80005f8 <__aeabi_dmul>
 8009402:	4622      	mov	r2, r4
 8009404:	4606      	mov	r6, r0
 8009406:	460f      	mov	r7, r1
 8009408:	462b      	mov	r3, r5
 800940a:	ec51 0b19 	vmov	r0, r1, d9
 800940e:	f7f7 f8f3 	bl	80005f8 <__aeabi_dmul>
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	4630      	mov	r0, r6
 8009418:	4639      	mov	r1, r7
 800941a:	f7f6 ff37 	bl	800028c <__adddf3>
 800941e:	4606      	mov	r6, r0
 8009420:	460f      	mov	r7, r1
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4640      	mov	r0, r8
 8009428:	4649      	mov	r1, r9
 800942a:	f7f6 ff2f 	bl	800028c <__adddf3>
 800942e:	a33e      	add	r3, pc, #248	; (adr r3, 8009528 <__ieee754_pow+0x738>)
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	2000      	movs	r0, #0
 8009436:	4604      	mov	r4, r0
 8009438:	460d      	mov	r5, r1
 800943a:	f7f7 f8dd 	bl	80005f8 <__aeabi_dmul>
 800943e:	4642      	mov	r2, r8
 8009440:	ec41 0b18 	vmov	d8, r0, r1
 8009444:	464b      	mov	r3, r9
 8009446:	4620      	mov	r0, r4
 8009448:	4629      	mov	r1, r5
 800944a:	f7f6 ff1d 	bl	8000288 <__aeabi_dsub>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4630      	mov	r0, r6
 8009454:	4639      	mov	r1, r7
 8009456:	f7f6 ff17 	bl	8000288 <__aeabi_dsub>
 800945a:	a335      	add	r3, pc, #212	; (adr r3, 8009530 <__ieee754_pow+0x740>)
 800945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009460:	f7f7 f8ca 	bl	80005f8 <__aeabi_dmul>
 8009464:	a334      	add	r3, pc, #208	; (adr r3, 8009538 <__ieee754_pow+0x748>)
 8009466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946a:	4606      	mov	r6, r0
 800946c:	460f      	mov	r7, r1
 800946e:	4620      	mov	r0, r4
 8009470:	4629      	mov	r1, r5
 8009472:	f7f7 f8c1 	bl	80005f8 <__aeabi_dmul>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4630      	mov	r0, r6
 800947c:	4639      	mov	r1, r7
 800947e:	f7f6 ff05 	bl	800028c <__adddf3>
 8009482:	9a07      	ldr	r2, [sp, #28]
 8009484:	4b37      	ldr	r3, [pc, #220]	; (8009564 <__ieee754_pow+0x774>)
 8009486:	4413      	add	r3, r2
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	f7f6 fefe 	bl	800028c <__adddf3>
 8009490:	4682      	mov	sl, r0
 8009492:	9805      	ldr	r0, [sp, #20]
 8009494:	468b      	mov	fp, r1
 8009496:	f7f7 f845 	bl	8000524 <__aeabi_i2d>
 800949a:	9a07      	ldr	r2, [sp, #28]
 800949c:	4b32      	ldr	r3, [pc, #200]	; (8009568 <__ieee754_pow+0x778>)
 800949e:	4413      	add	r3, r2
 80094a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094a4:	4606      	mov	r6, r0
 80094a6:	460f      	mov	r7, r1
 80094a8:	4652      	mov	r2, sl
 80094aa:	465b      	mov	r3, fp
 80094ac:	ec51 0b18 	vmov	r0, r1, d8
 80094b0:	f7f6 feec 	bl	800028c <__adddf3>
 80094b4:	4642      	mov	r2, r8
 80094b6:	464b      	mov	r3, r9
 80094b8:	f7f6 fee8 	bl	800028c <__adddf3>
 80094bc:	4632      	mov	r2, r6
 80094be:	463b      	mov	r3, r7
 80094c0:	f7f6 fee4 	bl	800028c <__adddf3>
 80094c4:	2000      	movs	r0, #0
 80094c6:	4632      	mov	r2, r6
 80094c8:	463b      	mov	r3, r7
 80094ca:	4604      	mov	r4, r0
 80094cc:	460d      	mov	r5, r1
 80094ce:	f7f6 fedb 	bl	8000288 <__aeabi_dsub>
 80094d2:	4642      	mov	r2, r8
 80094d4:	464b      	mov	r3, r9
 80094d6:	f7f6 fed7 	bl	8000288 <__aeabi_dsub>
 80094da:	ec53 2b18 	vmov	r2, r3, d8
 80094de:	f7f6 fed3 	bl	8000288 <__aeabi_dsub>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4650      	mov	r0, sl
 80094e8:	4659      	mov	r1, fp
 80094ea:	e610      	b.n	800910e <__ieee754_pow+0x31e>
 80094ec:	2401      	movs	r4, #1
 80094ee:	e6a1      	b.n	8009234 <__ieee754_pow+0x444>
 80094f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009540 <__ieee754_pow+0x750>
 80094f4:	e617      	b.n	8009126 <__ieee754_pow+0x336>
 80094f6:	bf00      	nop
 80094f8:	4a454eef 	.word	0x4a454eef
 80094fc:	3fca7e28 	.word	0x3fca7e28
 8009500:	93c9db65 	.word	0x93c9db65
 8009504:	3fcd864a 	.word	0x3fcd864a
 8009508:	a91d4101 	.word	0xa91d4101
 800950c:	3fd17460 	.word	0x3fd17460
 8009510:	518f264d 	.word	0x518f264d
 8009514:	3fd55555 	.word	0x3fd55555
 8009518:	db6fabff 	.word	0xdb6fabff
 800951c:	3fdb6db6 	.word	0x3fdb6db6
 8009520:	33333303 	.word	0x33333303
 8009524:	3fe33333 	.word	0x3fe33333
 8009528:	e0000000 	.word	0xe0000000
 800952c:	3feec709 	.word	0x3feec709
 8009530:	dc3a03fd 	.word	0xdc3a03fd
 8009534:	3feec709 	.word	0x3feec709
 8009538:	145b01f5 	.word	0x145b01f5
 800953c:	be3e2fe0 	.word	0xbe3e2fe0
 8009540:	00000000 	.word	0x00000000
 8009544:	3ff00000 	.word	0x3ff00000
 8009548:	7ff00000 	.word	0x7ff00000
 800954c:	43400000 	.word	0x43400000
 8009550:	0003988e 	.word	0x0003988e
 8009554:	000bb679 	.word	0x000bb679
 8009558:	0800a158 	.word	0x0800a158
 800955c:	3ff00000 	.word	0x3ff00000
 8009560:	40080000 	.word	0x40080000
 8009564:	0800a178 	.word	0x0800a178
 8009568:	0800a168 	.word	0x0800a168
 800956c:	a3b3      	add	r3, pc, #716	; (adr r3, 800983c <__ieee754_pow+0xa4c>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	4640      	mov	r0, r8
 8009574:	4649      	mov	r1, r9
 8009576:	f7f6 fe89 	bl	800028c <__adddf3>
 800957a:	4622      	mov	r2, r4
 800957c:	ec41 0b1a 	vmov	d10, r0, r1
 8009580:	462b      	mov	r3, r5
 8009582:	4630      	mov	r0, r6
 8009584:	4639      	mov	r1, r7
 8009586:	f7f6 fe7f 	bl	8000288 <__aeabi_dsub>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	ec51 0b1a 	vmov	r0, r1, d10
 8009592:	f7f7 fac1 	bl	8000b18 <__aeabi_dcmpgt>
 8009596:	2800      	cmp	r0, #0
 8009598:	f47f ae04 	bne.w	80091a4 <__ieee754_pow+0x3b4>
 800959c:	4aa2      	ldr	r2, [pc, #648]	; (8009828 <__ieee754_pow+0xa38>)
 800959e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095a2:	4293      	cmp	r3, r2
 80095a4:	f340 8107 	ble.w	80097b6 <__ieee754_pow+0x9c6>
 80095a8:	151b      	asrs	r3, r3, #20
 80095aa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80095ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80095b2:	fa4a fa03 	asr.w	sl, sl, r3
 80095b6:	44da      	add	sl, fp
 80095b8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80095bc:	489b      	ldr	r0, [pc, #620]	; (800982c <__ieee754_pow+0xa3c>)
 80095be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80095c2:	4108      	asrs	r0, r1
 80095c4:	ea00 030a 	and.w	r3, r0, sl
 80095c8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80095cc:	f1c1 0114 	rsb	r1, r1, #20
 80095d0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80095d4:	fa4a fa01 	asr.w	sl, sl, r1
 80095d8:	f1bb 0f00 	cmp.w	fp, #0
 80095dc:	f04f 0200 	mov.w	r2, #0
 80095e0:	4620      	mov	r0, r4
 80095e2:	4629      	mov	r1, r5
 80095e4:	bfb8      	it	lt
 80095e6:	f1ca 0a00 	rsblt	sl, sl, #0
 80095ea:	f7f6 fe4d 	bl	8000288 <__aeabi_dsub>
 80095ee:	ec41 0b19 	vmov	d9, r0, r1
 80095f2:	4642      	mov	r2, r8
 80095f4:	464b      	mov	r3, r9
 80095f6:	ec51 0b19 	vmov	r0, r1, d9
 80095fa:	f7f6 fe47 	bl	800028c <__adddf3>
 80095fe:	a37a      	add	r3, pc, #488	; (adr r3, 80097e8 <__ieee754_pow+0x9f8>)
 8009600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009604:	2000      	movs	r0, #0
 8009606:	4604      	mov	r4, r0
 8009608:	460d      	mov	r5, r1
 800960a:	f7f6 fff5 	bl	80005f8 <__aeabi_dmul>
 800960e:	ec53 2b19 	vmov	r2, r3, d9
 8009612:	4606      	mov	r6, r0
 8009614:	460f      	mov	r7, r1
 8009616:	4620      	mov	r0, r4
 8009618:	4629      	mov	r1, r5
 800961a:	f7f6 fe35 	bl	8000288 <__aeabi_dsub>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4640      	mov	r0, r8
 8009624:	4649      	mov	r1, r9
 8009626:	f7f6 fe2f 	bl	8000288 <__aeabi_dsub>
 800962a:	a371      	add	r3, pc, #452	; (adr r3, 80097f0 <__ieee754_pow+0xa00>)
 800962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009630:	f7f6 ffe2 	bl	80005f8 <__aeabi_dmul>
 8009634:	a370      	add	r3, pc, #448	; (adr r3, 80097f8 <__ieee754_pow+0xa08>)
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	4680      	mov	r8, r0
 800963c:	4689      	mov	r9, r1
 800963e:	4620      	mov	r0, r4
 8009640:	4629      	mov	r1, r5
 8009642:	f7f6 ffd9 	bl	80005f8 <__aeabi_dmul>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	4640      	mov	r0, r8
 800964c:	4649      	mov	r1, r9
 800964e:	f7f6 fe1d 	bl	800028c <__adddf3>
 8009652:	4604      	mov	r4, r0
 8009654:	460d      	mov	r5, r1
 8009656:	4602      	mov	r2, r0
 8009658:	460b      	mov	r3, r1
 800965a:	4630      	mov	r0, r6
 800965c:	4639      	mov	r1, r7
 800965e:	f7f6 fe15 	bl	800028c <__adddf3>
 8009662:	4632      	mov	r2, r6
 8009664:	463b      	mov	r3, r7
 8009666:	4680      	mov	r8, r0
 8009668:	4689      	mov	r9, r1
 800966a:	f7f6 fe0d 	bl	8000288 <__aeabi_dsub>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	4620      	mov	r0, r4
 8009674:	4629      	mov	r1, r5
 8009676:	f7f6 fe07 	bl	8000288 <__aeabi_dsub>
 800967a:	4642      	mov	r2, r8
 800967c:	4606      	mov	r6, r0
 800967e:	460f      	mov	r7, r1
 8009680:	464b      	mov	r3, r9
 8009682:	4640      	mov	r0, r8
 8009684:	4649      	mov	r1, r9
 8009686:	f7f6 ffb7 	bl	80005f8 <__aeabi_dmul>
 800968a:	a35d      	add	r3, pc, #372	; (adr r3, 8009800 <__ieee754_pow+0xa10>)
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	4604      	mov	r4, r0
 8009692:	460d      	mov	r5, r1
 8009694:	f7f6 ffb0 	bl	80005f8 <__aeabi_dmul>
 8009698:	a35b      	add	r3, pc, #364	; (adr r3, 8009808 <__ieee754_pow+0xa18>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f6 fdf3 	bl	8000288 <__aeabi_dsub>
 80096a2:	4622      	mov	r2, r4
 80096a4:	462b      	mov	r3, r5
 80096a6:	f7f6 ffa7 	bl	80005f8 <__aeabi_dmul>
 80096aa:	a359      	add	r3, pc, #356	; (adr r3, 8009810 <__ieee754_pow+0xa20>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	f7f6 fdec 	bl	800028c <__adddf3>
 80096b4:	4622      	mov	r2, r4
 80096b6:	462b      	mov	r3, r5
 80096b8:	f7f6 ff9e 	bl	80005f8 <__aeabi_dmul>
 80096bc:	a356      	add	r3, pc, #344	; (adr r3, 8009818 <__ieee754_pow+0xa28>)
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	f7f6 fde1 	bl	8000288 <__aeabi_dsub>
 80096c6:	4622      	mov	r2, r4
 80096c8:	462b      	mov	r3, r5
 80096ca:	f7f6 ff95 	bl	80005f8 <__aeabi_dmul>
 80096ce:	a354      	add	r3, pc, #336	; (adr r3, 8009820 <__ieee754_pow+0xa30>)
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f7f6 fdda 	bl	800028c <__adddf3>
 80096d8:	4622      	mov	r2, r4
 80096da:	462b      	mov	r3, r5
 80096dc:	f7f6 ff8c 	bl	80005f8 <__aeabi_dmul>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4640      	mov	r0, r8
 80096e6:	4649      	mov	r1, r9
 80096e8:	f7f6 fdce 	bl	8000288 <__aeabi_dsub>
 80096ec:	4604      	mov	r4, r0
 80096ee:	460d      	mov	r5, r1
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4640      	mov	r0, r8
 80096f6:	4649      	mov	r1, r9
 80096f8:	f7f6 ff7e 	bl	80005f8 <__aeabi_dmul>
 80096fc:	2200      	movs	r2, #0
 80096fe:	ec41 0b19 	vmov	d9, r0, r1
 8009702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009706:	4620      	mov	r0, r4
 8009708:	4629      	mov	r1, r5
 800970a:	f7f6 fdbd 	bl	8000288 <__aeabi_dsub>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	ec51 0b19 	vmov	r0, r1, d9
 8009716:	f7f7 f899 	bl	800084c <__aeabi_ddiv>
 800971a:	4632      	mov	r2, r6
 800971c:	4604      	mov	r4, r0
 800971e:	460d      	mov	r5, r1
 8009720:	463b      	mov	r3, r7
 8009722:	4640      	mov	r0, r8
 8009724:	4649      	mov	r1, r9
 8009726:	f7f6 ff67 	bl	80005f8 <__aeabi_dmul>
 800972a:	4632      	mov	r2, r6
 800972c:	463b      	mov	r3, r7
 800972e:	f7f6 fdad 	bl	800028c <__adddf3>
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	4620      	mov	r0, r4
 8009738:	4629      	mov	r1, r5
 800973a:	f7f6 fda5 	bl	8000288 <__aeabi_dsub>
 800973e:	4642      	mov	r2, r8
 8009740:	464b      	mov	r3, r9
 8009742:	f7f6 fda1 	bl	8000288 <__aeabi_dsub>
 8009746:	460b      	mov	r3, r1
 8009748:	4602      	mov	r2, r0
 800974a:	4939      	ldr	r1, [pc, #228]	; (8009830 <__ieee754_pow+0xa40>)
 800974c:	2000      	movs	r0, #0
 800974e:	f7f6 fd9b 	bl	8000288 <__aeabi_dsub>
 8009752:	ec41 0b10 	vmov	d0, r0, r1
 8009756:	ee10 3a90 	vmov	r3, s1
 800975a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800975e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009762:	da2b      	bge.n	80097bc <__ieee754_pow+0x9cc>
 8009764:	4650      	mov	r0, sl
 8009766:	f000 f877 	bl	8009858 <scalbn>
 800976a:	ec51 0b10 	vmov	r0, r1, d0
 800976e:	ec53 2b18 	vmov	r2, r3, d8
 8009772:	f7ff bbee 	b.w	8008f52 <__ieee754_pow+0x162>
 8009776:	4b2f      	ldr	r3, [pc, #188]	; (8009834 <__ieee754_pow+0xa44>)
 8009778:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800977c:	429e      	cmp	r6, r3
 800977e:	f77f af0d 	ble.w	800959c <__ieee754_pow+0x7ac>
 8009782:	4b2d      	ldr	r3, [pc, #180]	; (8009838 <__ieee754_pow+0xa48>)
 8009784:	440b      	add	r3, r1
 8009786:	4303      	orrs	r3, r0
 8009788:	d009      	beq.n	800979e <__ieee754_pow+0x9ae>
 800978a:	ec51 0b18 	vmov	r0, r1, d8
 800978e:	2200      	movs	r2, #0
 8009790:	2300      	movs	r3, #0
 8009792:	f7f7 f9a3 	bl	8000adc <__aeabi_dcmplt>
 8009796:	3800      	subs	r0, #0
 8009798:	bf18      	it	ne
 800979a:	2001      	movne	r0, #1
 800979c:	e448      	b.n	8009030 <__ieee754_pow+0x240>
 800979e:	4622      	mov	r2, r4
 80097a0:	462b      	mov	r3, r5
 80097a2:	f7f6 fd71 	bl	8000288 <__aeabi_dsub>
 80097a6:	4642      	mov	r2, r8
 80097a8:	464b      	mov	r3, r9
 80097aa:	f7f7 f9ab 	bl	8000b04 <__aeabi_dcmpge>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	f43f aef4 	beq.w	800959c <__ieee754_pow+0x7ac>
 80097b4:	e7e9      	b.n	800978a <__ieee754_pow+0x99a>
 80097b6:	f04f 0a00 	mov.w	sl, #0
 80097ba:	e71a      	b.n	80095f2 <__ieee754_pow+0x802>
 80097bc:	ec51 0b10 	vmov	r0, r1, d0
 80097c0:	4619      	mov	r1, r3
 80097c2:	e7d4      	b.n	800976e <__ieee754_pow+0x97e>
 80097c4:	491a      	ldr	r1, [pc, #104]	; (8009830 <__ieee754_pow+0xa40>)
 80097c6:	2000      	movs	r0, #0
 80097c8:	f7ff bb31 	b.w	8008e2e <__ieee754_pow+0x3e>
 80097cc:	2000      	movs	r0, #0
 80097ce:	2100      	movs	r1, #0
 80097d0:	f7ff bb2d 	b.w	8008e2e <__ieee754_pow+0x3e>
 80097d4:	4630      	mov	r0, r6
 80097d6:	4639      	mov	r1, r7
 80097d8:	f7ff bb29 	b.w	8008e2e <__ieee754_pow+0x3e>
 80097dc:	9204      	str	r2, [sp, #16]
 80097de:	f7ff bb7b 	b.w	8008ed8 <__ieee754_pow+0xe8>
 80097e2:	2300      	movs	r3, #0
 80097e4:	f7ff bb65 	b.w	8008eb2 <__ieee754_pow+0xc2>
 80097e8:	00000000 	.word	0x00000000
 80097ec:	3fe62e43 	.word	0x3fe62e43
 80097f0:	fefa39ef 	.word	0xfefa39ef
 80097f4:	3fe62e42 	.word	0x3fe62e42
 80097f8:	0ca86c39 	.word	0x0ca86c39
 80097fc:	be205c61 	.word	0xbe205c61
 8009800:	72bea4d0 	.word	0x72bea4d0
 8009804:	3e663769 	.word	0x3e663769
 8009808:	c5d26bf1 	.word	0xc5d26bf1
 800980c:	3ebbbd41 	.word	0x3ebbbd41
 8009810:	af25de2c 	.word	0xaf25de2c
 8009814:	3f11566a 	.word	0x3f11566a
 8009818:	16bebd93 	.word	0x16bebd93
 800981c:	3f66c16c 	.word	0x3f66c16c
 8009820:	5555553e 	.word	0x5555553e
 8009824:	3fc55555 	.word	0x3fc55555
 8009828:	3fe00000 	.word	0x3fe00000
 800982c:	fff00000 	.word	0xfff00000
 8009830:	3ff00000 	.word	0x3ff00000
 8009834:	4090cbff 	.word	0x4090cbff
 8009838:	3f6f3400 	.word	0x3f6f3400
 800983c:	652b82fe 	.word	0x652b82fe
 8009840:	3c971547 	.word	0x3c971547

08009844 <fabs>:
 8009844:	ec51 0b10 	vmov	r0, r1, d0
 8009848:	ee10 2a10 	vmov	r2, s0
 800984c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009850:	ec43 2b10 	vmov	d0, r2, r3
 8009854:	4770      	bx	lr
	...

08009858 <scalbn>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	ec55 4b10 	vmov	r4, r5, d0
 800985e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009862:	4606      	mov	r6, r0
 8009864:	462b      	mov	r3, r5
 8009866:	b999      	cbnz	r1, 8009890 <scalbn+0x38>
 8009868:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800986c:	4323      	orrs	r3, r4
 800986e:	d03f      	beq.n	80098f0 <scalbn+0x98>
 8009870:	4b35      	ldr	r3, [pc, #212]	; (8009948 <scalbn+0xf0>)
 8009872:	4629      	mov	r1, r5
 8009874:	ee10 0a10 	vmov	r0, s0
 8009878:	2200      	movs	r2, #0
 800987a:	f7f6 febd 	bl	80005f8 <__aeabi_dmul>
 800987e:	4b33      	ldr	r3, [pc, #204]	; (800994c <scalbn+0xf4>)
 8009880:	429e      	cmp	r6, r3
 8009882:	4604      	mov	r4, r0
 8009884:	460d      	mov	r5, r1
 8009886:	da10      	bge.n	80098aa <scalbn+0x52>
 8009888:	a327      	add	r3, pc, #156	; (adr r3, 8009928 <scalbn+0xd0>)
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	e01f      	b.n	80098d0 <scalbn+0x78>
 8009890:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009894:	4291      	cmp	r1, r2
 8009896:	d10c      	bne.n	80098b2 <scalbn+0x5a>
 8009898:	ee10 2a10 	vmov	r2, s0
 800989c:	4620      	mov	r0, r4
 800989e:	4629      	mov	r1, r5
 80098a0:	f7f6 fcf4 	bl	800028c <__adddf3>
 80098a4:	4604      	mov	r4, r0
 80098a6:	460d      	mov	r5, r1
 80098a8:	e022      	b.n	80098f0 <scalbn+0x98>
 80098aa:	460b      	mov	r3, r1
 80098ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80098b0:	3936      	subs	r1, #54	; 0x36
 80098b2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80098b6:	4296      	cmp	r6, r2
 80098b8:	dd0d      	ble.n	80098d6 <scalbn+0x7e>
 80098ba:	2d00      	cmp	r5, #0
 80098bc:	a11c      	add	r1, pc, #112	; (adr r1, 8009930 <scalbn+0xd8>)
 80098be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c2:	da02      	bge.n	80098ca <scalbn+0x72>
 80098c4:	a11c      	add	r1, pc, #112	; (adr r1, 8009938 <scalbn+0xe0>)
 80098c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ca:	a319      	add	r3, pc, #100	; (adr r3, 8009930 <scalbn+0xd8>)
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	f7f6 fe92 	bl	80005f8 <__aeabi_dmul>
 80098d4:	e7e6      	b.n	80098a4 <scalbn+0x4c>
 80098d6:	1872      	adds	r2, r6, r1
 80098d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80098dc:	428a      	cmp	r2, r1
 80098de:	dcec      	bgt.n	80098ba <scalbn+0x62>
 80098e0:	2a00      	cmp	r2, #0
 80098e2:	dd08      	ble.n	80098f6 <scalbn+0x9e>
 80098e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098f0:	ec45 4b10 	vmov	d0, r4, r5
 80098f4:	bd70      	pop	{r4, r5, r6, pc}
 80098f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80098fa:	da08      	bge.n	800990e <scalbn+0xb6>
 80098fc:	2d00      	cmp	r5, #0
 80098fe:	a10a      	add	r1, pc, #40	; (adr r1, 8009928 <scalbn+0xd0>)
 8009900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009904:	dac0      	bge.n	8009888 <scalbn+0x30>
 8009906:	a10e      	add	r1, pc, #56	; (adr r1, 8009940 <scalbn+0xe8>)
 8009908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800990c:	e7bc      	b.n	8009888 <scalbn+0x30>
 800990e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009912:	3236      	adds	r2, #54	; 0x36
 8009914:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009918:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800991c:	4620      	mov	r0, r4
 800991e:	4b0c      	ldr	r3, [pc, #48]	; (8009950 <scalbn+0xf8>)
 8009920:	2200      	movs	r2, #0
 8009922:	e7d5      	b.n	80098d0 <scalbn+0x78>
 8009924:	f3af 8000 	nop.w
 8009928:	c2f8f359 	.word	0xc2f8f359
 800992c:	01a56e1f 	.word	0x01a56e1f
 8009930:	8800759c 	.word	0x8800759c
 8009934:	7e37e43c 	.word	0x7e37e43c
 8009938:	8800759c 	.word	0x8800759c
 800993c:	fe37e43c 	.word	0xfe37e43c
 8009940:	c2f8f359 	.word	0xc2f8f359
 8009944:	81a56e1f 	.word	0x81a56e1f
 8009948:	43500000 	.word	0x43500000
 800994c:	ffff3cb0 	.word	0xffff3cb0
 8009950:	3c900000 	.word	0x3c900000

08009954 <with_errno>:
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	4604      	mov	r4, r0
 8009958:	460d      	mov	r5, r1
 800995a:	4616      	mov	r6, r2
 800995c:	f7fc fc8e 	bl	800627c <__errno>
 8009960:	4629      	mov	r1, r5
 8009962:	6006      	str	r6, [r0, #0]
 8009964:	4620      	mov	r0, r4
 8009966:	bd70      	pop	{r4, r5, r6, pc}

08009968 <xflow>:
 8009968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800996a:	4614      	mov	r4, r2
 800996c:	461d      	mov	r5, r3
 800996e:	b108      	cbz	r0, 8009974 <xflow+0xc>
 8009970:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009974:	e9cd 2300 	strd	r2, r3, [sp]
 8009978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800997c:	4620      	mov	r0, r4
 800997e:	4629      	mov	r1, r5
 8009980:	f7f6 fe3a 	bl	80005f8 <__aeabi_dmul>
 8009984:	2222      	movs	r2, #34	; 0x22
 8009986:	b003      	add	sp, #12
 8009988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800998c:	f7ff bfe2 	b.w	8009954 <with_errno>

08009990 <__math_uflow>:
 8009990:	b508      	push	{r3, lr}
 8009992:	2200      	movs	r2, #0
 8009994:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009998:	f7ff ffe6 	bl	8009968 <xflow>
 800999c:	ec41 0b10 	vmov	d0, r0, r1
 80099a0:	bd08      	pop	{r3, pc}

080099a2 <__math_oflow>:
 80099a2:	b508      	push	{r3, lr}
 80099a4:	2200      	movs	r2, #0
 80099a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80099aa:	f7ff ffdd 	bl	8009968 <xflow>
 80099ae:	ec41 0b10 	vmov	d0, r0, r1
 80099b2:	bd08      	pop	{r3, pc}

080099b4 <__ieee754_sqrt>:
 80099b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b8:	ec55 4b10 	vmov	r4, r5, d0
 80099bc:	4e67      	ldr	r6, [pc, #412]	; (8009b5c <__ieee754_sqrt+0x1a8>)
 80099be:	43ae      	bics	r6, r5
 80099c0:	ee10 0a10 	vmov	r0, s0
 80099c4:	ee10 2a10 	vmov	r2, s0
 80099c8:	4629      	mov	r1, r5
 80099ca:	462b      	mov	r3, r5
 80099cc:	d10d      	bne.n	80099ea <__ieee754_sqrt+0x36>
 80099ce:	f7f6 fe13 	bl	80005f8 <__aeabi_dmul>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	4620      	mov	r0, r4
 80099d8:	4629      	mov	r1, r5
 80099da:	f7f6 fc57 	bl	800028c <__adddf3>
 80099de:	4604      	mov	r4, r0
 80099e0:	460d      	mov	r5, r1
 80099e2:	ec45 4b10 	vmov	d0, r4, r5
 80099e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ea:	2d00      	cmp	r5, #0
 80099ec:	dc0b      	bgt.n	8009a06 <__ieee754_sqrt+0x52>
 80099ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80099f2:	4326      	orrs	r6, r4
 80099f4:	d0f5      	beq.n	80099e2 <__ieee754_sqrt+0x2e>
 80099f6:	b135      	cbz	r5, 8009a06 <__ieee754_sqrt+0x52>
 80099f8:	f7f6 fc46 	bl	8000288 <__aeabi_dsub>
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	f7f6 ff24 	bl	800084c <__aeabi_ddiv>
 8009a04:	e7eb      	b.n	80099de <__ieee754_sqrt+0x2a>
 8009a06:	1509      	asrs	r1, r1, #20
 8009a08:	f000 808d 	beq.w	8009b26 <__ieee754_sqrt+0x172>
 8009a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a10:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009a14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a18:	07c9      	lsls	r1, r1, #31
 8009a1a:	bf5c      	itt	pl
 8009a1c:	005b      	lslpl	r3, r3, #1
 8009a1e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009a22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a26:	bf58      	it	pl
 8009a28:	0052      	lslpl	r2, r2, #1
 8009a2a:	2500      	movs	r5, #0
 8009a2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009a30:	1076      	asrs	r6, r6, #1
 8009a32:	0052      	lsls	r2, r2, #1
 8009a34:	f04f 0e16 	mov.w	lr, #22
 8009a38:	46ac      	mov	ip, r5
 8009a3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a3e:	eb0c 0001 	add.w	r0, ip, r1
 8009a42:	4298      	cmp	r0, r3
 8009a44:	bfde      	ittt	le
 8009a46:	1a1b      	suble	r3, r3, r0
 8009a48:	eb00 0c01 	addle.w	ip, r0, r1
 8009a4c:	186d      	addle	r5, r5, r1
 8009a4e:	005b      	lsls	r3, r3, #1
 8009a50:	f1be 0e01 	subs.w	lr, lr, #1
 8009a54:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009a58:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009a5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009a60:	d1ed      	bne.n	8009a3e <__ieee754_sqrt+0x8a>
 8009a62:	4674      	mov	r4, lr
 8009a64:	2720      	movs	r7, #32
 8009a66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009a6a:	4563      	cmp	r3, ip
 8009a6c:	eb01 000e 	add.w	r0, r1, lr
 8009a70:	dc02      	bgt.n	8009a78 <__ieee754_sqrt+0xc4>
 8009a72:	d113      	bne.n	8009a9c <__ieee754_sqrt+0xe8>
 8009a74:	4290      	cmp	r0, r2
 8009a76:	d811      	bhi.n	8009a9c <__ieee754_sqrt+0xe8>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	eb00 0e01 	add.w	lr, r0, r1
 8009a7e:	da57      	bge.n	8009b30 <__ieee754_sqrt+0x17c>
 8009a80:	f1be 0f00 	cmp.w	lr, #0
 8009a84:	db54      	blt.n	8009b30 <__ieee754_sqrt+0x17c>
 8009a86:	f10c 0801 	add.w	r8, ip, #1
 8009a8a:	eba3 030c 	sub.w	r3, r3, ip
 8009a8e:	4290      	cmp	r0, r2
 8009a90:	bf88      	it	hi
 8009a92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009a96:	1a12      	subs	r2, r2, r0
 8009a98:	440c      	add	r4, r1
 8009a9a:	46c4      	mov	ip, r8
 8009a9c:	005b      	lsls	r3, r3, #1
 8009a9e:	3f01      	subs	r7, #1
 8009aa0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009aa4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009aa8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009aac:	d1dd      	bne.n	8009a6a <__ieee754_sqrt+0xb6>
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	d01b      	beq.n	8009aea <__ieee754_sqrt+0x136>
 8009ab2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009b60 <__ieee754_sqrt+0x1ac>
 8009ab6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009b64 <__ieee754_sqrt+0x1b0>
 8009aba:	e9da 0100 	ldrd	r0, r1, [sl]
 8009abe:	e9db 2300 	ldrd	r2, r3, [fp]
 8009ac2:	f7f6 fbe1 	bl	8000288 <__aeabi_dsub>
 8009ac6:	e9da 8900 	ldrd	r8, r9, [sl]
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	4640      	mov	r0, r8
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	f7f7 f80d 	bl	8000af0 <__aeabi_dcmple>
 8009ad6:	b140      	cbz	r0, 8009aea <__ieee754_sqrt+0x136>
 8009ad8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009adc:	e9da 0100 	ldrd	r0, r1, [sl]
 8009ae0:	e9db 2300 	ldrd	r2, r3, [fp]
 8009ae4:	d126      	bne.n	8009b34 <__ieee754_sqrt+0x180>
 8009ae6:	3501      	adds	r5, #1
 8009ae8:	463c      	mov	r4, r7
 8009aea:	106a      	asrs	r2, r5, #1
 8009aec:	0863      	lsrs	r3, r4, #1
 8009aee:	07e9      	lsls	r1, r5, #31
 8009af0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009af4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009af8:	bf48      	it	mi
 8009afa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009afe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009b02:	461c      	mov	r4, r3
 8009b04:	e76d      	b.n	80099e2 <__ieee754_sqrt+0x2e>
 8009b06:	0ad3      	lsrs	r3, r2, #11
 8009b08:	3815      	subs	r0, #21
 8009b0a:	0552      	lsls	r2, r2, #21
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0fa      	beq.n	8009b06 <__ieee754_sqrt+0x152>
 8009b10:	02dc      	lsls	r4, r3, #11
 8009b12:	d50a      	bpl.n	8009b2a <__ieee754_sqrt+0x176>
 8009b14:	f1c1 0420 	rsb	r4, r1, #32
 8009b18:	fa22 f404 	lsr.w	r4, r2, r4
 8009b1c:	1e4d      	subs	r5, r1, #1
 8009b1e:	408a      	lsls	r2, r1
 8009b20:	4323      	orrs	r3, r4
 8009b22:	1b41      	subs	r1, r0, r5
 8009b24:	e772      	b.n	8009a0c <__ieee754_sqrt+0x58>
 8009b26:	4608      	mov	r0, r1
 8009b28:	e7f0      	b.n	8009b0c <__ieee754_sqrt+0x158>
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	3101      	adds	r1, #1
 8009b2e:	e7ef      	b.n	8009b10 <__ieee754_sqrt+0x15c>
 8009b30:	46e0      	mov	r8, ip
 8009b32:	e7aa      	b.n	8009a8a <__ieee754_sqrt+0xd6>
 8009b34:	f7f6 fbaa 	bl	800028c <__adddf3>
 8009b38:	e9da 8900 	ldrd	r8, r9, [sl]
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4640      	mov	r0, r8
 8009b42:	4649      	mov	r1, r9
 8009b44:	f7f6 ffca 	bl	8000adc <__aeabi_dcmplt>
 8009b48:	b120      	cbz	r0, 8009b54 <__ieee754_sqrt+0x1a0>
 8009b4a:	1ca0      	adds	r0, r4, #2
 8009b4c:	bf08      	it	eq
 8009b4e:	3501      	addeq	r5, #1
 8009b50:	3402      	adds	r4, #2
 8009b52:	e7ca      	b.n	8009aea <__ieee754_sqrt+0x136>
 8009b54:	3401      	adds	r4, #1
 8009b56:	f024 0401 	bic.w	r4, r4, #1
 8009b5a:	e7c6      	b.n	8009aea <__ieee754_sqrt+0x136>
 8009b5c:	7ff00000 	.word	0x7ff00000
 8009b60:	20000218 	.word	0x20000218
 8009b64:	20000220 	.word	0x20000220

08009b68 <_init>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	bf00      	nop
 8009b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6e:	bc08      	pop	{r3}
 8009b70:	469e      	mov	lr, r3
 8009b72:	4770      	bx	lr

08009b74 <_fini>:
 8009b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b76:	bf00      	nop
 8009b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7a:	bc08      	pop	{r3}
 8009b7c:	469e      	mov	lr, r3
 8009b7e:	4770      	bx	lr
